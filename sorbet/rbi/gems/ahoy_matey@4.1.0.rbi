# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ahoy_matey` gem.
# Please instead update this file by running `bin/tapioca gem ahoy_matey`.

module Ahoy
  def api; end
  def api=(val); end
  def api_only; end
  def api_only=(val); end
  def bot_detection_version; end
  def bot_detection_version=(val); end
  def cookie_domain; end
  def cookie_domain=(val); end
  def cookie_options; end
  def cookie_options=(val); end
  def cookies; end
  def cookies=(val); end
  def exclude_method; end
  def exclude_method=(val); end
  def geocode; end
  def geocode=(val); end
  def job_queue; end
  def job_queue=(val); end
  def logger; end
  def logger=(val); end
  def mask_ips; end
  def mask_ips=(val); end
  def max_content_length; end
  def max_content_length=(val); end
  def max_events_per_request; end
  def max_events_per_request=(val); end
  def preserve_callbacks; end
  def preserve_callbacks=(val); end
  def protect_from_forgery; end
  def protect_from_forgery=(val); end
  def quiet; end
  def quiet=(val); end
  def server_side_visits; end
  def server_side_visits=(val); end
  def token_generator; end
  def token_generator=(val); end
  def track_bots; end
  def track_bots=(val); end
  def user_agent_parser; end
  def user_agent_parser=(val); end
  def user_method; end
  def user_method=(val); end
  def visit_duration; end
  def visit_duration=(val); end
  def visitor_duration; end
  def visitor_duration=(val); end

  class << self
    def api; end
    def api=(val); end
    def api_only; end
    def api_only=(val); end
    def bot_detection_version; end
    def bot_detection_version=(val); end
    def cookie_domain; end
    def cookie_domain=(val); end
    def cookie_options; end
    def cookie_options=(val); end
    def cookies; end
    def cookies=(val); end
    def exclude_method; end
    def exclude_method=(val); end
    def geocode; end
    def geocode=(val); end
    def instance; end
    def instance=(value); end
    def job_queue; end
    def job_queue=(val); end
    def log(message); end
    def logger; end
    def logger=(val); end
    def mask_ip(ip); end
    def mask_ips; end
    def mask_ips=(val); end
    def max_content_length; end
    def max_content_length=(val); end
    def max_events_per_request; end
    def max_events_per_request=(val); end
    def preserve_callbacks; end
    def preserve_callbacks=(val); end
    def protect_from_forgery; end
    def protect_from_forgery=(val); end
    def quiet; end
    def quiet=(val); end
    def server_side_visits; end
    def server_side_visits=(val); end
    def token_generator; end
    def token_generator=(val); end
    def track_bots; end
    def track_bots=(val); end
    def user_agent_parser; end
    def user_agent_parser=(val); end
    def user_method; end
    def user_method=(val); end
    def visit_duration; end
    def visit_duration=(val); end
    def visitor_duration; end
    def visitor_duration=(val); end
  end
end

class Ahoy::BaseController < ::ApplicationController
  protected

  def ahoy; end
  def check_params; end
  def renew_cookies; end
  def verify_request_size; end

  private

  def _layout(lookup_context, formats); end

  class << self
    def __callbacks; end
    def middleware_stack; end
  end
end

class Ahoy::BaseStore
  # @return [BaseStore] a new instance of BaseStore
  def initialize(options); end

  def authenticate(data); end

  # @return [Boolean]
  def exclude?; end

  def generate_id; end
  def geocode(data); end
  def track_event(data); end
  def track_visit(data); end
  def user; end

  # Sets the attribute user
  #
  # @param value the value to set the attribute user to.
  def user=(_arg0); end

  def visit; end
  def visit_or_create; end

  protected

  def ahoy; end

  # @return [Boolean]
  def bot?; end

  def controller; end

  # @return [Boolean]
  def exclude_by_method?; end

  def request; end
end

module Ahoy::Controller
  def ahoy; end
  def current_visit; end
  def set_ahoy_cookies; end
  def set_ahoy_request_store; end
  def track_ahoy_visit; end

  class << self
    # @private
    def included(base); end
  end
end

class Ahoy::DatabaseStore < ::Ahoy::BaseStore
  def authenticate(_); end
  def geocode(data); end
  def track_event(data); end
  def track_visit(data); end
  def visit; end

  # if we don't have a visit, let's try to create one first
  def visit_or_create(started_at: T.unsafe(nil)); end

  protected

  def event_model; end
  def slice_data(model, data); end

  # @return [Boolean]
  def unique_exception?(e); end

  def visit_model; end
end

class Ahoy::Engine < ::Rails::Engine; end

class Ahoy::EventsController < ::Ahoy::BaseController
  def create; end

  private

  def _layout(lookup_context, formats); end

  class << self
    def middleware_stack; end
  end
end

class Ahoy::GeocodeJob < ::ActiveJob::Base
  def perform(visit); end

  class << self
    def queue_name; end
  end
end

class Ahoy::GeocodeV2Job < ::ActiveJob::Base
  def perform(visit_token, ip); end

  class << self
    def queue_name; end
  end
end

module Ahoy::Helper
  def amp_event(name, properties = T.unsafe(nil)); end
end

module Ahoy::Model
  def visitable(name = T.unsafe(nil), **options); end
end

# backward compatibility
Ahoy::Properties = Ahoy::QueryMethods

module Ahoy::QueryMethods
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Ahoy::QueryMethods::ClassMethods
end

module Ahoy::QueryMethods::ClassMethods
  def group_prop(*props); end
  def where_event(name, properties = T.unsafe(nil)); end
  def where_properties(properties); end
  def where_props(properties); end
end

class Ahoy::Tracker
  # @return [Tracker] a new instance of Tracker
  def initialize(**options); end

  def authenticate(user); end

  # Returns the value of attribute controller.
  def controller; end

  def geocode(data); end

  # @return [Boolean]
  def new_visit?; end

  # @return [Boolean]
  def new_visitor?; end

  # Returns the value of attribute request.
  def request; end

  def reset; end
  def reset_visit; end
  def set_visit_cookie; end
  def set_visitor_cookie; end

  # can't use keyword arguments here
  def track(name, properties = T.unsafe(nil), options = T.unsafe(nil)); end

  def track_visit(defer: T.unsafe(nil), started_at: T.unsafe(nil)); end
  def user; end
  def visit; end
  def visit_id; end
  def visit_or_create; end
  def visit_properties; end
  def visit_token; end
  def visitor_id; end
  def visitor_token; end

  protected

  # @return [Boolean]
  def api?; end

  def debug(message); end
  def delete_cookie(name); end
  def ensure_token(token); end

  # @return [Boolean]
  def exclude?; end

  def existing_visit_token; end
  def existing_visitor_token; end
  def generate_id; end

  # private, but used by API
  #
  # @return [Boolean]
  def missing_params?; end

  def report_exception(e); end
  def set_cookie(name, value, duration = T.unsafe(nil), use_domain = T.unsafe(nil)); end
  def trusted_time(time = T.unsafe(nil)); end
  def visit_anonymity_set; end
  def visit_cookie; end
  def visit_header; end
  def visit_param; end
  def visit_token_helper; end
  def visitor_anonymity_set; end
  def visitor_cookie; end
  def visitor_header; end
  def visitor_param; end
  def visitor_token_helper; end
end

Ahoy::Tracker::UUID_NAMESPACE = T.let(T.unsafe(nil), String)

module Ahoy::Utils
  class << self
    def ensure_utf8(str); end
  end
end

Ahoy::VERSION = T.let(T.unsafe(nil), String)

class Ahoy::VisitProperties
  # @return [VisitProperties] a new instance of VisitProperties
  def initialize(request, api:); end

  def generate; end

  # Returns the value of attribute landing_page.
  def landing_page; end

  # Returns the value of attribute params.
  def params; end

  # Returns the value of attribute referrer.
  def referrer; end

  # Returns the value of attribute request.
  def request; end

  private

  # masking based on Google Analytics anonymization
  # https://support.google.com/analytics/answer/2763052
  def ip; end

  def request_properties; end
  def tech_properties; end
  def traffic_properties; end
  def utm_properties; end
end

class Ahoy::VisitsController < ::Ahoy::BaseController
  def create; end

  private

  def _layout(lookup_context, formats); end

  class << self
    def middleware_stack; end
  end
end
