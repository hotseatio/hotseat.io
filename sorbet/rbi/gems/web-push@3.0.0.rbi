# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `web-push` gem.
# Please instead update this file by running `bin/tapioca gem web-push`.

# Push API implementation
#
# https://tools.ietf.org/html/rfc8030
# https://www.w3.org/TR/push-api/
#
# source://web-push//lib/web_push/version.rb#3
module WebPush
  class << self
    # source://web-push//lib/web_push.rb#59
    def decode64(str); end

    # source://web-push//lib/web_push.rb#55
    def encode64(bytes); end

    # Generate a VapidKey instance to obtain base64 encoded public and private keys
    # suitable for VAPID protocol JSON web token signing
    #
    # @return [WebPush::VapidKey] a new VapidKey instance
    #
    # source://web-push//lib/web_push.rb#51
    def generate_key; end

    # Deliver the payload to the required endpoint given by the JavaScript
    # PushSubscription. Including an optional message requires p256dh and
    # auth keys from the PushSubscription.
    #
    # @option vapid
    # @option options
    # @option options
    # @option vapid
    # @option vapid
    # @param vapid [Hash<Symbol,String>] options for VAPID
    # @param options [Hash<Symbol,String>] additional options for the notification
    # @param endpoint [String] the required PushSubscription url
    # @param message [String] the optional payload
    # @param p256dh [String] the user's public ECDH key given by the PushSubscription
    # @param auth [String] the user's private ECDH key given by the PushSubscription
    #
    # source://web-push//lib/web_push.rb#38
    def payload_send(endpoint:, message: T.unsafe(nil), p256dh: T.unsafe(nil), auth: T.unsafe(nil), vapid: T.unsafe(nil), **options); end

    private

    # source://web-push//lib/web_push.rb#69
    def subscription(endpoint, p256dh, auth); end
  end
end

# source://web-push//lib/web_push/errors.rb#6
class WebPush::ConfigurationError < ::WebPush::Error; end

# source://web-push//lib/web_push/encryption.rb#4
module WebPush::Encryption
  extend ::WebPush::Encryption

  # @raise [ArgumentError]
  #
  # source://web-push//lib/web_push/encryption.rb#7
  def encrypt(message, p256dh, auth); end

  private

  # @raise [ArgumentError]
  #
  # source://web-push//lib/web_push/encryption.rb#64
  def assert_arguments(message, p256dh, auth); end

  # @return [Boolean]
  #
  # source://web-push//lib/web_push/encryption.rb#70
  def blank?(value); end

  # source://web-push//lib/web_push/encryption.rb#60
  def convert16bit(key); end

  # source://web-push//lib/web_push/encryption.rb#47
  def encrypt_payload(plaintext, content_encryption_key, nonce); end
end

# source://web-push//lib/web_push/errors.rb#4
class WebPush::Error < ::RuntimeError; end

# source://web-push//lib/web_push/errors.rb#20
class WebPush::ExpiredSubscription < ::WebPush::ResponseError; end

# source://web-push//lib/web_push/errors.rb#18
class WebPush::InvalidSubscription < ::WebPush::ResponseError; end

# source://web-push//lib/web_push/errors.rb#24
class WebPush::PayloadTooLarge < ::WebPush::ResponseError; end

# source://web-push//lib/web_push/errors.rb#28
class WebPush::PushServiceError < ::WebPush::ResponseError; end

# source://web-push//lib/web_push/request.rb#5
class WebPush::Request
  # @return [Request] a new instance of Request
  #
  # source://web-push//lib/web_push/request.rb#6
  def initialize(subscription:, vapid:, message: T.unsafe(nil), **options); end

  # source://web-push//lib/web_push/request.rb#63
  def body; end

  # source://web-push//lib/web_push/request.rb#56
  def build_vapid_header; end

  # source://web-push//lib/web_push/request.rb#38
  def headers; end

  # source://web-push//lib/web_push/request.rb#14
  def perform; end

  # source://web-push//lib/web_push/request.rb#30
  def proxy_options; end

  private

  # source://web-push//lib/web_push/request.rb#93
  def audience; end

  # source://web-push//lib/web_push/request.rb#124
  def build_payload(message, subscription); end

  # source://web-push//lib/web_push/request.rb#117
  def default_options; end

  # source://web-push//lib/web_push/request.rb#130
  def encrypt_payload(message, p256dh:, auth:); end

  # source://web-push//lib/web_push/request.rb#97
  def expiration; end

  # source://web-push//lib/web_push/request.rb#89
  def jwt_header_fields; end

  # source://web-push//lib/web_push/request.rb#81
  def jwt_payload; end

  # source://web-push//lib/web_push/request.rb#101
  def subject; end

  # source://web-push//lib/web_push/request.rb#138
  def trim_encode64(bin); end

  # source://web-push//lib/web_push/request.rb#73
  def ttl; end

  # source://web-push//lib/web_push/request.rb#77
  def urgency; end

  # source://web-push//lib/web_push/request.rb#69
  def uri; end

  # @return [Boolean]
  #
  # source://web-push//lib/web_push/request.rb#134
  def vapid?; end

  # source://web-push//lib/web_push/request.rb#113
  def vapid_pem; end

  # source://web-push//lib/web_push/request.rb#109
  def vapid_private_key; end

  # source://web-push//lib/web_push/request.rb#105
  def vapid_public_key; end

  # source://web-push//lib/web_push/request.rb#142
  def verify_response(resp); end
end

# source://web-push//lib/web_push/errors.rb#8
class WebPush::ResponseError < ::WebPush::Error
  # @return [ResponseError] a new instance of ResponseError
  #
  # source://web-push//lib/web_push/errors.rb#11
  def initialize(response, host); end

  # Returns the value of attribute host.
  #
  # source://web-push//lib/web_push/errors.rb#9
  def host; end

  # Returns the value of attribute response.
  #
  # source://web-push//lib/web_push/errors.rb#9
  def response; end
end

# source://web-push//lib/web_push/errors.rb#26
class WebPush::TooManyRequests < ::WebPush::ResponseError; end

# source://web-push//lib/web_push/errors.rb#22
class WebPush::Unauthorized < ::WebPush::ResponseError; end

# source://web-push//lib/web_push/version.rb#4
WebPush::VERSION = T.let(T.unsafe(nil), String)

# Class for abstracting the generation and encoding of elliptic curve public and private keys for use with the VAPID protocol
#
# @attr_reader :curve [OpenSSL::PKey::EC] the OpenSSL elliptic curve instance
#
# source://web-push//lib/web_push/vapid_key.rb#7
class WebPush::VapidKey
  # @return [VapidKey] a new instance of VapidKey
  #
  # source://web-push//lib/web_push/vapid_key.rb#26
  def initialize(pkey = T.unsafe(nil)); end

  # Returns the value of attribute curve.
  #
  # source://web-push//lib/web_push/vapid_key.rb#24
  def curve; end

  # source://web-push//lib/web_push/vapid_key.rb#86
  def curve_name; end

  # source://web-push//lib/web_push/vapid_key.rb#90
  def group; end

  # source://web-push//lib/web_push/vapid_key.rb#111
  def inspect; end

  # Retrive the encoded elliptic curve private key for VAPID protocol
  #
  # @return [String] base64 urlsafe-encoded binary representation of 32-byte VAPID private key
  #
  # source://web-push//lib/web_push/vapid_key.rb#48
  def private_key; end

  # source://web-push//lib/web_push/vapid_key.rb#56
  def private_key=(key); end

  # source://web-push//lib/web_push/vapid_key.rb#103
  def private_key_to_pem; end

  # Retrieve the encoded elliptic curve public key for VAPID protocol
  #
  # @return [String] encoded binary representation of 65-byte VAPID public key
  #
  # source://web-push//lib/web_push/vapid_key.rb#34
  def public_key; end

  # source://web-push//lib/web_push/vapid_key.rb#52
  def public_key=(key); end

  # Retrieve the encoded elliptic curve public key suitable for the Web Push request
  #
  # @return [String] the encoded VAPID public key for us in 'Encryption' header
  #
  # source://web-push//lib/web_push/vapid_key.rb#41
  def public_key_for_push_header; end

  # source://web-push//lib/web_push/vapid_key.rb#107
  def public_key_to_pem; end

  # source://web-push//lib/web_push/vapid_key.rb#60
  def set_keys!(public_key = T.unsafe(nil), private_key = T.unsafe(nil)); end

  # source://web-push//lib/web_push/vapid_key.rb#94
  def to_h; end

  # source://web-push//lib/web_push/vapid_key.rb#94
  def to_hash; end

  # source://web-push//lib/web_push/vapid_key.rb#99
  def to_pem; end

  private

  # source://web-push//lib/web_push/vapid_key.rb#121
  def encode64(bin); end

  # source://web-push//lib/web_push/vapid_key.rb#117
  def to_big_num(key); end

  # source://web-push//lib/web_push/vapid_key.rb#125
  def trim_encode64(bin); end

  class << self
    # Create a VapidKey instance from encoded elliptic curve public and private keys
    #
    # @return [WebPush::VapidKey] a VapidKey instance for the given public and private keys
    #
    # source://web-push//lib/web_push/vapid_key.rb#11
    def from_keys(public_key, private_key); end

    # Create a VapidKey instance from pem encoded elliptic curve public and private keys
    #
    # @return [WebPush::VapidKey] a VapidKey instance for the given public and private keys
    #
    # source://web-push//lib/web_push/vapid_key.rb#20
    def from_pem(pem); end
  end
end
