# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `device_detector` gem.
# Please instead update this file by running `bin/tapioca gem device_detector`.

class DeviceDetector
  # @return [DeviceDetector] a new instance of DeviceDetector
  def initialize(user_agent); end

  # @return [Boolean]
  def bot?; end

  def bot_name; end
  def device_brand; end
  def device_name; end
  def device_type; end
  def full_version; end

  # @return [Boolean]
  def known?; end

  def name; end
  def os_family; end
  def os_full_version; end
  def os_name; end

  # Returns the value of attribute user_agent.
  def user_agent; end

  private

  # @return [Boolean]
  def android_mobile_fragment?; end

  # @return [Boolean]
  def android_tablet_fragment?; end

  def bot; end
  def build_regex(src); end
  def client; end

  # @return [Boolean]
  def desktop?; end

  # @return [Boolean]
  def desktop_fragment?; end

  # This is a workaround until we support detecting mobile only browsers
  #
  # @return [Boolean]
  def desktop_string?; end

  def device; end

  # @return [Boolean]
  def opera_tablet?; end

  # @return [Boolean]
  def opera_tv_store?; end

  def os; end

  # @return [Boolean]
  def tizen_samsung_tv?; end

  # @return [Boolean]
  def touch_enabled?; end

  # @return [Boolean]
  def uses_mobile_browser?; end

  class << self
    def cache; end
    def config; end

    # @yield [config]
    def configure; end
  end
end

class DeviceDetector::Bot < ::DeviceDetector::Parser
  # @return [Boolean]
  def bot?; end

  private

  def filenames; end
end

class DeviceDetector::Browser
  class << self
    # @return [Boolean]
    def mobile_only_browser?(name); end
  end
end

DeviceDetector::Browser::AVAILABLE_BROWSERS = T.let(T.unsafe(nil), Hash)
DeviceDetector::Browser::BROWSER_FULL_TO_SHORT = T.let(T.unsafe(nil), Hash)
DeviceDetector::Browser::MOBILE_ONLY_BROWSERS = T.let(T.unsafe(nil), Set)

class DeviceDetector::Client < ::DeviceDetector::Parser
  # @return [Boolean]
  def browser?; end

  # @return [Boolean]
  def known?; end

  # @return [Boolean]
  def mobile_only_browser?; end

  private

  def filenames; end
end

class DeviceDetector::Device < ::DeviceDetector::Parser
  def brand; end

  # @return [Boolean]
  def known?; end

  def name; end
  def type; end

  private

  # The order of files needs to be the same as the order of device
  # parser classes used in the piwik project.
  def filenames; end

  # @return [Boolean]
  def hbbtv?; end

  def matching_regex; end
  def parse_regexes(path, raw_regexes); end

  # Finds the first match of the string in a list of regexes.
  # Handles exception with special characters caused by bug in Ruby regex
  #
  # @param user_agent [String] User Agent string
  # @param regex_list [Array<Regex>] List of regexes
  # @return [MatchData, nil] MatchData if string matches any regexp, nil otherwise
  def regex_find(user_agent, regex_list); end

  def regexes_for_hbbtv; end
  def regexes_for_shelltv; end
  def regexes_other; end

  # @return [Boolean]
  def shelltv?; end
end

DeviceDetector::Device::DEVICE_BRANDS = T.let(T.unsafe(nil), Hash)

# order is relevant for testing with fixtures
DeviceDetector::Device::DEVICE_NAMES = T.let(T.unsafe(nil), Array)

class DeviceDetector::MemoryCache
  # @return [MemoryCache] a new instance of MemoryCache
  def initialize(config); end

  # Returns the value of attribute data.
  def data; end

  def get(key); end
  def get_or_set(key, value = T.unsafe(nil)); end

  # Returns the value of attribute max_keys.
  def max_keys; end

  def set(key, value); end

  private

  def get_hit(key); end

  # Returns the value of attribute lock.
  def lock; end

  def purge_cache; end
end

DeviceDetector::MemoryCache::DEFAULT_MAX_KEYS = T.let(T.unsafe(nil), Integer)
DeviceDetector::MemoryCache::STORES_NIL_VALUE = T.let(T.unsafe(nil), Symbol)

class DeviceDetector::MetadataExtractor < ::Struct
  def call; end

  private

  def extract_metadata; end

  # @raise [NotImplementedError]
  def metadata_string; end

  def regex; end
end

class DeviceDetector::ModelExtractor < ::DeviceDetector::MetadataExtractor
  def call; end

  private

  def metadata_string; end
  def regex; end
end

class DeviceDetector::NameExtractor < ::DeviceDetector::MetadataExtractor
  def call; end

  private

  def metadata_string; end
end

class DeviceDetector::OS < ::DeviceDetector::Parser
  # @return [Boolean]
  def desktop?; end

  def family; end
  def full_version; end
  def name; end
  def short_name; end

  private

  def filenames; end
  def os_info; end
end

DeviceDetector::OS::DESKTOP_OSS = T.let(T.unsafe(nil), Set)
DeviceDetector::OS::DOWNCASED_OPERATING_SYSTEMS = T.let(T.unsafe(nil), Hash)
DeviceDetector::OS::FAMILY_TO_OS = T.let(T.unsafe(nil), Hash)

# OS short codes mapped to long names
DeviceDetector::OS::OPERATING_SYSTEMS = T.let(T.unsafe(nil), Hash)

DeviceDetector::OS::OS_FAMILIES = T.let(T.unsafe(nil), Hash)

class DeviceDetector::Parser
  # @return [Parser] a new instance of Parser
  def initialize(user_agent); end

  def full_version; end
  def name; end

  # Returns the value of attribute user_agent.
  def user_agent; end

  private

  def build_regex(src); end

  # @raise [NotImplementedError]
  def filenames; end

  def filepaths; end
  def from_cache(key); end
  def load_regexes(file_paths); end
  def matching_regex; end
  def parse_regexes(path, raw_regexes); end
  def regex_meta; end
  def regexes; end
  def regexes_for(file_paths); end
  def symbolize_keys!(object); end
end

DeviceDetector::Parser::REGEX_CACHE = T.let(T.unsafe(nil), DeviceDetector::MemoryCache)
DeviceDetector::Parser::ROOT = T.let(T.unsafe(nil), String)
DeviceDetector::VERSION = T.let(T.unsafe(nil), String)

class DeviceDetector::VersionExtractor < ::DeviceDetector::MetadataExtractor
  def call; end

  private

  def metadata_string; end
  def os_version_by_regexes; end
end

DeviceDetector::VersionExtractor::MAJOR_VERSION_2 = T.let(T.unsafe(nil), Gem::Version)
DeviceDetector::VersionExtractor::MAJOR_VERSION_3 = T.let(T.unsafe(nil), Gem::Version)
DeviceDetector::VersionExtractor::MAJOR_VERSION_4 = T.let(T.unsafe(nil), Gem::Version)
DeviceDetector::VersionExtractor::MAJOR_VERSION_8 = T.let(T.unsafe(nil), Gem::Version)
