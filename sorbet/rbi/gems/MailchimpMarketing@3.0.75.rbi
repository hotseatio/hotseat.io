# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `MailchimpMarketing` gem.
# Please instead update this file by running `bin/tapioca gem MailchimpMarketing`.

# #Mailchimp Marketing API
#
# #No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
#
# OpenAPI spec version: 3.0.75
# Contact: apihelp@mailchimp.com
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 2.4.12
module MailchimpMarketing; end

class MailchimpMarketing::AccountExportApi
  # @return [AccountExportApi] a new instance of AccountExportApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Get account export info
  def get_account_exports(export_id, opts = T.unsafe(nil)); end
end

class MailchimpMarketing::AccountExportsApi
  # @return [AccountExportsApi] a new instance of AccountExportsApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Add export
  def create_account_export(body, opts = T.unsafe(nil)); end

  # List account exports
  def list_account_exports(opts = T.unsafe(nil)); end
end

class MailchimpMarketing::ActivityFeedApi
  # @return [ActivityFeedApi] a new instance of ActivityFeedApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Get latest chimp chatter
  def get_chimp_chatter(opts = T.unsafe(nil)); end
end

class MailchimpMarketing::ApiClient
  # @return [ApiClient] a new instance of ApiClient
  def initialize(config = T.unsafe(nil)); end

  # Build parameter value according to the given collection format.
  def build_collection_param(param, collection_format); end

  def call_api(http_method, path, opts = T.unsafe(nil)); end
  def get_server_from_api_key(api_key = T.unsafe(nil)); end

  # Convert object(non-array) to hash.
  def object_to_hash(obj); end

  # Convert object (array, hash, object, etc) to JSON string.
  def object_to_http_body(model); end

  def set_config(config = T.unsafe(nil)); end

  private

  # Build base64 encoded token for basic auth.
  def encoded_basic_token(api_key); end

  class << self
    def default; end
  end
end

class MailchimpMarketing::ApiError < ::StandardError
  # Usage examples:
  #   ApiError.new
  #   ApiError.new("message")
  #   ApiError.new(:status => 500, :response_headers => {}, :response_body => "")
  #   ApiError.new(:status => 404, :message => "Not Found")
  #
  # @return [ApiError] a new instance of ApiError
  def initialize(arg = T.unsafe(nil)); end

  # Returns the value of attribute detail.
  def detail; end

  # Returns the value of attribute errors.
  def errors; end

  # Returns the value of attribute instance.
  def instance; end

  # Returns the value of attribute status.
  def status; end

  # Returns the value of attribute title.
  def title; end

  # Returns the value of attribute type.
  def type; end
end

class MailchimpMarketing::AuthorizedAppsApi
  # @return [AuthorizedAppsApi] a new instance of AuthorizedAppsApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Get authorized app info
  def get(app_id, opts = T.unsafe(nil)); end

  # List authorized apps
  def list(opts = T.unsafe(nil)); end
end

class MailchimpMarketing::AutomationsApi
  # @return [AutomationsApi] a new instance of AutomationsApi
  def initialize(api_client); end

  # Add subscriber to workflow email
  def add_workflow_email_subscriber(workflow_id, workflow_email_id, body, opts = T.unsafe(nil)); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Archive automation
  def archive(workflow_id, opts = T.unsafe(nil)); end

  # Add automation
  def create(body, opts = T.unsafe(nil)); end

  # Delete workflow email
  def delete_workflow_email(workflow_id, workflow_email_id, opts = T.unsafe(nil)); end

  # Get automation info
  def get(workflow_id, opts = T.unsafe(nil)); end

  # Get subscriber removed from workflow
  def get_removed_workflow_email_subscriber(workflow_id, subscriber_hash, opts = T.unsafe(nil)); end

  # Get workflow email info
  def get_workflow_email(workflow_id, workflow_email_id, opts = T.unsafe(nil)); end

  # Get automated email subscriber
  def get_workflow_email_subscriber(workflow_id, workflow_email_id, subscriber_hash, opts = T.unsafe(nil)); end

  # List automated email subscribers
  def get_workflow_email_subscriber_queue(workflow_id, workflow_email_id, opts = T.unsafe(nil)); end

  # List automations
  def list(opts = T.unsafe(nil)); end

  # List automated emails
  def list_all_workflow_emails(workflow_id, opts = T.unsafe(nil)); end

  # List subscribers removed from workflow
  def list_workflow_email_subscribers_removed(workflow_id, opts = T.unsafe(nil)); end

  # Pause automation emails
  def pause_all_emails(workflow_id, opts = T.unsafe(nil)); end

  # Pause automated email
  def pause_workflow_email(workflow_id, workflow_email_id, opts = T.unsafe(nil)); end

  # Remove subscriber from workflow
  def remove_workflow_email_subscriber(workflow_id, body, opts = T.unsafe(nil)); end

  # Start automation emails
  def start_all_emails(workflow_id, opts = T.unsafe(nil)); end

  # Start automated email
  def start_workflow_email(workflow_id, workflow_email_id, opts = T.unsafe(nil)); end

  # Update workflow email
  def update_workflow_email(workflow_id, workflow_email_id, body, opts = T.unsafe(nil)); end
end

class MailchimpMarketing::BatchWebhooksApi
  # @return [BatchWebhooksApi] a new instance of BatchWebhooksApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Add batch webhook
  def create(body, opts = T.unsafe(nil)); end

  # Get batch webhook info
  def get(batch_webhook_id, opts = T.unsafe(nil)); end

  # List batch webhooks
  def list(opts = T.unsafe(nil)); end

  # Delete batch webhook
  def remove(batch_webhook_id, opts = T.unsafe(nil)); end

  # Update batch webhook
  def update(batch_webhook_id, body, opts = T.unsafe(nil)); end
end

class MailchimpMarketing::BatchesApi
  # @return [BatchesApi] a new instance of BatchesApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Delete batch request
  def delete_request(batch_id, opts = T.unsafe(nil)); end

  # List batch requests
  def list(opts = T.unsafe(nil)); end

  # Start batch operation
  def start(body, opts = T.unsafe(nil)); end

  # Get batch operation status
  def status(batch_id, opts = T.unsafe(nil)); end
end

class MailchimpMarketing::CampaignFoldersApi
  # @return [CampaignFoldersApi] a new instance of CampaignFoldersApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Add campaign folder
  def create(body, opts = T.unsafe(nil)); end

  # Get campaign folder
  def get(folder_id, opts = T.unsafe(nil)); end

  # List campaign folders
  def list(opts = T.unsafe(nil)); end

  # Delete campaign folder
  def remove(folder_id, opts = T.unsafe(nil)); end

  # Update campaign folder
  def update(folder_id, body, opts = T.unsafe(nil)); end
end

class MailchimpMarketing::CampaignsApi
  # @return [CampaignsApi] a new instance of CampaignsApi
  def initialize(api_client); end

  # Add campaign feedback
  def add_feedback(campaign_id, body, opts = T.unsafe(nil)); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Cancel campaign
  def cancel_send(campaign_id, opts = T.unsafe(nil)); end

  # Add campaign
  def create(body, opts = T.unsafe(nil)); end

  # Resend campaign
  def create_resend(campaign_id, opts = T.unsafe(nil)); end

  # Delete campaign feedback message
  def delete_feedback_message(campaign_id, feedback_id, opts = T.unsafe(nil)); end

  # Get campaign info
  def get(campaign_id, opts = T.unsafe(nil)); end

  # Get campaign content
  def get_content(campaign_id, opts = T.unsafe(nil)); end

  # List campaign feedback
  def get_feedback(campaign_id, opts = T.unsafe(nil)); end

  # Get campaign feedback message
  def get_feedback_message(campaign_id, feedback_id, opts = T.unsafe(nil)); end

  # Get campaign send checklist
  def get_send_checklist(campaign_id, opts = T.unsafe(nil)); end

  # List campaigns
  def list(opts = T.unsafe(nil)); end

  # Pause rss campaign
  def pause(campaign_id, opts = T.unsafe(nil)); end

  # Delete campaign
  def remove(campaign_id, opts = T.unsafe(nil)); end

  # Replicate campaign
  def replicate(campaign_id, opts = T.unsafe(nil)); end

  # Resume rss campaign
  def resume(campaign_id, opts = T.unsafe(nil)); end

  # Schedule campaign
  def schedule(campaign_id, body, opts = T.unsafe(nil)); end

  # Send campaign
  def send(campaign_id, opts = T.unsafe(nil)); end

  # Send test email
  def send_test_email(campaign_id, body, opts = T.unsafe(nil)); end

  # Set campaign content
  def set_content(campaign_id, body, opts = T.unsafe(nil)); end

  # Unschedule campaign
  def unschedule(campaign_id, opts = T.unsafe(nil)); end

  # Update campaign settings
  def update(campaign_id, body, opts = T.unsafe(nil)); end

  # Update campaign feedback message
  def update_feedback_message(campaign_id, feedback_id, body, opts = T.unsafe(nil)); end
end

class MailchimpMarketing::Client
  # @return [Client] a new instance of Client
  def initialize(config = T.unsafe(nil)); end

  def accountExport; end
  def accountExports; end
  def activityFeed; end
  def authorizedApps; end
  def automations; end
  def batchWebhooks; end
  def batches; end
  def campaignFolders; end
  def campaigns; end
  def connectedSites; end
  def conversations; end
  def customerJourneys; end
  def ecommerce; end
  def facebookAds; end
  def fileManager; end
  def landingPages; end
  def lists; end
  def ping; end
  def reporting; end
  def reports; end
  def root; end
  def searchCampaigns; end
  def searchMembers; end
  def set_config(config = T.unsafe(nil)); end
  def templateFolders; end
  def templates; end
  def verifiedDomains; end
end

class MailchimpMarketing::ConnectedSitesApi
  # @return [ConnectedSitesApi] a new instance of ConnectedSitesApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Add connected site
  def create(body, opts = T.unsafe(nil)); end

  # Get connected site
  def get(connected_site_id, opts = T.unsafe(nil)); end

  # List connected sites
  def list(opts = T.unsafe(nil)); end

  # Delete connected site
  def remove(connected_site_id, opts = T.unsafe(nil)); end

  # Verify connected site script
  def verify_script_installation(connected_site_id, opts = T.unsafe(nil)); end
end

class MailchimpMarketing::ConversationsApi
  # @return [ConversationsApi] a new instance of ConversationsApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Get conversation
  def get(conversation_id, opts = T.unsafe(nil)); end

  # Get message
  def get_conversation_message(conversation_id, message_id, opts = T.unsafe(nil)); end

  # List messages
  def get_conversation_messages(conversation_id, opts = T.unsafe(nil)); end

  # List conversations
  def list(opts = T.unsafe(nil)); end
end

class MailchimpMarketing::CustomerJourneysApi
  # @return [CustomerJourneysApi] a new instance of CustomerJourneysApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Customer Journeys API trigger for a contact
  def trigger(journey_id, step_id, body, opts = T.unsafe(nil)); end
end

class MailchimpMarketing::EcommerceApi
  # @return [EcommerceApi] a new instance of EcommerceApi
  def initialize(api_client); end

  # Add cart line item
  def add_cart_line_item(store_id, cart_id, body, opts = T.unsafe(nil)); end

  # Add order line item
  def add_order_line_item(store_id, order_id, body, opts = T.unsafe(nil)); end

  # Add product image
  def add_product_image(store_id, product_id, body, opts = T.unsafe(nil)); end

  # Add or update product variant
  def add_product_variant(store_id, product_id, variant_id, body, opts = T.unsafe(nil)); end

  # Add product variant
  def add_product_variants(store_id, product_id, body, opts = T.unsafe(nil)); end

  # Add promo code
  def add_promo_code(store_id, promo_rule_id, body, opts = T.unsafe(nil)); end

  # Add promo rule
  def add_promo_rules(store_id, body, opts = T.unsafe(nil)); end

  # Add store
  def add_store(body, opts = T.unsafe(nil)); end

  # Add cart
  def add_store_cart(store_id, body, opts = T.unsafe(nil)); end

  # Add customer
  def add_store_customer(store_id, body, opts = T.unsafe(nil)); end

  # Add order
  def add_store_order(store_id, body, opts = T.unsafe(nil)); end

  # Add product
  def add_store_product(store_id, body, opts = T.unsafe(nil)); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Delete cart line item
  def delete_cart_line_item(store_id, cart_id, line_id, opts = T.unsafe(nil)); end

  # Delete order
  def delete_order(store_id, order_id, opts = T.unsafe(nil)); end

  # Delete order line item
  def delete_order_line_item(store_id, order_id, line_id, opts = T.unsafe(nil)); end

  # Delete product image
  def delete_product_image(store_id, product_id, image_id, opts = T.unsafe(nil)); end

  # Delete product variant
  def delete_product_variant(store_id, product_id, variant_id, opts = T.unsafe(nil)); end

  # Delete promo code
  def delete_promo_code(store_id, promo_rule_id, promo_code_id, opts = T.unsafe(nil)); end

  # Delete promo rule
  def delete_promo_rule(store_id, promo_rule_id, opts = T.unsafe(nil)); end

  # Delete store
  def delete_store(store_id, opts = T.unsafe(nil)); end

  # Delete cart
  def delete_store_cart(store_id, cart_id, opts = T.unsafe(nil)); end

  # Delete customer
  def delete_store_customer(store_id, customer_id, opts = T.unsafe(nil)); end

  # Delete product
  def delete_store_product(store_id, product_id, opts = T.unsafe(nil)); end

  # List cart line items
  def get_all_cart_line_items(store_id, cart_id, opts = T.unsafe(nil)); end

  # List order line items
  def get_all_order_line_items(store_id, order_id, opts = T.unsafe(nil)); end

  # List customers
  def get_all_store_customers(store_id, opts = T.unsafe(nil)); end

  # List product
  def get_all_store_products(store_id, opts = T.unsafe(nil)); end

  # Get cart line item
  def get_cart_line_item(store_id, cart_id, line_id, opts = T.unsafe(nil)); end

  # Get order info
  def get_order(store_id, order_id, opts = T.unsafe(nil)); end

  # Get order line item
  def get_order_line_item(store_id, order_id, line_id, opts = T.unsafe(nil)); end

  # Get product image info
  def get_product_image(store_id, product_id, image_id, opts = T.unsafe(nil)); end

  # List product images
  def get_product_images(store_id, product_id, opts = T.unsafe(nil)); end

  # Get product variant info
  def get_product_variant(store_id, product_id, variant_id, opts = T.unsafe(nil)); end

  # List product variants
  def get_product_variants(store_id, product_id, opts = T.unsafe(nil)); end

  # Get promo code
  def get_promo_code(store_id, promo_rule_id, promo_code_id, opts = T.unsafe(nil)); end

  # List promo codes
  def get_promo_codes(promo_rule_id, store_id, opts = T.unsafe(nil)); end

  # Get promo rule
  def get_promo_rule(store_id, promo_rule_id, opts = T.unsafe(nil)); end

  # Get store info
  def get_store(store_id, opts = T.unsafe(nil)); end

  # Get cart info
  def get_store_cart(store_id, cart_id, opts = T.unsafe(nil)); end

  # List carts
  def get_store_carts(store_id, opts = T.unsafe(nil)); end

  # Get customer info
  def get_store_customer(store_id, customer_id, opts = T.unsafe(nil)); end

  # List orders
  def get_store_orders(store_id, opts = T.unsafe(nil)); end

  # Get product info
  def get_store_product(store_id, product_id, opts = T.unsafe(nil)); end

  # List promo rules
  def list_promo_rules(store_id, opts = T.unsafe(nil)); end

  # List account orders
  def orders(opts = T.unsafe(nil)); end

  # Add or update customer
  def set_store_customer(store_id, customer_id, body, opts = T.unsafe(nil)); end

  # List stores
  def stores(opts = T.unsafe(nil)); end

  # Update cart line item
  def update_cart_line_item(store_id, cart_id, line_id, body, opts = T.unsafe(nil)); end

  # Update order
  def update_order(store_id, order_id, body, opts = T.unsafe(nil)); end

  # Update order line item
  def update_order_line_item(store_id, order_id, line_id, body, opts = T.unsafe(nil)); end

  # Update product image
  def update_product_image(store_id, product_id, image_id, body, opts = T.unsafe(nil)); end

  # Update product variant
  def update_product_variant(store_id, product_id, variant_id, body, opts = T.unsafe(nil)); end

  # Update promo code
  def update_promo_code(store_id, promo_rule_id, promo_code_id, body, opts = T.unsafe(nil)); end

  # Update promo rule
  def update_promo_rule(store_id, promo_rule_id, body, opts = T.unsafe(nil)); end

  # Update store
  def update_store(store_id, body, opts = T.unsafe(nil)); end

  # Update cart
  def update_store_cart(store_id, cart_id, body, opts = T.unsafe(nil)); end

  # Update customer
  def update_store_customer(store_id, customer_id, body, opts = T.unsafe(nil)); end

  # Update product
  def update_store_product(store_id, product_id, body, opts = T.unsafe(nil)); end
end

class MailchimpMarketing::FacebookAdsApi
  # @return [FacebookAdsApi] a new instance of FacebookAdsApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Get facebook ad info
  def get_ad(outreach_id, opts = T.unsafe(nil)); end

  # List facebook ads
  def list(opts = T.unsafe(nil)); end
end

class MailchimpMarketing::FileManagerApi
  # @return [FileManagerApi] a new instance of FileManagerApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Add folder
  def create_folder(body, opts = T.unsafe(nil)); end

  # Delete file
  def delete_file(file_id, opts = T.unsafe(nil)); end

  # Delete folder
  def delete_folder(folder_id, opts = T.unsafe(nil)); end

  # List stored files
  def files(opts = T.unsafe(nil)); end

  # Get file
  def get_file(file_id, opts = T.unsafe(nil)); end

  # Get folder
  def get_folder(folder_id, opts = T.unsafe(nil)); end

  # List folders
  def list_folders(opts = T.unsafe(nil)); end

  # Update file
  def update_file(file_id, body, opts = T.unsafe(nil)); end

  # Update folder
  def update_folder(folder_id, body, opts = T.unsafe(nil)); end

  # Add file
  def upload(body, opts = T.unsafe(nil)); end
end

class MailchimpMarketing::LandingPagesApi
  # @return [LandingPagesApi] a new instance of LandingPagesApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Add landing page
  def create(body, opts = T.unsafe(nil)); end

  # Delete landing page
  def delete_page(page_id, opts = T.unsafe(nil)); end

  # List landing pages
  def get_all(opts = T.unsafe(nil)); end

  # Get landing page info
  def get_page(page_id, opts = T.unsafe(nil)); end

  # Get landing page content
  def get_page_content(page_id, opts = T.unsafe(nil)); end

  # Publish landing page
  def publish_page(page_id, opts = T.unsafe(nil)); end

  # Unpublish landing page
  def unpublish_page(page_id, opts = T.unsafe(nil)); end

  # Update landing page
  def update_page(page_id, body, opts = T.unsafe(nil)); end
end

class MailchimpMarketing::ListsApi
  # @return [ListsApi] a new instance of ListsApi
  def initialize(api_client); end

  # Add member to list
  def add_list_member(list_id, body, opts = T.unsafe(nil)); end

  # Add merge field
  def add_list_merge_field(list_id, body, opts = T.unsafe(nil)); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Batch subscribe or unsubscribe
  def batch_list_members(list_id, body, opts = T.unsafe(nil)); end

  # Batch add or remove members
  def batch_segment_members(body, list_id, segment_id, opts = T.unsafe(nil)); end

  # Add interest in category
  def create_interest_category_interest(list_id, interest_category_id, body, opts = T.unsafe(nil)); end

  # Add list
  def create_list(body, opts = T.unsafe(nil)); end

  # Add interest category
  def create_list_interest_category(list_id, body, opts = T.unsafe(nil)); end

  # Add event
  def create_list_member_event(list_id, subscriber_hash, body, opts = T.unsafe(nil)); end

  # Add member note
  def create_list_member_note(list_id, subscriber_hash, body, opts = T.unsafe(nil)); end

  # Add webhook
  def create_list_webhook(list_id, body, opts = T.unsafe(nil)); end

  # Add segment
  def create_segment(list_id, body, opts = T.unsafe(nil)); end

  # Add member to segment
  def create_segment_member(list_id, segment_id, body, opts = T.unsafe(nil)); end

  # Delete interest category
  def delete_interest_category(list_id, interest_category_id, opts = T.unsafe(nil)); end

  # Delete interest in category
  def delete_interest_category_interest(list_id, interest_category_id, interest_id, opts = T.unsafe(nil)); end

  # Delete list
  def delete_list(list_id, opts = T.unsafe(nil)); end

  # Archive list member
  def delete_list_member(list_id, subscriber_hash, opts = T.unsafe(nil)); end

  # Delete note
  def delete_list_member_note(list_id, subscriber_hash, note_id, opts = T.unsafe(nil)); end

  # Delete list member
  def delete_list_member_permanent(list_id, subscriber_hash, opts = T.unsafe(nil)); end

  # Delete merge field
  def delete_list_merge_field(list_id, merge_id, opts = T.unsafe(nil)); end

  # Delete webhook
  def delete_list_webhook(list_id, webhook_id, opts = T.unsafe(nil)); end

  # Delete segment
  def delete_segment(list_id, segment_id, opts = T.unsafe(nil)); end

  # List member goal events
  def getListMemberGoals(list_id, subscriber_hash, opts = T.unsafe(nil)); end

  # Get lists info
  def get_all_lists(opts = T.unsafe(nil)); end

  # Get interest category info
  def get_interest_category(list_id, interest_category_id, opts = T.unsafe(nil)); end

  # Get interest in category
  def get_interest_category_interest(list_id, interest_category_id, interest_id, opts = T.unsafe(nil)); end

  # Get list info
  def get_list(list_id, opts = T.unsafe(nil)); end

  # Get abuse report
  def get_list_abuse_report_details(list_id, report_id, opts = T.unsafe(nil)); end

  # List abuse reports
  def get_list_abuse_reports(list_id, opts = T.unsafe(nil)); end

  # List top email clients
  def get_list_clients(list_id, opts = T.unsafe(nil)); end

  # List growth history data
  def get_list_growth_history(list_id, opts = T.unsafe(nil)); end

  # Get growth history by month
  def get_list_growth_history_by_month(list_id, month, opts = T.unsafe(nil)); end

  # List interest categories
  def get_list_interest_categories(list_id, opts = T.unsafe(nil)); end

  # List locations
  def get_list_locations(list_id, opts = T.unsafe(nil)); end

  # Get member info
  def get_list_member(list_id, subscriber_hash, opts = T.unsafe(nil)); end

  # View recent activity 50
  def get_list_member_activity(list_id, subscriber_hash, opts = T.unsafe(nil)); end

  # View recent activity
  def get_list_member_activity_feed(list_id, subscriber_hash, opts = T.unsafe(nil)); end

  # List member events
  def get_list_member_events(list_id, subscriber_hash, opts = T.unsafe(nil)); end

  # Get member note
  def get_list_member_note(list_id, subscriber_hash, note_id, opts = T.unsafe(nil)); end

  # List recent member notes
  def get_list_member_notes(list_id, subscriber_hash, opts = T.unsafe(nil)); end

  # List member tags
  def get_list_member_tags(list_id, subscriber_hash, opts = T.unsafe(nil)); end

  # List members info
  def get_list_members_info(list_id, opts = T.unsafe(nil)); end

  # Get merge field
  def get_list_merge_field(list_id, merge_id, opts = T.unsafe(nil)); end

  # List merge fields
  def get_list_merge_fields(list_id, opts = T.unsafe(nil)); end

  # List recent activity
  def get_list_recent_activity(list_id, opts = T.unsafe(nil)); end

  # List signup forms
  def get_list_signup_forms(list_id, opts = T.unsafe(nil)); end

  # Get webhook info
  def get_list_webhook(list_id, webhook_id, opts = T.unsafe(nil)); end

  # List webhooks
  def get_list_webhooks(list_id, opts = T.unsafe(nil)); end

  # Get segment info
  def get_segment(list_id, segment_id, opts = T.unsafe(nil)); end

  # List members in segment
  def get_segment_members_list(list_id, segment_id, opts = T.unsafe(nil)); end

  # List interests in category
  def list_interest_category_interests(list_id, interest_category_id, opts = T.unsafe(nil)); end

  # List segments
  def list_segments(list_id, opts = T.unsafe(nil)); end

  # Remove list member from segment
  def remove_segment_member(list_id, segment_id, subscriber_hash, opts = T.unsafe(nil)); end

  # Add or update list member
  def set_list_member(list_id, subscriber_hash, body, opts = T.unsafe(nil)); end

  # Search for tags on a list by name.
  def tag_search(list_id, opts = T.unsafe(nil)); end

  # Update interest category
  def update_interest_category(list_id, interest_category_id, body, opts = T.unsafe(nil)); end

  # Update interest in category
  def update_interest_category_interest(list_id, interest_category_id, interest_id, body, opts = T.unsafe(nil)); end

  # Update lists
  def update_list(list_id, body, opts = T.unsafe(nil)); end

  # Update list member
  def update_list_member(list_id, subscriber_hash, body, opts = T.unsafe(nil)); end

  # Update note
  def update_list_member_note(list_id, subscriber_hash, note_id, body, opts = T.unsafe(nil)); end

  # Add or remove member tags
  def update_list_member_tags(list_id, subscriber_hash, body, opts = T.unsafe(nil)); end

  # Update merge field
  def update_list_merge_field(list_id, merge_id, body, opts = T.unsafe(nil)); end

  # Customize signup form
  def update_list_signup_form(list_id, body, opts = T.unsafe(nil)); end

  # Update webhook
  def update_list_webhook(list_id, webhook_id, body, opts = T.unsafe(nil)); end

  # Update segment
  def update_segment(list_id, segment_id, body, opts = T.unsafe(nil)); end
end

class MailchimpMarketing::PingApi
  # @return [PingApi] a new instance of PingApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Ping
  def get(opts = T.unsafe(nil)); end
end

class MailchimpMarketing::ReportingApi
  # @return [ReportingApi] a new instance of ReportingApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # List facebook ecommerce report
  def get_facebook_ad_product_activity_report(outreach_id, opts = T.unsafe(nil)); end

  # Get facebook ad report
  def get_facebook_ad_report(outreach_id, opts = T.unsafe(nil)); end

  # List facebook ads reports
  def get_facebook_ads_report_all(opts = T.unsafe(nil)); end

  # Get landing page report
  def get_landing_page_report(outreach_id, opts = T.unsafe(nil)); end

  # List landing pages reports
  def get_landing_page_reports_all(opts = T.unsafe(nil)); end
end

class MailchimpMarketing::ReportsApi
  # @return [ReportsApi] a new instance of ReportsApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # List campaign reports
  def get_all_campaign_reports(opts = T.unsafe(nil)); end

  # Get abuse report
  def get_campaign_abuse_report(campaign_id, report_id, opts = T.unsafe(nil)); end

  # List abuse reports
  def get_campaign_abuse_reports(campaign_id, opts = T.unsafe(nil)); end

  # List campaign feedback
  def get_campaign_advice(campaign_id, opts = T.unsafe(nil)); end

  # List campaign details
  def get_campaign_click_details(campaign_id, opts = T.unsafe(nil)); end

  # Get campaign link details
  def get_campaign_click_details_for_link(campaign_id, link_id, opts = T.unsafe(nil)); end

  # List campaign open details
  def get_campaign_open_details(campaign_id, opts = T.unsafe(nil)); end

  # Get campaign recipient info
  def get_campaign_recipient(campaign_id, subscriber_hash, opts = T.unsafe(nil)); end

  # List campaign recipients
  def get_campaign_recipients(campaign_id, opts = T.unsafe(nil)); end

  # Get campaign report
  def get_campaign_report(campaign_id, opts = T.unsafe(nil)); end

  # List domain performance stats
  def get_domain_performance_for_campaign(campaign_id, opts = T.unsafe(nil)); end

  # List campaign product activity
  def get_ecommerce_product_activity_for_campaign(campaign_id, opts = T.unsafe(nil)); end

  # List EepURL activity
  def get_eepurl_activity_for_campaign(campaign_id, opts = T.unsafe(nil)); end

  # List email activity
  def get_email_activity_for_campaign(campaign_id, opts = T.unsafe(nil)); end

  # Get subscriber email activity
  def get_email_activity_for_subscriber(campaign_id, subscriber_hash, opts = T.unsafe(nil)); end

  # List top open activities
  def get_locations_for_campaign(campaign_id, opts = T.unsafe(nil)); end

  # List child campaign reports
  def get_sub_reports_for_campaign(campaign_id, opts = T.unsafe(nil)); end

  # Get clicked link subscriber
  def get_subscriber_info(campaign_id, link_id, subscriber_hash, opts = T.unsafe(nil)); end

  # Get opened campaign subscriber
  def get_subscriber_info_for_opened_campaign(campaign_id, subscriber_hash, opts = T.unsafe(nil)); end

  # List clicked link subscribers
  def get_subscribers_info(campaign_id, link_id, opts = T.unsafe(nil)); end

  # List unsubscribed members
  def get_unsubscribed_list_for_campaign(campaign_id, opts = T.unsafe(nil)); end

  # Get unsubscribed member
  def get_unsubscribed_list_member(campaign_id, subscriber_hash, opts = T.unsafe(nil)); end
end

class MailchimpMarketing::RootApi
  # @return [RootApi] a new instance of RootApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # List api root resources
  def get_root(opts = T.unsafe(nil)); end
end

class MailchimpMarketing::SearchCampaignsApi
  # @return [SearchCampaignsApi] a new instance of SearchCampaignsApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Search campaigns
  def search(query, opts = T.unsafe(nil)); end
end

class MailchimpMarketing::SearchMembersApi
  # @return [SearchMembersApi] a new instance of SearchMembersApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Search members
  def search(query, opts = T.unsafe(nil)); end
end

class MailchimpMarketing::TemplateFoldersApi
  # @return [TemplateFoldersApi] a new instance of TemplateFoldersApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Add template folder
  def create(body, opts = T.unsafe(nil)); end

  # Get template folder
  def get(folder_id, opts = T.unsafe(nil)); end

  # List template folders
  def list(opts = T.unsafe(nil)); end

  # Delete template folder
  def remove(folder_id, opts = T.unsafe(nil)); end

  # Update template folder
  def update(folder_id, body, opts = T.unsafe(nil)); end
end

class MailchimpMarketing::TemplatesApi
  # @return [TemplatesApi] a new instance of TemplatesApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Add template
  def create(body, opts = T.unsafe(nil)); end

  # Delete template
  def delete_template(template_id, opts = T.unsafe(nil)); end

  # View default content
  def get_default_content_for_template(template_id, opts = T.unsafe(nil)); end

  # Get template info
  def get_template(template_id, opts = T.unsafe(nil)); end

  # List templates
  def list(opts = T.unsafe(nil)); end

  # Update template
  def update_template(template_id, body, opts = T.unsafe(nil)); end
end

MailchimpMarketing::VERSION = T.let(T.unsafe(nil), String)

class MailchimpMarketing::VerifiedDomainsApi
  # @return [VerifiedDomainsApi] a new instance of VerifiedDomainsApi
  def initialize(api_client); end

  # Returns the value of attribute api_client.
  def api_client; end

  # Sets the attribute api_client
  #
  # @param value the value to set the attribute api_client to.
  def api_client=(_arg0); end

  # Add domain to account
  def create_verified_domain(body, opts = T.unsafe(nil)); end

  # Delete domain
  def delete_domain(domain_name, opts = T.unsafe(nil)); end

  # Get domain info
  def get_domain(domain_name, opts = T.unsafe(nil)); end

  # List sending domains
  def get_verified_domains_all(opts = T.unsafe(nil)); end

  # Verify domain
  def submit_domain_verification(domain_name, body, opts = T.unsafe(nil)); end
end
