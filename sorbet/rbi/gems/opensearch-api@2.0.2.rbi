# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `opensearch-api` gem.
# Please instead update this file by running `bin/tapioca gem opensearch-api`.

module OpenSearch; end

module OpenSearch::API
  class << self
    # Auto-include all namespaces in the receiver
    def included(base); end

    # The serializer class
    def serializer; end

    # Access the module settings
    def settings; end
  end
end

module OpenSearch::API::Actions
  # Abort a running benchmark
  #
  # @example
  #
  #   client.abort_benchmark name: 'my_benchmark'
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def abort_benchmark(arguments = T.unsafe(nil)); end

  # Run a single query, or a set of queries, and return statistics on their performance
  #
  # @example Return statistics for a single query
  #
  #   client.benchmark body: {
  #   name: 'my_benchmark',
  #   competitors: [
  #   {
  #   name: 'query_1',
  #   requests: [
  #   { query: { match: { _all: 'a*' } } }
  #   ]
  #   }
  #   ]
  #   }
  # @example Return statistics for a set of "competing" queries
  #
  #   client.benchmark body: {
  #   name: 'my_benchmark',
  #   competitors: [
  #   {
  #   name: 'query_a',
  #   requests: [
  #   { query: { match: { _all: 'a*' } } }
  #   ]
  #   },
  #   {
  #   name: 'query_b',
  #   requests: [
  #   { query: { match: { _all: 'b*' } } }
  #   ]
  #   }
  #   ]
  #   }
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def benchmark(arguments = T.unsafe(nil)); end

  # Allows to perform multiple index/update/delete operations in a single request.
  #
  # or the conveniency "combined" format can be passed, refer to OpenSearch::API::Utils.__bulkify documentation.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def bulk(arguments = T.unsafe(nil)); end

  # Explicitly clears the search context for a scroll.
  #
  # *Deprecation notice*:
  # A scroll id can be quite large and should be specified as part of the body
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def clear_scroll(arguments = T.unsafe(nil)); end

  # Close a point in time
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def close_point_in_time(arguments = T.unsafe(nil)); end

  # Returns number of documents matching a query.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def count(arguments = T.unsafe(nil)); end

  # Creates a new document in the index.
  #
  # Returns a 409 response when a document with a same ID already exists in the index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def create(arguments = T.unsafe(nil)); end

  # Removes a document from the index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def delete(arguments = T.unsafe(nil)); end

  # Deletes documents matching the provided query.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def delete_by_query(arguments = T.unsafe(nil)); end

  # The value of requests_per_second can be changed on a running delete by query using the _rethrottle API
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def delete_by_query_rethrottle(arguments = T.unsafe(nil)); end

  # Deletes a script.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def delete_script(arguments = T.unsafe(nil)); end

  # Returns information about whether a document exists in an index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def exists(arguments = T.unsafe(nil)); end

  # Returns information about whether a document exists in an index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def exists?(arguments = T.unsafe(nil)); end

  # Returns information about whether a document source exists in an index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def exists_source(arguments = T.unsafe(nil)); end

  # Returns information about whether a document source exists in an index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def exists_source?(arguments = T.unsafe(nil)); end

  # Returns information about why a specific matches (or doesn't match) a query.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def explain(arguments = T.unsafe(nil)); end

  # Returns the information about the capabilities of fields among multiple indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def field_caps(arguments = T.unsafe(nil)); end

  # Returns a document.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def get(arguments = T.unsafe(nil)); end

  # Returns a script.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def get_script(arguments = T.unsafe(nil)); end

  # Returns all script contexts.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def get_script_context(arguments = T.unsafe(nil)); end

  # Returns available script types, languages and contexts
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def get_script_languages(arguments = T.unsafe(nil)); end

  # Returns the source of a document.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def get_source(arguments = T.unsafe(nil)); end

  # Creates or updates a document in an index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def index(arguments = T.unsafe(nil)); end

  # Returns basic information about the cluster.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def info(arguments = T.unsafe(nil)); end

  # Allows to get multiple documents in one request.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def mget(arguments = T.unsafe(nil)); end

  # Allows to execute several search operations in one request.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def msearch(arguments = T.unsafe(nil)); end

  # Allows to execute several search template operations in one request.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def msearch_template(arguments = T.unsafe(nil)); end

  # Returns multiple termvectors in one request.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def mtermvectors(arguments = T.unsafe(nil)); end

  # Open a point in time that can be used in subsequent searches
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def open_point_in_time(arguments = T.unsafe(nil)); end

  # Returns whether the cluster is running.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def ping(arguments = T.unsafe(nil)); end

  # Creates or updates a script.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def put_script(arguments = T.unsafe(nil)); end

  # Allows to evaluate the quality of ranked search results over a set of typical search queries
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def rank_eval(arguments = T.unsafe(nil)); end

  # Allows to copy documents from one index to another, optionally filtering the source
  # documents by a query, changing the destination index settings, or fetching the
  # documents from a remote cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def reindex(arguments = T.unsafe(nil)); end

  # Changes the number of requests per second for a particular Reindex operation.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def reindex_rethrottle(arguments = T.unsafe(nil)); end

  # Allows to use the Mustache language to pre-render a search definition.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def render_search_template(arguments = T.unsafe(nil)); end

  # Allows an arbitrary script to be executed and a result to be returned
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def scripts_painless_execute(arguments = T.unsafe(nil)); end

  # Allows to retrieve a large numbers of results from a single search request.
  #
  # *Deprecation notice*:
  # A scroll id can be quite large and should be specified as part of the body
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def scroll(arguments = T.unsafe(nil)); end

  # Returns results matching a query.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def search(arguments = T.unsafe(nil)); end

  # Returns information about the indices and shards that a search request would be executed against.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def search_shards(arguments = T.unsafe(nil)); end

  # Allows to use the Mustache language to pre-render a search definition.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def search_template(arguments = T.unsafe(nil)); end

  # Deprecated: Use the plural version, {#termvectors}
  def termvector(arguments = T.unsafe(nil)); end

  # Returns information and statistics about terms in the fields of a particular document.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def termvectors(arguments = T.unsafe(nil)); end

  # Updates a document with a script or partial document.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def update(arguments = T.unsafe(nil)); end

  # Performs an update on every document in the index without changing the source,
  # for example to pick up a mapping change.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def update_by_query(arguments = T.unsafe(nil)); end

  # Changes the number of requests per second for a particular Update By Query operation.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def update_by_query_rethrottle(arguments = T.unsafe(nil)); end
end

module OpenSearch::API::Actions::ParamsRegistry
  extend ::OpenSearch::API::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
OpenSearch::API::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

OpenSearch::API::COMMON_PARAMS = T.let(T.unsafe(nil), Array)
OpenSearch::API::COMMON_QUERY_PARAMS = T.let(T.unsafe(nil), Array)

module OpenSearch::API::Cat
  # Proxy method for {CatClient}, available in the receiving object
  def cat; end
end

module OpenSearch::API::Cat::Actions
  # Shows information about currently configured aliases to indices including filter and routing infos.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def aliases(arguments = T.unsafe(nil)); end

  # Provides a snapshot of how many shards are allocated to each data node and how much disk space they are using.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def allocation(arguments = T.unsafe(nil)); end

  # Provides quick access to the document count of the entire cluster, or individual indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def count(arguments = T.unsafe(nil)); end

  # Shows how much heap memory is currently being used by fielddata on every data node in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def fielddata(arguments = T.unsafe(nil)); end

  # Returns a concise representation of the cluster health.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def health(arguments = T.unsafe(nil)); end

  # Returns help for the Cat APIs.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def help(arguments = T.unsafe(nil)); end

  # Returns information about indices: number of primaries and replicas, document counts, disk size, ...
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def indices(arguments = T.unsafe(nil)); end

  # Returns information about the master node.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def master(arguments = T.unsafe(nil)); end

  # Returns information about custom node attributes.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def nodeattrs(arguments = T.unsafe(nil)); end

  # Returns basic statistics about performance of cluster nodes.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def nodes(arguments = T.unsafe(nil)); end

  # Returns a concise representation of the cluster pending tasks.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def pending_tasks(arguments = T.unsafe(nil)); end

  # Returns information about installed plugins across nodes node.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def plugins(arguments = T.unsafe(nil)); end

  # Returns information about index shard recoveries, both on-going completed.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def recovery(arguments = T.unsafe(nil)); end

  # Returns information about snapshot repositories registered in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def repositories(arguments = T.unsafe(nil)); end

  # Provides low-level information about the segments in the shards of an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def segments(arguments = T.unsafe(nil)); end

  # Provides a detailed view of shard allocation on nodes.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def shards(arguments = T.unsafe(nil)); end

  # Returns all snapshots in a specific repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def snapshots(arguments = T.unsafe(nil)); end

  # Returns information about the tasks currently executing on one or more nodes in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def tasks(arguments = T.unsafe(nil)); end

  # Returns information about existing templates.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def templates(arguments = T.unsafe(nil)); end

  # Returns cluster-wide thread pool statistics per node.
  # By default the active, queue and rejected statistics are returned for all thread pools.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def thread_pool(arguments = T.unsafe(nil)); end
end

module OpenSearch::API::Cat::Actions::ParamsRegistry
  extend ::OpenSearch::API::Cat::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
OpenSearch::API::Cat::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "cat" namespace (includes the {Cat::Actions} methods)
class OpenSearch::API::Cat::CatClient
  include ::OpenSearch::API::Cat::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

module OpenSearch::API::Cluster
  # Proxy method for {ClusterClient}, available in the receiving object
  def cluster; end
end

module OpenSearch::API::Cluster::Actions
  # Provides explanations for shard allocations in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def allocation_explain(arguments = T.unsafe(nil)); end

  # Deletes a component template
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def delete_component_template(arguments = T.unsafe(nil)); end

  # Clears cluster voting config exclusions.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def delete_voting_config_exclusions(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular component template exist
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def exists_component_template(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular component template exist
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def exists_component_template?(arguments = T.unsafe(nil)); end

  # Returns one or more component templates
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def get_component_template(arguments = T.unsafe(nil)); end

  # Returns cluster settings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def get_settings(arguments = T.unsafe(nil)); end

  # Returns basic information about the health of the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def health(arguments = T.unsafe(nil)); end

  # Returns a list of any cluster-level changes (e.g. create index, update mapping,
  # allocate or fail shard) which have not yet been executed.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def pending_tasks(arguments = T.unsafe(nil)); end

  # Updates the cluster voting config exclusions by node ids or node names.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def post_voting_config_exclusions(arguments = T.unsafe(nil)); end

  # Creates or updates a component template
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def put_component_template(arguments = T.unsafe(nil)); end

  # Updates the cluster settings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def put_settings(arguments = T.unsafe(nil)); end

  # Returns the information about configured remote clusters.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def remote_info(arguments = T.unsafe(nil)); end

  # Allows to manually change the allocation of individual shards in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def reroute(arguments = T.unsafe(nil)); end

  # Returns a comprehensive information about the state of the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def state(arguments = T.unsafe(nil)); end

  # Returns high-level overview of cluster statistics.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def stats(arguments = T.unsafe(nil)); end
end

module OpenSearch::API::Cluster::Actions::ParamsRegistry
  extend ::OpenSearch::API::Cluster::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
OpenSearch::API::Cluster::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "cluster" namespace (includes the {Cluster::Actions} methods)
class OpenSearch::API::Cluster::ClusterClient
  include ::OpenSearch::API::Cluster::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

module OpenSearch::API::Common; end
module OpenSearch::API::Common::Actions; end

module OpenSearch::API::Common::Client
  # Delegates the `perform_request` method to the wrapped client
  def perform_request(method, path, params = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil)); end
end

# Base client wrapper
module OpenSearch::API::Common::Client::Base
  def initialize(client); end

  # Returns the value of attribute client.
  def client; end
end

OpenSearch::API::DEFAULT_DOC = T.let(T.unsafe(nil), String)
OpenSearch::API::DEFAULT_SERIALIZER = MultiJson

module OpenSearch::API::DanglingIndices
  # Proxy method for {DanglingIndicesClient}, available in the receiving object
  def dangling_indices; end
end

module OpenSearch::API::DanglingIndices::Actions
  # Deletes the specified dangling index
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def delete_dangling_index(arguments = T.unsafe(nil)); end

  # Imports the specified dangling index
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def import_dangling_index(arguments = T.unsafe(nil)); end

  # Returns all dangling indices.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def list_dangling_indices(arguments = T.unsafe(nil)); end
end

module OpenSearch::API::DanglingIndices::Actions::ParamsRegistry
  extend ::OpenSearch::API::DanglingIndices::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
OpenSearch::API::DanglingIndices::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "dangling_indices" namespace (includes the {DanglingIndices::Actions} methods)
class OpenSearch::API::DanglingIndices::DanglingIndicesClient
  include ::OpenSearch::API::DanglingIndices::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

module OpenSearch::API::Features
  # Proxy method for {FeaturesClient}, available in the receiving object
  def features; end
end

module OpenSearch::API::Features::Actions
  # Gets a list of features which can be included in snapshots using the feature_states field when creating a snapshot
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def get_features(arguments = T.unsafe(nil)); end

  # Resets the internal state of features, usually by deleting system indices
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def reset_features(arguments = T.unsafe(nil)); end
end

module OpenSearch::API::Features::Actions::ParamsRegistry
  extend ::OpenSearch::API::Features::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
OpenSearch::API::Features::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "features" namespace (includes the {Features::Actions} methods)
class OpenSearch::API::Features::FeaturesClient
  include ::OpenSearch::API::Features::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

OpenSearch::API::HTTP_DELETE = T.let(T.unsafe(nil), String)
OpenSearch::API::HTTP_GET = T.let(T.unsafe(nil), String)
OpenSearch::API::HTTP_HEAD = T.let(T.unsafe(nil), String)
OpenSearch::API::HTTP_POST = T.let(T.unsafe(nil), String)
OpenSearch::API::HTTP_PUT = T.let(T.unsafe(nil), String)

module OpenSearch::API::Indices
  # Proxy method for {IndicesClient}, available in the receiving object
  def indices; end
end

module OpenSearch::API::Indices::Actions
  # Adds a block to an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def add_block(arguments = T.unsafe(nil)); end

  # Performs the analysis process on a text and return the tokens breakdown of the text.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def analyze(arguments = T.unsafe(nil)); end

  # Clears all or specific caches for one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def clear_cache(arguments = T.unsafe(nil)); end

  # Clones an index
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def clone(arguments = T.unsafe(nil)); end

  # Closes an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def close(arguments = T.unsafe(nil)); end

  # Creates an index with optional settings and mappings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def create(arguments = T.unsafe(nil)); end

  # Deletes an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def delete(arguments = T.unsafe(nil)); end

  # Deletes an alias.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def delete_alias(arguments = T.unsafe(nil)); end

  # Deletes an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def delete_index_template(arguments = T.unsafe(nil)); end

  # Deletes an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def delete_template(arguments = T.unsafe(nil)); end

  # Analyzes the disk usage of each field of an index or data stream
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def disk_usage(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def exists(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def exists?(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular alias exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def exists_alias(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular alias exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def exists_alias?(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index template exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def exists_index_template(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index template exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def exists_index_template?(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index template exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def exists_template(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index template exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def exists_template?(arguments = T.unsafe(nil)); end

  # Returns the field usage stats for each field of an index
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def field_usage_stats(arguments = T.unsafe(nil)); end

  # Performs the flush operation on one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def flush(arguments = T.unsafe(nil)); end

  # Performs the force merge operation on one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def forcemerge(arguments = T.unsafe(nil)); end

  # Returns information about one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def get(arguments = T.unsafe(nil)); end

  # Returns an alias.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def get_alias(arguments = T.unsafe(nil)); end

  # Returns mapping for one or more fields.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def get_field_mapping(arguments = T.unsafe(nil)); end

  # Returns an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def get_index_template(arguments = T.unsafe(nil)); end

  # Returns mappings for one or more indices.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def get_mapping(arguments = T.unsafe(nil)); end

  # Returns settings for one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def get_settings(arguments = T.unsafe(nil)); end

  # Returns an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def get_template(arguments = T.unsafe(nil)); end

  # DEPRECATED Returns a progress status of current upgrade.
  #
  # *Deprecation notice*:
  # The _upgrade API is no longer useful and will be removed. Instead, see _reindex API.
  # Deprecated since version 8.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def get_upgrade(arguments = T.unsafe(nil)); end

  # Opens an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def open(arguments = T.unsafe(nil)); end

  # Creates or updates an alias.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def put_alias(arguments = T.unsafe(nil)); end

  # Creates or updates an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def put_index_template(arguments = T.unsafe(nil)); end

  # Updates the index mappings.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def put_mapping(arguments = T.unsafe(nil)); end

  # Updates the index settings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def put_settings(arguments = T.unsafe(nil)); end

  # Creates or updates an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def put_template(arguments = T.unsafe(nil)); end

  # Returns information about ongoing index shard recoveries.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def recovery(arguments = T.unsafe(nil)); end

  # Performs the refresh operation in one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def refresh(arguments = T.unsafe(nil)); end

  # Returns information about any matching indices, aliases, and data streams
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def resolve_index(arguments = T.unsafe(nil)); end

  # Updates an alias to point to a new index when the existing index
  # is considered to be too large or too old.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def rollover(arguments = T.unsafe(nil)); end

  # Provides low-level information about segments in a Lucene index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def segments(arguments = T.unsafe(nil)); end

  # Provides store information for shard copies of indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def shard_stores(arguments = T.unsafe(nil)); end

  # Allow to shrink an existing index into a new index with fewer primary shards.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def shrink(arguments = T.unsafe(nil)); end

  # Simulate matching the given index name against the index templates in the system
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def simulate_index_template(arguments = T.unsafe(nil)); end

  # Simulate resolving the given template name or body
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def simulate_template(arguments = T.unsafe(nil)); end

  # Allows you to split an existing index into a new index with more primary shards.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def split(arguments = T.unsafe(nil)); end

  # Provides statistics on operations happening in an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def stats(arguments = T.unsafe(nil)); end

  # Updates index aliases.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def update_aliases(arguments = T.unsafe(nil)); end

  # DEPRECATED Upgrades to the current version of Lucene.
  #
  # *Deprecation notice*:
  # The _upgrade API is no longer useful and will be removed. Instead, see _reindex API.
  # Deprecated since version 8.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def upgrade(arguments = T.unsafe(nil)); end

  # Allows a user to validate a potentially expensive query without executing it.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def validate_query(arguments = T.unsafe(nil)); end
end

module OpenSearch::API::Indices::Actions::ParamsRegistry
  extend ::OpenSearch::API::Indices::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
OpenSearch::API::Indices::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "indices" namespace (includes the {Indices::Actions} methods)
class OpenSearch::API::Indices::IndicesClient
  include ::OpenSearch::API::Indices::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

module OpenSearch::API::Ingest
  # Proxy method for {IngestClient}, available in the receiving object
  def ingest; end
end

module OpenSearch::API::Ingest::Actions
  # Deletes a pipeline.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def delete_pipeline(arguments = T.unsafe(nil)); end

  # Returns statistical information about geoip databases
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def geo_ip_stats(arguments = T.unsafe(nil)); end

  # Returns a pipeline.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def get_pipeline(arguments = T.unsafe(nil)); end

  # Returns a list of the built-in patterns.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def processor_grok(arguments = T.unsafe(nil)); end

  # Creates or updates a pipeline.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def put_pipeline(arguments = T.unsafe(nil)); end

  # Allows to simulate a pipeline with example documents.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def simulate(arguments = T.unsafe(nil)); end
end

module OpenSearch::API::Ingest::Actions::ParamsRegistry
  extend ::OpenSearch::API::Ingest::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
OpenSearch::API::Ingest::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "ingest" namespace (includes the {Ingest::Actions} methods)
class OpenSearch::API::Ingest::IngestClient
  include ::OpenSearch::API::Ingest::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

module OpenSearch::API::Nodes
  # Proxy method for {NodesClient}, available in the receiving object
  def nodes; end
end

module OpenSearch::API::Nodes::Actions
  # Returns information about hot threads on each node in the cluster.
  #
  # *Deprecation notice*:
  # The hot accepts /_cluster/nodes as prefix for backwards compatibility reasons
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def hot_threads(arguments = T.unsafe(nil)); end

  # Returns information about nodes in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def info(arguments = T.unsafe(nil)); end

  # Reloads secure settings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def reload_secure_settings(arguments = T.unsafe(nil)); end

  # Shutdown one or all nodes
  #
  # @example Shut down node named _Bloke_
  #
  #   client.nodes.shutdown node_id: 'Bloke'
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://opensearch.org/guide/reference/api/admin-cluster-nodes-shutdown/
  def shutdown(arguments = T.unsafe(nil)); end

  # Returns statistical information about nodes in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def stats(arguments = T.unsafe(nil)); end

  # Returns low-level information about REST actions usage on nodes.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def usage(arguments = T.unsafe(nil)); end
end

module OpenSearch::API::Nodes::Actions::ParamsRegistry
  extend ::OpenSearch::API::Nodes::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
OpenSearch::API::Nodes::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "nodes" namespace (includes the {Nodes::Actions} methods)
class OpenSearch::API::Nodes::NodesClient
  include ::OpenSearch::API::Nodes::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

module OpenSearch::API::Remote
  # Proxy method for {RemoteClient}, available in the receiving object
  def remote; end
end

module OpenSearch::API::Remote::Actions
  # Returns all of the configured remote cluster information
  def info(arguments = T.unsafe(nil)); end
end

# Client for the "remote" namespace (includes the {Remote::Actions} methods)
class OpenSearch::API::Remote::RemoteClient
  include ::OpenSearch::API::Remote::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

module OpenSearch::API::Security
  # Proxy method for {SecurityClient}, available in the receiving object
  def security; end
end

module OpenSearch::API::Security::Actions; end

# Client for the "security" namespace (includes the {Security::Actions} methods)
class OpenSearch::API::Security::SecurityClient
  include ::OpenSearch::API::Security::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

module OpenSearch::API::Shutdown
  # Proxy method for {ShutdownClient}, available in the receiving object
  def shutdown; end
end

module OpenSearch::API::Shutdown::Actions
  # Removes a node from the shutdown list
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def delete_node(arguments = T.unsafe(nil)); end

  # Retrieve status of a node or nodes that are currently marked as shutting down
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def get_node(arguments = T.unsafe(nil)); end

  # Adds a node to be shut down
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def put_node(arguments = T.unsafe(nil)); end
end

module OpenSearch::API::Shutdown::Actions::ParamsRegistry
  extend ::OpenSearch::API::Shutdown::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
OpenSearch::API::Shutdown::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "shutdown" namespace (includes the {Shutdown::Actions} methods)
class OpenSearch::API::Shutdown::ShutdownClient
  include ::OpenSearch::API::Shutdown::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

module OpenSearch::API::Snapshot
  # Proxy method for {SnapshotClient}, available in the receiving object
  def snapshot; end
end

module OpenSearch::API::Snapshot::Actions
  # Removes stale data from repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def cleanup_repository(arguments = T.unsafe(nil)); end

  # Clones indices from one snapshot into another snapshot in the same repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def clone(arguments = T.unsafe(nil)); end

  # Creates a snapshot in a repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def create(arguments = T.unsafe(nil)); end

  # Creates a repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def create_repository(arguments = T.unsafe(nil)); end

  # Deletes a snapshot.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def delete(arguments = T.unsafe(nil)); end

  # Deletes a repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def delete_repository(arguments = T.unsafe(nil)); end

  # Returns information about a snapshot.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def get(arguments = T.unsafe(nil)); end

  # Returns a list of features which can be snapshotted in this cluster.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def get_features(arguments = T.unsafe(nil)); end

  # Returns information about a repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def get_repository(arguments = T.unsafe(nil)); end

  # Analyzes a repository for correctness and performance
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def repository_analyze(arguments = T.unsafe(nil)); end

  # Restores a snapshot.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def restore(arguments = T.unsafe(nil)); end

  # Returns information about the status of a snapshot.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def status(arguments = T.unsafe(nil)); end

  # Verifies a repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  def verify_repository(arguments = T.unsafe(nil)); end
end

module OpenSearch::API::Snapshot::Actions::ParamsRegistry
  extend ::OpenSearch::API::Snapshot::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
OpenSearch::API::Snapshot::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "snapshot" namespace (includes the {Snapshot::Actions} methods)
class OpenSearch::API::Snapshot::SnapshotClient
  include ::OpenSearch::API::Snapshot::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

module OpenSearch::API::Tasks
  # Proxy method for {TasksClient}, available in the receiving object
  def tasks; end
end

module OpenSearch::API::Tasks::Actions
  # Cancels a task, if it can be cancelled through an API.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def cancel(arguments = T.unsafe(nil)); end

  # Returns information about a task.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def get(arguments = T.unsafe(nil)); end

  # Returns a list of tasks.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  def list(arguments = T.unsafe(nil)); end
end

module OpenSearch::API::Tasks::Actions::ParamsRegistry
  extend ::OpenSearch::API::Tasks::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
OpenSearch::API::Tasks::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "tasks" namespace (includes the {Tasks::Actions} methods)
class OpenSearch::API::Tasks::TasksClient
  include ::OpenSearch::API::Tasks::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

OpenSearch::API::UNDERSCORE_ALL = T.let(T.unsafe(nil), String)
OpenSearch::API::UNDERSCORE_SEARCH = T.let(T.unsafe(nil), String)

# Generic utility methods
module OpenSearch::API::Utils
  extend ::OpenSearch::API::Utils

  # Convert an array of payloads into OpenSearch `header\ndata` format
  #
  # Supports various different formats of the payload: Array of Strings, Header/Data pairs,
  # or the conveniency "combined" format where data is passed along with the header
  # in a single item.
  #
  #     OpenSearch::API::Utils.__bulkify [
  #       { :index =>  { :_index => 'myindexA', :_type => 'mytype', :_id => '1', :data => { :title => 'Test' } } },
  #       { :update => { :_index => 'myindexB', :_type => 'mytype', :_id => '2', :data => { :doc => { :title => 'Update' } } } }
  #     ]
  #
  #     # => {"index":{"_index":"myindexA","_type":"mytype","_id":"1"}}
  #     # => {"title":"Test"}
  #     # => {"update":{"_index":"myindexB","_type":"mytype","_id":"2"}}
  #     # => {"doc":{"title":"Update"}}
  def __bulkify(payload); end

  # URL-escape a string
  #
  # @api private
  # @example
  #   __escape('foo/bar') # => 'foo%2Fbar'
  #   __escape('bar^bam') # => 'bar%5Ebam'
  def __escape(string); end

  def __extract_params(arguments, params = T.unsafe(nil), options = T.unsafe(nil)); end

  # Extracts the valid parts of the URL from the arguments
  #
  # @api private
  # @example Extract parts
  #   __extract_parts { :foo => true }, [:foo, :bar]
  #   # => [:foo]
  # @note Mutates the `arguments` argument, to prevent failures in `__validate_and_extract_params`.
  # @param arguments [Hash] Hash of arguments to verify and extract, **with symbolized keys**
  # @param valid_parts [Array<Symbol>] An array of symbol with valid keys
  # @return [Array<String>] Valid parts of the URL as an array of strings
  def __extract_parts(arguments, valid_parts = T.unsafe(nil)); end

  # Create a "list" of values from arguments, ignoring nil values and encoding special characters.
  #
  # @api private
  # @example Create a list from array
  #   __listify(['A','B']) # => 'A,B'
  # @example Create a list from arguments
  #   __listify('A','B') # => 'A,B'
  # @example Escape values
  #   __listify('foo','bar^bam') # => 'foo,bar%5Ebam'
  # @example Do not escape the values
  #   __listify('foo','bar^bam', escape: false) # => 'foo,bar^bam'
  def __listify(*list); end

  # Create a path (URL part) from arguments, ignoring nil values and empty strings.
  #
  # # @example Encode special characters
  #     __pathify(['foo', 'bar^bam']) # => 'foo/bar%5Ebam'
  #
  # @api private
  # @example Create a path from array
  #   __pathify(['foo', '', nil, 'bar']) # => 'foo/bar'
  # @example Create a path from arguments
  #   __pathify('foo', '', nil, 'bar') # => 'foo/bar'
  def __pathify(*segments); end

  def __report_unsupported_method(name); end
  def __report_unsupported_parameters(arguments, params = T.unsafe(nil)); end

  # Calls the given block, rescuing from `StandardError`.
  #
  # Primary use case is the `:ignore` parameter for API calls.
  #
  # Returns `false` if exception contains NotFound in its class name or message,
  # else re-raises the exception.
  #
  # @api private
  # @yield [block] A block of code to be executed with exception handling.
  def __rescue_from_not_found(&block); end

  # Validates the argument Hash against common and valid API parameters
  #
  # @api private
  # @example Extract parameters
  #   __validate_and_extract_params( { :foo => 'qux' }, [:foo, :bar] )
  #   # => { :foo => 'qux' }
  # @example Raise an exception for invalid parameters
  #   __validate_and_extract_params( { :foo => 'qux', :bam => 'mux' }, [:foo, :bar] )
  #   # ArgumentError: "URL parameter 'bam' is not supported"
  # @example Skip validating parameters
  #   __validate_and_extract_params( { :foo => 'q', :bam => 'm' }, [:foo, :bar], { skip_parameter_validation: true } )
  #   # => { :foo => "q", :bam => "m" }
  # @example Skip validating parameters when the module setting is set
  #   OpenSearch::API.settings[:skip_parameter_validation] = true
  #   __validate_and_extract_params( { :foo => 'q', :bam => 'm' }, [:foo, :bar] )
  #   # => { :foo => "q", :bam => "m" }
  # @param arguments [Hash] Hash of arguments to verify and extract, **with symbolized keys**
  # @param valid_params [Array<Symbol>] An array of symbols with valid keys
  # @raise [ArgumentError] If the arguments Hash contains invalid keys
  # @return [Hash] Return whitelisted Hash
  def __validate_and_extract_params(arguments, params = T.unsafe(nil), options = T.unsafe(nil)); end

  def __validate_params(arguments, valid_params = T.unsafe(nil)); end
end

OpenSearch::API::VERSION = T.let(T.unsafe(nil), String)
OpenSearch::NOT_SUPPORTED_WARNING = T.let(T.unsafe(nil), String)
OpenSearch::SECURITY_PRIVILEGES_VALIDATION_WARNING = T.let(T.unsafe(nil), String)
OpenSearch::VERSION = T.let(T.unsafe(nil), String)
