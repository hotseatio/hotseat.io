# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `simplecov-lcov` gem.
# Please instead update this file by running `bin/tapioca gem simplecov-lcov`.

# source://simplecov-lcov//lib/simplecov-lcov.rb#7
module SimpleCov
  class << self
    # source://simplecov/0.21.2/lib/simplecov.rb#174
    def at_exit_behavior; end

    # source://simplecov/0.21.2/lib/simplecov.rb#170
    def clear_result; end

    # source://simplecov/0.21.2/lib/simplecov.rb#86
    def collate(result_filenames, profile = T.unsafe(nil), ignore_timeout: T.unsafe(nil), &block); end

    # source://simplecov/0.21.2/lib/simplecov.rb#223
    def exit_and_report_previous_error(exit_status); end

    # source://simplecov/0.21.2/lib/simplecov.rb#200
    def exit_status_from_exception; end

    # source://simplecov/0.21.2/lib/simplecov.rb#28
    def external_at_exit; end

    # source://simplecov/0.21.2/lib/simplecov.rb#28
    def external_at_exit=(_arg0); end

    # source://simplecov/0.21.2/lib/simplecov.rb#28
    def external_at_exit?; end

    # source://simplecov/0.21.2/lib/simplecov.rb#131
    def filtered(files); end

    # source://simplecov/0.21.2/lib/simplecov.rb#268
    def final_result_process?; end

    # source://simplecov/0.21.2/lib/simplecov.rb#142
    def grouped(files); end

    # source://simplecov/0.21.2/lib/simplecov.rb#162
    def load_adapter(name); end

    # source://simplecov/0.21.2/lib/simplecov.rb#158
    def load_profile(name); end

    # source://simplecov/0.21.2/lib/simplecov.rb#24
    def pid; end

    # source://simplecov/0.21.2/lib/simplecov.rb#24
    def pid=(_arg0); end

    # source://simplecov/0.21.2/lib/simplecov.rb#213
    def previous_error?(error_exit_status); end

    # source://simplecov/0.21.2/lib/simplecov.rb#248
    def process_result(result); end

    # source://simplecov/0.21.2/lib/simplecov.rb#233
    def process_results_and_report_error; end

    # source://simplecov/0.21.2/lib/simplecov.rb#229
    def ready_to_process_results?; end

    # source://simplecov/0.21.2/lib/simplecov.rb#101
    def result; end

    # source://simplecov/0.21.2/lib/simplecov.rb#124
    def result?; end

    # source://simplecov/0.21.2/lib/simplecov.rb#256
    def result_exit_status(result); end

    # source://simplecov/0.21.2/lib/simplecov.rb#296
    def round_coverage(coverage); end

    # source://simplecov/0.21.2/lib/simplecov.rb#186
    def run_exit_tasks!; end

    # source://simplecov/0.21.2/lib/simplecov.rb#24
    def running; end

    # source://simplecov/0.21.2/lib/simplecov.rb#24
    def running=(_arg0); end

    # source://simplecov/0.21.2/lib/simplecov.rb#48
    def start(profile = T.unsafe(nil), &block); end

    # source://simplecov/0.21.2/lib/simplecov.rb#276
    def wait_for_other_processes; end

    # source://simplecov/0.21.2/lib/simplecov.rb#285
    def write_last_run(result); end

    private

    # source://simplecov/0.21.2/lib/simplecov.rb#397
    def adapt_coverage_result; end

    # source://simplecov/0.21.2/lib/simplecov.rb#369
    def add_not_loaded_files(result); end

    # source://simplecov/0.21.2/lib/simplecov.rb#302
    def initial_setup(profile, &block); end

    # source://simplecov/0.21.2/lib/simplecov.rb#361
    def lookup_corresponding_ruby_coverage_name(criterion); end

    # source://simplecov/0.21.2/lib/simplecov.rb#423
    def make_parallel_tests_available; end

    # source://simplecov/0.21.2/lib/simplecov.rb#432
    def probably_running_parallel_tests?; end

    # source://simplecov/0.21.2/lib/simplecov.rb#386
    def process_coverage_result; end

    # source://simplecov/0.21.2/lib/simplecov.rb#408
    def remove_useless_results; end

    # source://simplecov/0.21.2/lib/simplecov.rb#418
    def result_with_not_loaded_files; end

    # source://simplecov/0.21.2/lib/simplecov.rb#314
    def start_coverage_measurement; end

    # source://simplecov/0.21.2/lib/simplecov.rb#349
    def start_coverage_with_criteria; end
  end
end

# source://simplecov-lcov//lib/simplecov-lcov.rb#8
module SimpleCov::Formatter
  class << self
    # source://simplecov/0.21.2/lib/simplecov/default_formatter.rb#7
    def from_env(env); end
  end
end

# Custom Formatter to generate lcov style coverage for simplecov
#
# source://simplecov-lcov//lib/simplecov-lcov.rb#10
class SimpleCov::Formatter::LcovFormatter
  # generate lcov style coverage.
  # ==== Args
  # _result_ :: [SimpleCov::Result] abcoverage result instance.
  #
  # source://simplecov-lcov//lib/simplecov-lcov.rb#14
  def format(result); end

  private

  # source://simplecov-lcov//lib/simplecov-lcov.rb#62
  def create_output_directory!; end

  # source://simplecov-lcov//lib/simplecov-lcov.rb#121
  def filtered_branches(file); end

  # source://simplecov-lcov//lib/simplecov-lcov.rb#117
  def filtered_lines(file); end

  # source://simplecov-lcov//lib/simplecov-lcov.rb#125
  def format_branch(branch, branch_idx); end

  # source://simplecov-lcov//lib/simplecov-lcov.rb#101
  def format_branches(file); end

  # source://simplecov-lcov//lib/simplecov-lcov.rb#84
  def format_file(file); end

  # source://simplecov-lcov//lib/simplecov-lcov.rb#130
  def format_line(line); end

  # source://simplecov-lcov//lib/simplecov-lcov.rb#111
  def format_lines(file); end

  # source://simplecov-lcov//lib/simplecov-lcov.rb#50
  def lcov_results_path; end

  # source://simplecov-lcov//lib/simplecov-lcov.rb#46
  def output_directory; end

  # source://simplecov-lcov//lib/simplecov-lcov.rb#79
  def output_filename(filename); end

  # @return [Boolean]
  #
  # source://simplecov-lcov//lib/simplecov-lcov.rb#54
  def report_with_single_file?; end

  # source://simplecov-lcov//lib/simplecov-lcov.rb#58
  def single_report_path; end

  # source://simplecov-lcov//lib/simplecov-lcov.rb#67
  def write_lcov!(file); end

  # source://simplecov-lcov//lib/simplecov-lcov.rb#73
  def write_lcov_to_single_file!(files); end

  class << self
    # @yield [@config]
    #
    # source://simplecov-lcov//lib/simplecov-lcov.rb#27
    def config; end

    # source://simplecov-lcov//lib/simplecov-lcov.rb#33
    def report_with_single_file=(value); end
  end
end

# source://simplecov/0.21.2/lib/simplecov/version.rb#4
SimpleCov::VERSION = T.let(T.unsafe(nil), String)

# source://simplecov-lcov//lib/simple_cov_lcov/configuration.rb#1
module SimpleCovLcov; end

# source://simplecov-lcov//lib/simple_cov_lcov/configuration.rb#2
class SimpleCovLcov::Configuration
  # source://simplecov-lcov//lib/simple_cov_lcov/configuration.rb#24
  def lcov_file_name; end

  # Sets the attribute lcov_file_name
  #
  # @param value the value to set the attribute lcov_file_name to.
  #
  # source://simplecov-lcov//lib/simple_cov_lcov/configuration.rb#5
  def lcov_file_name=(_arg0); end

  # source://simplecov-lcov//lib/simple_cov_lcov/configuration.rb#11
  def output_directory; end

  # Sets the attribute output_directory
  #
  # @param value the value to set the attribute output_directory to.
  #
  # source://simplecov-lcov//lib/simple_cov_lcov/configuration.rb#4
  def output_directory=(_arg0); end

  # Sets the attribute report_with_single_file
  #
  # @param value the value to set the attribute report_with_single_file to.
  #
  # source://simplecov-lcov//lib/simple_cov_lcov/configuration.rb#3
  def report_with_single_file=(_arg0); end

  # @return [Boolean]
  #
  # source://simplecov-lcov//lib/simple_cov_lcov/configuration.rb#7
  def report_with_single_file?; end

  # source://simplecov-lcov//lib/simple_cov_lcov/configuration.rb#20
  def single_report_path; end

  # source://simplecov-lcov//lib/simple_cov_lcov/configuration.rb#15
  def single_report_path=(new_path); end
end
