# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mini_portile2` gem.
# Please instead update this file by running `bin/tapioca gem mini_portile2`.

# source://mini_portile2//lib/mini_portile2/version.rb#1
class MiniPortile
  # @return [MiniPortile] a new instance of MiniPortile
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#99
  def initialize(name, version, **kwargs); end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#241
  def activate; end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#142
  def apply_patch(patch_file); end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#191
  def compile; end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#176
  def configure; end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#172
  def configure_options; end

  # Sets the attribute configure_options
  #
  # @param value the value to set the attribute configure_options to.
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#36
  def configure_options=(_arg0); end

  # @return [Boolean]
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#208
  def configured?; end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#226
  def cook; end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#128
  def download; end

  # @return [Boolean]
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#200
  def downloaded?; end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#135
  def extract; end

  # Returns the value of attribute files.
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#37
  def files; end

  # Sets the attribute files
  #
  # @param value the value to set the attribute files to.
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#37
  def files=(_arg0); end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#375
  def gcc_cmd; end

  # Returns the value of attribute host.
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#37
  def host; end

  # Sets the attribute host
  #
  # @param value the value to set the attribute host to.
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#37
  def host=(_arg0); end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#367
  def include_path; end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#195
  def install; end

  # @return [Boolean]
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#219
  def installed?; end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#371
  def lib_path; end

  # Returns the value of attribute logger.
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#37
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#37
  def logger=(_arg0); end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#379
  def make_cmd; end

  # pkg: the pkg-config file name (without the .pc extension)
  # dir: inject the directory path for the pkg-config file (probably only useful for tests)
  # static: the name of the static library archive (without the "lib" prefix or the file extension), or nil for dynamic linking
  #
  # we might be able to be terribly clever and infer the name of the static archive file, but
  # unfortunately projects have so much freedom in what they can report (for name, for libs, etc.)
  # that it feels unreliable to try to do so, so I'm preferring to just have the developer make it
  # explicit.
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#280
  def mkmf_config(pkg: T.unsafe(nil), dir: T.unsafe(nil), static: T.unsafe(nil)); end

  # Returns the value of attribute name.
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#35
  def name; end

  # Returns the value of attribute original_host.
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#35
  def original_host; end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#165
  def patch; end

  # Returns the value of attribute patch_files.
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#37
  def patch_files; end

  # Sets the attribute patch_files
  #
  # @param value the value to set the attribute patch_files to.
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#37
  def patch_files=(_arg0); end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#363
  def path; end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#121
  def prepare_build_directory; end

  # Returns the value of attribute source_directory.
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#35
  def source_directory; end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#117
  def source_directory=(path); end

  # Returns the value of attribute target.
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#37
  def target; end

  # Sets the attribute target
  #
  # @param value the value to set the attribute target to.
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#37
  def target=(_arg0); end

  # Returns the value of attribute version.
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#35
  def version; end

  private

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#401
  def archives_path; end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#421
  def computed_options; end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#409
  def configure_defaults; end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#417
  def configure_prefix; end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#542
  def detect_host; end

  # Slighly modified from RubyInstaller uri_ext, Rubinius configure
  # and adaptations of Wayne's RailsInstaller
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#639
  def download_file(url, full_path, count = T.unsafe(nil)); end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#712
  def download_file_file(uri, full_path); end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#717
  def download_file_ftp(uri, full_path); end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#658
  def download_file_http(url, full_path, count = T.unsafe(nil)); end

  # command could be an array of args, or one string containing a command passed to the shell. See
  # Process.spawn for more information.
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#569
  def execute(action, command, command_opts = T.unsafe(nil)); end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#559
  def extract_file(file, target); end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#428
  def files_hashs; end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#494
  def log_file(action); end

  # print out a message with the logger
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#626
  def message(text); end

  # this minimal version of pkg_config is based on ruby 29dc9378 (2023-01-09)
  #
  #  specifically with the fix from b90e56e6 to support multiple pkg-config options, and removing
  #  code paths that aren't helpful for mini-portile's use case of parsing pc files.
  #
  # @raise [RuntimeError]
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#766
  def minimal_pkg_config(pkg, *pcoptions); end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#385
  def native_path(path); end

  # @return [Boolean]
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#617
  def newer?(target, checkpoint); end

  # print out a message using the logger but return to a new line
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#632
  def output(text = T.unsafe(nil)); end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#397
  def port_path; end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#389
  def posix_path(path); end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#510
  def tar_compression_switch(filename); end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#502
  def tar_exe; end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#393
  def tmp_path; end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#448
  def verify_file(file); end

  # From: http://stackoverflow.com/a/5471032/7672
  # Thanks, Mislav!
  #
  # Cross-platform way of finding an executable in the $PATH.
  #
  #   which('ruby') #=> /usr/bin/ruby
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#531
  def which(cmd); end

  # @yield [temp_file]
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#750
  def with_tempfile(filename, full_path); end

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#405
  def work_path; end

  class << self
    # @return [Boolean]
    #
    # source://mini_portile2//lib/mini_portile2/mini_portile.rb#53
    def darwin?; end

    # @return [Boolean]
    #
    # source://mini_portile2//lib/mini_portile2/mini_portile.rb#57
    def freebsd?; end

    # @return [Boolean]
    #
    # source://mini_portile2//lib/mini_portile2/mini_portile.rb#65
    def linux?; end

    # GNU MinGW compiled Ruby?
    #
    # @return [Boolean]
    #
    # source://mini_portile2//lib/mini_portile2/mini_portile.rb#44
    def mingw?; end

    # MS Visual-C compiled Ruby?
    #
    # @return [Boolean]
    #
    # source://mini_portile2//lib/mini_portile2/mini_portile.rb#49
    def mswin?; end

    # source://mini_portile2//lib/mini_portile2/mini_portile.rb#81
    def native_path(path); end

    # @return [Boolean]
    #
    # source://mini_portile2//lib/mini_portile2/mini_portile.rb#61
    def openbsd?; end

    # source://mini_portile2//lib/mini_portile2/mini_portile.rb#90
    def posix_path(path); end

    # @return [Boolean]
    #
    # source://mini_portile2//lib/mini_portile2/mini_portile.rb#69
    def solaris?; end

    # source://mini_portile2//lib/mini_portile2/mini_portile.rb#77
    def target_cpu; end

    # source://mini_portile2//lib/mini_portile2/mini_portile.rb#73
    def target_os; end

    # @return [Boolean]
    #
    # source://mini_portile2//lib/mini_portile2/mini_portile.rb#39
    def windows?; end
  end
end

# source://mini_portile2//lib/mini_portile2/mini_portile.rb#33
MiniPortile::DEFAULT_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://mini_portile2//lib/mini_portile2/mini_portile.rb#446
MiniPortile::KEYRING_NAME = T.let(T.unsafe(nil), String)

# source://mini_portile2//lib/mini_portile2/mini_portile.rb#501
MiniPortile::TAR_EXECUTABLES = T.let(T.unsafe(nil), Array)

# source://mini_portile2//lib/mini_portile2/version.rb#2
MiniPortile::VERSION = T.let(T.unsafe(nil), String)

# source://mini_portile2//lib/mini_portile2/mini_portile_cmake.rb#4
class MiniPortileCMake < ::MiniPortile
  # @return [MiniPortileCMake] a new instance of MiniPortileCMake
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile_cmake.rb#11
  def initialize(name, version, **kwargs); end

  # source://mini_portile2//lib/mini_portile2/mini_portile_cmake.rb#53
  def cmake_build_type; end

  # source://mini_portile2//lib/mini_portile2/mini_portile_cmake.rb#49
  def cmake_cmd; end

  # source://mini_portile2//lib/mini_portile2/mini_portile_cmake.rb#24
  def configure; end

  # source://mini_portile2//lib/mini_portile2/mini_portile_cmake.rb#17
  def configure_defaults; end

  # source://mini_portile2//lib/mini_portile2/mini_portile_cmake.rb#7
  def configure_prefix; end

  # @return [Boolean]
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile_cmake.rb#33
  def configured?; end

  # source://mini_portile2//lib/mini_portile2/mini_portile_cmake.rb#44
  def make_cmd; end

  # Returns the value of attribute system_name.
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile_cmake.rb#5
  def system_name; end

  # Sets the attribute system_name
  #
  # @param value the value to set the attribute system_name to.
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile_cmake.rb#5
  def system_name=(_arg0); end

  private

  # source://mini_portile2//lib/mini_portile2/mini_portile_cmake.rb#69
  def cmake_compile_flags; end

  # Full list: https://gitlab.kitware.com/cmake/cmake/-/blob/v3.26.4/Modules/CMakeDetermineSystem.cmake?ref_type=tags#L12-31
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile_cmake.rb#111
  def cmake_system_name; end

  # source://mini_portile2//lib/mini_portile2/mini_portile_cmake.rb#139
  def cpu_type; end

  # configure automatically searches for the right compiler based on the
  # `--host` parameter.  However, CMake doesn't have an equivalent feature.
  # Search for the right compiler for the target architecture using
  # some basic heruistics.
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile_cmake.rb#90
  def find_c_and_cxx_compilers(host); end

  # source://mini_portile2//lib/mini_portile2/mini_portile_cmake.rb#82
  def find_compiler(compilers); end

  # @return [Boolean]
  #
  # source://mini_portile2//lib/mini_portile2/mini_portile_cmake.rb#131
  def generator_available?(generator_type); end

  # source://mini_portile2//lib/mini_portile2/mini_portile_cmake.rb#59
  def generator_defaults; end
end

# Monkey patch for Net::HTTP by ruby open-uri fix:
# https://github.com/ruby/ruby/commit/58835a9
#
# source://mini_portile2//lib/mini_portile2/mini_portile.rb#14
class Net::HTTP < ::Net::Protocol
  private

  # source://mini_portile2//lib/mini_portile2/mini_portile.rb#17
  def edit_path(path); end
end
