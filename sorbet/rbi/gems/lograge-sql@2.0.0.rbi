# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `lograge-sql` gem.
# Please instead update this file by running `bin/tapioca gem lograge-sql`.

# Main Lograge module
module Lograge
  def application; end
  def application=(val); end
  def before_format=(val); end
  def custom_options=(val); end
  def formatter; end
  def formatter=(val); end
  def ignore_tests=(val); end
  def log_level; end
  def log_level=(val); end
  def logger; end
  def logger=(val); end

  private

  def attach_to_action_cable; end
  def attach_to_action_controller; end
  def before_format(data, payload); end
  def controller_field(params); end
  def custom_options(event); end
  def disable_rack_cache_verbose_output; end
  def extend_base_class(klass); end
  def ignore(test); end
  def ignore?(event); end

  # Set conditions for events that should be ignored
  #
  # Currently supported formats are:
  #  - A single string representing a controller action, e.g. 'UsersController#sign_in'
  #  - An array of strings representing controller actions
  #  - An object that responds to call with an event argument and returns
  #    true iff the event should be ignored.
  #
  # The action ignores are given to 'ignore_actions'. The callable ignores
  # are given to 'ignore'.  Both methods can be called multiple times, which
  # just adds more ignore conditions to a list that is checked before logging.
  def ignore_actions(actions); end

  def ignore_nothing; end
  def ignore_tests; end
  def keep_original_rails_log; end
  def lograge_config; end
  def rack_cache_hashlike?(app); end
  def remove_existing_log_subscriptions; end
  def set_formatter; end
  def set_ignores; end
  def set_lograge_log_options; end
  def setup(app); end
  def setup_custom_payload; end

  # TODO: Remove with version 1.0
  def support_deprecated_config; end

  def unsubscribe(component, subscriber); end

  class << self
    def application; end
    def application=(val); end
    def attach_to_action_cable; end
    def attach_to_action_controller; end
    def before_format(data, payload); end
    def before_format=(val); end
    def controller_field(params); end
    def custom_options(event); end
    def custom_options=(val); end
    def disable_rack_cache_verbose_output; end
    def extend_base_class(klass); end
    def formatter; end
    def formatter=(val); end
    def ignore(test); end

    # @return [Boolean]
    def ignore?(event); end

    # Set conditions for events that should be ignored
    #
    # Currently supported formats are:
    #  - A single string representing a controller action, e.g. 'UsersController#sign_in'
    #  - An array of strings representing controller actions
    #  - An object that responds to call with an event argument and returns
    #    true iff the event should be ignored.
    #
    # The action ignores are given to 'ignore_actions'. The callable ignores
    # are given to 'ignore'.  Both methods can be called multiple times, which
    # just adds more ignore conditions to a list that is checked before logging.
    def ignore_actions(actions); end

    def ignore_nothing; end
    def ignore_tests; end
    def ignore_tests=(val); end
    def keep_original_rails_log; end
    def log_level; end
    def log_level=(val); end
    def logger; end
    def logger=(val); end
    def lograge_config; end
    def remove_existing_log_subscriptions; end
    def set_formatter; end
    def set_ignores; end
    def set_lograge_log_options; end
    def setup(app); end
    def setup_custom_payload; end

    # TODO: Remove with version 1.0
    def support_deprecated_config; end

    def unsubscribe(component, subscriber); end

    private

    # @return [Boolean]
    def rack_cache_hashlike?(app); end
  end
end

# Main gem module
module Lograge::Sql
  class << self
    # Extract information from SQL event
    def extract_event; end

    # Extract information from SQL event
    def extract_event=(_arg0); end

    # Format SQL log
    def formatter; end

    # Format SQL log
    def formatter=(_arg0); end

    # Initialise configuration with fallback to default values
    def setup(config); end

    # Gets the store, preferring RequestStore if the gem is found.
    #
    # @return [Hash, Thread] the RequestStore or the current Thread.
    def store; end

    private

    # By default, only extract values required for the default_formatter and
    # already convert to a string
    def default_extract_event; end

    # By default, the output is a concatenated string of all extracted events
    def default_formatter; end
  end
end

# Railtie to automatically setup in Rails
class Lograge::Sql::Railtie < ::Rails::Railtie; end

# Gem version
Lograge::Sql::VERSION = T.let(T.unsafe(nil), String)

Lograge::VERSION = T.let(T.unsafe(nil), String)
