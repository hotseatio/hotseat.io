# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mini_portile2` gem.
# Please instead update this file by running `bin/tapioca gem mini_portile2`.

class MiniPortile
  # @return [MiniPortile] a new instance of MiniPortile
  def initialize(name, version, **kwargs); end

  def activate; end
  def apply_patch(patch_file); end
  def compile; end
  def configure; end
  def configure_options; end

  # Sets the attribute configure_options
  #
  # @param value the value to set the attribute configure_options to.
  def configure_options=(_arg0); end

  # @return [Boolean]
  def configured?; end

  def cook; end
  def download; end

  # @return [Boolean]
  def downloaded?; end

  def extract; end

  # Returns the value of attribute files.
  def files; end

  # Sets the attribute files
  #
  # @param value the value to set the attribute files to.
  def files=(_arg0); end

  def gcc_cmd; end

  # Returns the value of attribute host.
  def host; end

  # Sets the attribute host
  #
  # @param value the value to set the attribute host to.
  def host=(_arg0); end

  def install; end

  # @return [Boolean]
  def installed?; end

  # Returns the value of attribute logger.
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  def logger=(_arg0); end

  def make_cmd; end

  # Returns the value of attribute name.
  def name; end

  # Returns the value of attribute original_host.
  def original_host; end

  def patch; end

  # Returns the value of attribute patch_files.
  def patch_files; end

  # Sets the attribute patch_files
  #
  # @param value the value to set the attribute patch_files to.
  def patch_files=(_arg0); end

  def path; end
  def prepare_build_directory; end

  # Returns the value of attribute source_directory.
  def source_directory; end

  # Sets the attribute source_directory
  #
  # @param value the value to set the attribute source_directory to.
  def source_directory=(path); end

  # Returns the value of attribute target.
  def target; end

  # Sets the attribute target
  #
  # @param value the value to set the attribute target to.
  def target=(_arg0); end

  # Returns the value of attribute version.
  def version; end

  private

  def archives_path; end
  def computed_options; end
  def configure_defaults; end
  def configure_prefix; end
  def detect_host; end

  # Slighly modified from RubyInstaller uri_ext, Rubinius configure
  # and adaptations of Wayne's RailsInstaller
  def download_file(url, full_path, count = T.unsafe(nil)); end

  def download_file_file(uri, full_path); end
  def download_file_ftp(uri, full_path); end
  def download_file_http(url, full_path, count = T.unsafe(nil)); end

  # command could be an array of args, or one string containing a command passed to the shell. See
  # Process.spawn for more information.
  def execute(action, command, command_opts = T.unsafe(nil)); end

  def extract_file(file, target); end
  def files_hashs; end
  def log_file(action); end

  # print out a message with the logger
  def message(text); end

  # @return [Boolean]
  def newer?(target, checkpoint); end

  # print out a message using the logger but return to a new line
  def output(text = T.unsafe(nil)); end

  def port_path; end
  def tar_compression_switch(filename); end
  def tar_exe; end
  def tmp_path; end
  def verify_file(file); end

  # From: http://stackoverflow.com/a/5471032/7672
  # Thanks, Mislav!
  #
  # Cross-platform way of finding an executable in the $PATH.
  #
  #   which('ruby') #=> /usr/bin/ruby
  def which(cmd); end

  # @yield [temp_file]
  def with_tempfile(filename, full_path); end

  def work_path; end

  class << self
    # GNU MinGW compiled Ruby?
    #
    # @return [Boolean]
    def mingw?; end

    # MS Visual-C compiled Ruby?
    #
    # @return [Boolean]
    def mswin?; end

    # @return [Boolean]
    def windows?; end
  end
end

MiniPortile::DEFAULT_TIMEOUT = T.let(T.unsafe(nil), Integer)
MiniPortile::KEYRING_NAME = T.let(T.unsafe(nil), String)
MiniPortile::TAR_EXECUTABLES = T.let(T.unsafe(nil), Array)
MiniPortile::VERSION = T.let(T.unsafe(nil), String)

class MiniPortileCMake < ::MiniPortile
  # @return [MiniPortileCMake] a new instance of MiniPortileCMake
  def initialize(name, version, **kwargs); end

  def cmake_cmd; end
  def configure; end
  def configure_defaults; end
  def configure_prefix; end

  # @return [Boolean]
  def configured?; end

  def make_cmd; end
end

# Monkey patch for Net::HTTP by ruby open-uri fix:
# https://github.com/ruby/ruby/commit/58835a9
class Net::HTTP < ::Net::Protocol
  private

  def edit_path(path); end
end

Net::HTTP::ENVIRONMENT_VARIABLE_IS_MULTIUSER_SAFE = T.let(T.unsafe(nil), TrueClass)
Net::HTTP::ProxyMod = Net::HTTP::ProxyDelta
Net::HTTP::VERSION = T.let(T.unsafe(nil), String)
