# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `noticed` gem.
# Please instead update this file by running `bin/tapioca gem noticed`.

# class CommentNotifier
#  deliver_by :fcm, credentials: Rails.root.join("config/certs/fcm.json"), format: :format_notification
#
#  deliver_by :fcm, credentials: :fcm_credentials
#   def fcm_credentials
#     { project_id: "api-12345" }
#   end
# end
#
# source://noticed//lib/noticed/engine.rb#1
module Noticed
  # source://noticed//lib/noticed.rb#28
  def parent_class; end

  # source://noticed//lib/noticed.rb#28
  def parent_class=(val); end

  class << self
    # source://noticed//lib/noticed.rb#28
    def parent_class; end

    # source://noticed//lib/noticed.rb#28
    def parent_class=(val); end
  end
end

# source://noticed//lib/noticed/base.rb#2
class Noticed::Base
  include ::Noticed::Translation
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor
  include ::ActiveSupport::Callbacks
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  # @return [Base] a new instance of Base
  #
  # source://noticed//lib/noticed/base.rb#50
  def initialize(params = T.unsafe(nil)); end

  # source://activesupport/7.0.6/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.6/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.6/lib/active_support/callbacks.rb#940
  def _deliver_callbacks; end

  # source://activesupport/7.0.6/lib/active_support/callbacks.rb#928
  def _run_deliver_callbacks(&block); end

  # source://noticed//lib/noticed/base.rb#78
  def clear_recipient; end

  # source://actionpack/7.0.6/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options; end

  # source://actionpack/7.0.6/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options=(_arg0); end

  # source://actionpack/7.0.6/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options?; end

  # source://noticed//lib/noticed/base.rb#54
  def deliver(recipients); end

  # source://noticed//lib/noticed/base.rb#64
  def deliver_later(recipients); end

  # source://noticed//lib/noticed/base.rb#9
  def delivery_methods; end

  # source://noticed//lib/noticed/base.rb#9
  def delivery_methods?; end

  # source://noticed//lib/noticed/base.rb#10
  def param_names; end

  # source://noticed//lib/noticed/base.rb#10
  def param_names?; end

  # source://noticed//lib/noticed/base.rb#74
  def params; end

  # source://noticed//lib/noticed/base.rb#15
  def read?(*_arg0, **_arg1, &_arg2); end

  # Gives notifications access to the record and recipient during delivery
  #
  # source://noticed//lib/noticed/base.rb#13
  def recipient; end

  # Gives notifications access to the record and recipient during delivery
  #
  # source://noticed//lib/noticed/base.rb#13
  def recipient=(_arg0); end

  # Gives notifications access to the record and recipient during delivery
  #
  # source://noticed//lib/noticed/base.rb#13
  def record; end

  # Gives notifications access to the record and recipient during delivery
  #
  # source://noticed//lib/noticed/base.rb#13
  def record=(_arg0); end

  # source://noticed//lib/noticed/base.rb#15
  def unread?(*_arg0, **_arg1, &_arg2); end

  private

  # source://noticed//lib/noticed/base.rb#131
  def delivery_method_for(name, options); end

  # Runs all delivery methods for a notification
  #
  # source://noticed//lib/noticed/base.rb#85
  def run_delivery(recipient, enqueue: T.unsafe(nil)); end

  # Actually runs an individual delivery
  #
  # source://noticed//lib/noticed/base.rb#102
  def run_delivery_method(delivery_method, recipient:, enqueue:, record:); end

  # source://noticed//lib/noticed/base.rb#139
  def validate!; end

  # source://noticed//lib/noticed/base.rb#153
  def validate_options_of_delivery_methods!; end

  # Validates that all params are present
  #
  # source://noticed//lib/noticed/base.rb#145
  def validate_params_present!; end

  class << self
    # source://activesupport/7.0.6/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.6/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.6/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.6/lib/active_support/callbacks.rb#932
    def _deliver_callbacks; end

    # source://activesupport/7.0.6/lib/active_support/callbacks.rb#936
    def _deliver_callbacks=(value); end

    # source://actionpack/7.0.6/lib/action_dispatch/routing/route_set.rb#564
    def _routes; end

    # source://activemodel/7.0.6/lib/active_model/callbacks.rb#144
    def after_deliver(*args, **options, &block); end

    # source://activemodel/7.0.6/lib/active_model/callbacks.rb#137
    def around_deliver(*args, **options, &block); end

    # source://activemodel/7.0.6/lib/active_model/callbacks.rb#130
    def before_deliver(*args, **options, &block); end

    # source://actionpack/7.0.6/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options; end

    # source://actionpack/7.0.6/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options=(value); end

    # source://actionpack/7.0.6/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options?; end

    # Shortcut for delivering without params
    #
    # source://noticed//lib/noticed/base.rb#35
    def deliver(recipients); end

    # source://noticed//lib/noticed/base.rb#18
    def deliver_by(name, options = T.unsafe(nil)); end

    # Shortcut for delivering later without params
    #
    # source://noticed//lib/noticed/base.rb#40
    def deliver_later(recipients); end

    # source://noticed//lib/noticed/base.rb#9
    def delivery_methods; end

    # source://noticed//lib/noticed/base.rb#9
    def delivery_methods=(value); end

    # source://noticed//lib/noticed/base.rb#9
    def delivery_methods?; end

    # Copy delivery methods from parent
    #
    # source://noticed//lib/noticed/base.rb#24
    def inherited(base); end

    # source://noticed//lib/noticed/base.rb#44
    def param(*names); end

    # source://noticed//lib/noticed/base.rb#10
    def param_names; end

    # source://noticed//lib/noticed/base.rb#10
    def param_names=(value); end

    # source://noticed//lib/noticed/base.rb#10
    def param_names?; end

    # source://noticed//lib/noticed/base.rb#44
    def params(*names); end

    # source://noticed//lib/noticed/base.rb#30
    def with(params); end
  end
end

# source://noticed//lib/noticed/coder.rb#2
class Noticed::Coder
  class << self
    # source://noticed//lib/noticed/coder.rb#10
    def dump(data); end

    # source://noticed//lib/noticed/coder.rb#3
    def load(data); end
  end
end

# source://noticed//lib/noticed.rb#14
module Noticed::DeliveryMethods; end

# source://noticed//lib/noticed/engine.rb#2
class Noticed::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.0.6/lib/active_support/callbacks.rb#68
    def __callbacks; end
  end
end

# source://noticed//lib/noticed/has_notifications.rb#2
module Noticed::HasNotifications
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Noticed::HasNotifications::ClassMethods

  # source://noticed//lib/noticed/has_notifications.rb#41
  def current_adapter; end
end

# source://noticed//lib/noticed/has_notifications.rb#0
module Noticed::HasNotifications::ClassMethods
  # source://noticed//lib/noticed/has_notifications.rb#17
  def has_noticed_notifications(param_name: T.unsafe(nil), **options); end
end

# source://noticed//lib/noticed/model.rb#2
module Noticed::Model
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Noticed::Model::ClassMethods

  # If a GlobalID record in params is no longer found, the params will default with a noticed_error key
  #
  # @return [Boolean]
  #
  # source://noticed//lib/noticed/model.rb#81
  def deserialize_error?; end

  # source://noticed//lib/noticed/model.rb#64
  def mark_as_read!; end

  # source://noticed//lib/noticed/model.rb#68
  def mark_as_unread!; end

  # @return [Boolean]
  #
  # source://noticed//lib/noticed/model.rb#76
  def read?; end

  # Rehydrate the database notification into the Notification object for rendering
  #
  # source://noticed//lib/noticed/model.rb#55
  def to_notification; end

  # @return [Boolean]
  #
  # source://noticed//lib/noticed/model.rb#72
  def unread?; end
end

# source://noticed//lib/noticed/model.rb#0
module Noticed::Model::ClassMethods
  # source://noticed//lib/noticed/model.rb#30
  def mark_as_read!; end

  # source://noticed//lib/noticed/model.rb#34
  def mark_as_unread!; end

  # source://noticed//lib/noticed/model.rb#38
  def noticed_coder; end
end

# source://noticed//lib/noticed/model.rb#3
Noticed::Model::DATABASE_ERROR_CLASS_NAMES = T.let(T.unsafe(nil), Array)

# source://noticed//lib/noticed.rb#34
class Noticed::ResponseUnsuccessful < ::StandardError
  # @return [ResponseUnsuccessful] a new instance of ResponseUnsuccessful
  #
  # source://noticed//lib/noticed.rb#37
  def initialize(response); end

  # Returns the value of attribute response.
  #
  # source://noticed//lib/noticed.rb#35
  def response; end
end

# source://noticed//lib/noticed/text_coder.rb#2
class Noticed::TextCoder
  class << self
    # source://noticed//lib/noticed/text_coder.rb#11
    def dump(data); end

    # source://noticed//lib/noticed/text_coder.rb#3
    def load(data); end
  end
end

# source://noticed//lib/noticed/translation.rb#2
module Noticed::Translation
  extend ::ActiveSupport::Concern

  # source://noticed//lib/noticed/translation.rb#10
  def class_scope; end

  # Returns the +i18n_scope+ for the class. Overwrite if you want custom lookup.
  #
  # source://noticed//lib/noticed/translation.rb#6
  def i18n_scope; end

  # source://noticed//lib/noticed/translation.rb#19
  def scope_translation_key(key); end

  # source://noticed//lib/noticed/translation.rb#14
  def t(key, **options); end

  # source://noticed//lib/noticed/translation.rb#14
  def translate(key, **options); end
end

# source://noticed//lib/noticed.rb#31
class Noticed::ValidationError < ::StandardError; end
