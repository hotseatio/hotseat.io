# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `lisbn` gem.
# Please instead update this file by running `bin/tapioca gem lisbn`.

# source://lisbn//lib/lisbn/cache_method.rb#1
class Lisbn < ::String
  extend ::Lisbn::CacheMethod

  # Returns a normalized ISBN form
  #
  # source://lisbn//lib/lisbn/cache_method.rb#6
  def isbn(*args, &blk); end

  # Returns a valid ISBN in ISBN-10 format.
  # Returns nil if the ISBN is invalid or incapable of conversion to ISBN-10.
  #
  # source://lisbn//lib/lisbn/cache_method.rb#6
  def isbn10(*args, &blk); end

  # source://lisbn//lib/lisbn/lisbn.rb#33
  def isbn10_without_cache; end

  # Returns a valid ISBN in ISBN-13 format.
  # Returns nil if the ISBN is invalid.
  #
  # source://lisbn//lib/lisbn/cache_method.rb#6
  def isbn13(*args, &blk); end

  # source://lisbn//lib/lisbn/lisbn.rb#43
  def isbn13_without_cache; end

  # source://lisbn//lib/lisbn/cache_method.rb#6
  def isbn_10_checksum(*args, &blk); end

  # source://lisbn//lib/lisbn/lisbn.rb#96
  def isbn_10_checksum_without_cache; end

  # source://lisbn//lib/lisbn/cache_method.rb#6
  def isbn_13_checksum(*args, &blk); end

  # source://lisbn//lib/lisbn/lisbn.rb#121
  def isbn_13_checksum_without_cache; end

  # source://lisbn//lib/lisbn/lisbn.rb#19
  def isbn_with_dash; end

  # source://lisbn//lib/lisbn/lisbn.rb#3
  def isbn_without_cache; end

  # Returns an Array with the 'parts' of the ISBN in left-to-right order.
  # The parts of an ISBN are as follows:
  #   - GS1 prefix (only for ISBN-13)
  #   - Group identifier
  #   - Prefix/publisher code
  #   - Item number
  #   - Check digit
  #
  # Returns nil if the ISBN is not valid.
  # Returns nil if parts argument is 4 but ISBN-10 does not exist
  # Returns nil if the group and prefix cannot be identified.
  #
  # @raise [ArgumentError]
  #
  # source://lisbn//lib/lisbn/cache_method.rb#6
  def parts(*args, &blk); end

  # source://lisbn//lib/lisbn/lisbn.rb#61
  def parts_without_cache(parts = T.unsafe(nil)); end

  # Returns true if the ISBN is valid, false otherwise.
  #
  # @return [Boolean]
  #
  # source://lisbn//lib/lisbn/cache_method.rb#6
  def valid?(*args, &blk); end

  private

  # @return [Boolean]
  #
  # source://lisbn//lib/lisbn/lisbn.rb#147
  def valid_isbn_10?; end

  # @return [Boolean]
  #
  # source://lisbn//lib/lisbn/lisbn.rb#152
  def valid_isbn_13?; end
end

# source://lisbn//lib/lisbn/cache_method.rb#2
module Lisbn::CacheMethod
  # source://lisbn//lib/lisbn/cache_method.rb#3
  def cache_method(*methods); end
end

# source://lisbn//lib/lisbn/lisbn.rb#157
Lisbn::RANGES = T.let(T.unsafe(nil), Hash)

# source://lisbn//lib/lisbn/ranges.rb#2
module Lisbn::Ranges
  class << self
    # source://lisbn//lib/lisbn/ranges.rb#25
    def save_to_yaml!; end

    # source://lisbn//lib/lisbn/ranges.rb#3
    def to_yaml; end
  end
end
