# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `blazer` gem.
# Please instead update this file by running `bin/tapioca gem blazer`.

# source://blazer-2.6.4/lib/blazer/version.rb:1
module Blazer
  class << self
    # source://blazer-2.6.4/lib/blazer.rb:245
    def adapters; end

    # Returns the value of attribute anomaly_checks.
    #
    # source://blazer-2.6.4/lib/blazer.rb:65
    def anomaly_checks; end

    # Sets the attribute anomaly_checks
    #
    # @param value the value to set the attribute anomaly_checks to.
    #
    # source://blazer-2.6.4/lib/blazer.rb:65
    def anomaly_checks=(_arg0); end

    # source://blazer-2.6.4/lib/blazer.rb:253
    def archive_queries; end

    # Returns the value of attribute async.
    #
    # source://blazer-2.6.4/lib/blazer.rb:67
    def async; end

    # Sets the attribute async
    #
    # @param value the value to set the attribute async to.
    #
    # source://blazer-2.6.4/lib/blazer.rb:67
    def async=(_arg0); end

    # Returns the value of attribute audit.
    #
    # source://blazer-2.6.4/lib/blazer.rb:54
    def audit; end

    # Sets the attribute audit
    #
    # @param value the value to set the attribute audit to.
    #
    # source://blazer-2.6.4/lib/blazer.rb:54
    def audit=(_arg0); end

    # Returns the value of attribute before_action.
    #
    # source://blazer-2.6.4/lib/blazer.rb:59
    def before_action; end

    # Sets the attribute before_action
    #
    # @param value the value to set the attribute before_action to.
    #
    # source://blazer-2.6.4/lib/blazer.rb:59
    def before_action=(_arg0); end

    # Returns the value of attribute cache.
    #
    # source://blazer-2.6.4/lib/blazer.rb:61
    def cache; end

    # Sets the attribute cache
    #
    # @param value the value to set the attribute cache to.
    #
    # source://blazer-2.6.4/lib/blazer.rb:61
    def cache=(_arg0); end

    # Returns the value of attribute check_schedules.
    #
    # source://blazer-2.6.4/lib/blazer.rb:64
    def check_schedules; end

    # Sets the attribute check_schedules
    #
    # @param value the value to set the attribute check_schedules to.
    #
    # source://blazer-2.6.4/lib/blazer.rb:64
    def check_schedules=(_arg0); end

    # source://blazer-2.6.4/lib/blazer.rb:128
    def data_sources; end

    # TODO move to Statement and remove in 3.0.0
    #
    # source://blazer-2.6.4/lib/blazer.rb:139
    def extract_vars(statement); end

    # Returns the value of attribute forecasting.
    #
    # source://blazer-2.6.4/lib/blazer.rb:66
    def forecasting; end

    # Sets the attribute forecasting
    #
    # @param value the value to set the attribute forecasting to.
    #
    # source://blazer-2.6.4/lib/blazer.rb:66
    def forecasting=(_arg0); end

    # Returns the value of attribute from_email.
    #
    # source://blazer-2.6.4/lib/blazer.rb:60
    def from_email; end

    # Sets the attribute from_email
    #
    # @param value the value to set the attribute from_email to.
    #
    # source://blazer-2.6.4/lib/blazer.rb:60
    def from_email=(_arg0); end

    # Returns the value of attribute images.
    #
    # source://blazer-2.6.4/lib/blazer.rb:68
    def images; end

    # Sets the attribute images
    #
    # @param value the value to set the attribute images to.
    #
    # source://blazer-2.6.4/lib/blazer.rb:68
    def images=(_arg0); end

    # Returns the value of attribute mapbox_access_token.
    #
    # source://blazer-2.6.4/lib/blazer.rb:74
    def mapbox_access_token; end

    # Sets the attribute mapbox_access_token
    #
    # @param value the value to set the attribute mapbox_access_token to.
    #
    # source://blazer-2.6.4/lib/blazer.rb:74
    def mapbox_access_token=(_arg0); end

    # Returns the value of attribute override_csp.
    #
    # source://blazer-2.6.4/lib/blazer.rb:71
    def override_csp; end

    # Sets the attribute override_csp
    #
    # @param value the value to set the attribute override_csp to.
    #
    # source://blazer-2.6.4/lib/blazer.rb:71
    def override_csp=(_arg0); end

    # Returns the value of attribute query_editable.
    #
    # source://blazer-2.6.4/lib/blazer.rb:70
    def query_editable; end

    # Sets the attribute query_editable
    #
    # @param value the value to set the attribute query_editable to.
    #
    # source://blazer-2.6.4/lib/blazer.rb:70
    def query_editable=(_arg0); end

    # Returns the value of attribute query_viewable.
    #
    # source://blazer-2.6.4/lib/blazer.rb:69
    def query_viewable; end

    # Sets the attribute query_viewable
    #
    # @param value the value to set the attribute query_viewable to.
    #
    # source://blazer-2.6.4/lib/blazer.rb:69
    def query_viewable=(_arg0); end

    # source://railties-7.0.3.1/lib/rails/engine.rb:405
    def railtie_helpers_paths; end

    # source://railties-7.0.3.1/lib/rails/engine.rb:394
    def railtie_namespace; end

    # source://railties-7.0.3.1/lib/rails/engine.rb:409
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://blazer-2.6.4/lib/blazer.rb:249
    def register_adapter(name, adapter); end

    # source://blazer-2.6.4/lib/blazer.rb:154
    def run_check(check); end

    # source://blazer-2.6.4/lib/blazer.rb:145
    def run_checks(schedule: T.unsafe(nil)); end

    # source://blazer-2.6.4/lib/blazer.rb:198
    def send_failing_checks; end

    # source://blazer-2.6.4/lib/blazer.rb:117
    def settings; end

    # @return [Boolean]
    #
    # source://blazer-2.6.4/lib/blazer.rb:224
    def slack?; end

    # Returns the value of attribute slack_oauth_token.
    #
    # source://blazer-2.6.4/lib/blazer.rb:72
    def slack_oauth_token; end

    # Sets the attribute slack_oauth_token
    #
    # @param value the value to set the attribute slack_oauth_token to.
    #
    # source://blazer-2.6.4/lib/blazer.rb:72
    def slack_oauth_token=(_arg0); end

    # Returns the value of attribute slack_webhook_url.
    #
    # source://blazer-2.6.4/lib/blazer.rb:73
    def slack_webhook_url; end

    # Sets the attribute slack_webhook_url
    #
    # @param value the value to set the attribute slack_webhook_url to.
    #
    # source://blazer-2.6.4/lib/blazer.rb:73
    def slack_webhook_url=(_arg0); end

    # source://railties-7.0.3.1/lib/rails/engine.rb:397
    def table_name_prefix; end

    # Returns the value of attribute time_zone.
    #
    # source://blazer-2.6.4/lib/blazer.rb:55
    def time_zone; end

    # source://blazer-2.6.4/lib/blazer.rb:96
    def time_zone=(time_zone); end

    # Returns the value of attribute transform_statement.
    #
    # source://blazer-2.6.4/lib/blazer.rb:62
    def transform_statement; end

    # Sets the attribute transform_statement
    #
    # @param value the value to set the attribute transform_statement to.
    #
    # source://blazer-2.6.4/lib/blazer.rb:62
    def transform_statement=(_arg0); end

    # Returns the value of attribute transform_variable.
    #
    # source://blazer-2.6.4/lib/blazer.rb:63
    def transform_variable; end

    # Sets the attribute transform_variable
    #
    # @param value the value to set the attribute transform_variable to.
    #
    # source://blazer-2.6.4/lib/blazer.rb:63
    def transform_variable=(_arg0); end

    # @return [Boolean]
    #
    # source://blazer-2.6.4/lib/blazer.rb:228
    def uploads?; end

    # source://blazer-2.6.4/lib/blazer.rb:232
    def uploads_connection; end

    # source://blazer-2.6.4/lib/blazer.rb:237
    def uploads_schema; end

    # source://blazer-2.6.4/lib/blazer.rb:241
    def uploads_table_name(name); end

    # source://railties-7.0.3.1/lib/rails/engine.rb:401
    def use_relative_model_naming?; end

    # source://blazer-2.6.4/lib/blazer.rb:100
    def user_class; end

    # Sets the attribute user_class
    #
    # @param value the value to set the attribute user_class to.
    #
    # source://blazer-2.6.4/lib/blazer.rb:57
    def user_class=(_arg0); end

    # source://blazer-2.6.4/lib/blazer.rb:107
    def user_method; end

    # Sets the attribute user_method
    #
    # @param value the value to set the attribute user_method to.
    #
    # source://blazer-2.6.4/lib/blazer.rb:58
    def user_method=(_arg0); end

    # Returns the value of attribute user_name.
    #
    # source://blazer-2.6.4/lib/blazer.rb:56
    def user_name; end

    # Sets the attribute user_name
    #
    # @param value the value to set the attribute user_name to.
    #
    # source://blazer-2.6.4/lib/blazer.rb:56
    def user_name=(_arg0); end
  end
end

# source://blazer-2.6.4/lib/blazer/adapters/base_adapter.rb:2
module Blazer::Adapters; end

# source://blazer-2.6.4/lib/blazer/adapters/athena_adapter.rb:3
class Blazer::Adapters::AthenaAdapter < ::Blazer::Adapters::BaseAdapter
  # https://docs.aws.amazon.com/athena/latest/ug/querying-with-prepared-statements.html
  #
  # source://blazer-2.6.4/lib/blazer/adapters/athena_adapter.rb:139
  def parameter_binding; end

  # source://blazer-2.6.4/lib/blazer/adapters/athena_adapter.rb:129
  def preview_statement; end

  # https://docs.aws.amazon.com/athena/latest/ug/select.html#select-escaping
  #
  # source://blazer-2.6.4/lib/blazer/adapters/athena_adapter.rb:134
  def quoting; end

  # source://blazer-2.6.4/lib/blazer/adapters/athena_adapter.rb:4
  def run_statement(statement, comment, bind_params = T.unsafe(nil)); end

  # source://blazer-2.6.4/lib/blazer/adapters/athena_adapter.rb:125
  def schema; end

  # source://blazer-2.6.4/lib/blazer/adapters/athena_adapter.rb:121
  def tables; end

  private

  # source://blazer-2.6.4/lib/blazer/adapters/athena_adapter.rb:162
  def client; end

  # source://blazer-2.6.4/lib/blazer/adapters/athena_adapter.rb:170
  def client_options; end

  # source://blazer-2.6.4/lib/blazer/adapters/athena_adapter.rb:145
  def database; end

  # note: this setting is experimental
  # it does *not* need to be set to use engine version 2
  # prepared statements must be manually deleted if enabled
  #
  # source://blazer-2.6.4/lib/blazer/adapters/athena_adapter.rb:152
  def engine_version; end

  # source://blazer-2.6.4/lib/blazer/adapters/athena_adapter.rb:156
  def fetch_error(query_execution_id); end

  # source://blazer-2.6.4/lib/blazer/adapters/athena_adapter.rb:166
  def glue; end
end

# source://blazer-2.6.4/lib/blazer/adapters/base_adapter.rb:3
class Blazer::Adapters::BaseAdapter
  # @return [BaseAdapter] a new instance of BaseAdapter
  #
  # source://blazer-2.6.4/lib/blazer/adapters/base_adapter.rb:6
  def initialize(data_source); end

  # @return [Boolean]
  #
  # source://blazer-2.6.4/lib/blazer/adapters/base_adapter.rb:57
  def cachable?(statement); end

  # source://blazer-2.6.4/lib/blazer/adapters/base_adapter.rb:53
  def cancel(run_id); end

  # source://blazer-2.6.4/lib/blazer/adapters/base_adapter.rb:65
  def cohort_analysis_statement(statement, period:, days:); end

  # source://blazer-2.6.4/lib/blazer/adapters/base_adapter.rb:45
  def cost(statement); end

  # Returns the value of attribute data_source.
  #
  # source://blazer-2.6.4/lib/blazer/adapters/base_adapter.rb:4
  def data_source; end

  # source://blazer-2.6.4/lib/blazer/adapters/base_adapter.rb:49
  def explain(statement); end

  # source://blazer-2.6.4/lib/blazer/adapters/base_adapter.rb:21
  def parameter_binding; end

  # source://blazer-2.6.4/lib/blazer/adapters/base_adapter.rb:37
  def preview_statement; end

  # source://blazer-2.6.4/lib/blazer/adapters/base_adapter.rb:14
  def quoting; end

  # source://blazer-2.6.4/lib/blazer/adapters/base_adapter.rb:41
  def reconnect; end

  # source://blazer-2.6.4/lib/blazer/adapters/base_adapter.rb:10
  def run_statement(statement, comment); end

  # source://blazer-2.6.4/lib/blazer/adapters/base_adapter.rb:33
  def schema; end

  # @return [Boolean]
  #
  # source://blazer-2.6.4/lib/blazer/adapters/base_adapter.rb:61
  def supports_cohort_analysis?; end

  # source://blazer-2.6.4/lib/blazer/adapters/base_adapter.rb:29
  def tables; end

  protected

  # source://blazer-2.6.4/lib/blazer/adapters/base_adapter.rb:71
  def settings; end
end

# source://blazer-2.6.4/lib/blazer/adapters/bigquery_adapter.rb:3
class Blazer::Adapters::BigQueryAdapter < ::Blazer::Adapters::BaseAdapter
  # https://cloud.google.com/bigquery/docs/parameterized-queries
  #
  # source://blazer-2.6.4/lib/blazer/adapters/bigquery_adapter.rb:52
  def parameter_binding; end

  # source://blazer-2.6.4/lib/blazer/adapters/bigquery_adapter.rb:42
  def preview_statement; end

  # https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#string_and_bytes_literals
  #
  # source://blazer-2.6.4/lib/blazer/adapters/bigquery_adapter.rb:47
  def quoting; end

  # source://blazer-2.6.4/lib/blazer/adapters/bigquery_adapter.rb:4
  def run_statement(statement, comment, bind_params); end

  # source://blazer-2.6.4/lib/blazer/adapters/bigquery_adapter.rb:32
  def schema; end

  # source://blazer-2.6.4/lib/blazer/adapters/bigquery_adapter.rb:28
  def tables; end

  private

  # source://blazer-2.6.4/lib/blazer/adapters/bigquery_adapter.rb:58
  def bigquery; end

  # source://blazer-2.6.4/lib/blazer/adapters/bigquery_adapter.rb:72
  def table_columns(table_ref); end

  # source://blazer-2.6.4/lib/blazer/adapters/bigquery_adapter.rb:68
  def table_refs; end
end

# source://blazer-2.6.4/lib/blazer/adapters/cassandra_adapter.rb:3
class Blazer::Adapters::CassandraAdapter < ::Blazer::Adapters::BaseAdapter
  # https://docs.datastax.com/en/developer/nodejs-driver/3.0/features/parameterized-queries/
  #
  # source://blazer-2.6.4/lib/blazer/adapters/cassandra_adapter.rb:40
  def parameter_binding; end

  # source://blazer-2.6.4/lib/blazer/adapters/cassandra_adapter.rb:30
  def preview_statement; end

  # https://docs.datastax.com/en/cql-oss/3.3/cql/cql_reference/escape_char_r.html
  #
  # source://blazer-2.6.4/lib/blazer/adapters/cassandra_adapter.rb:35
  def quoting; end

  # source://blazer-2.6.4/lib/blazer/adapters/cassandra_adapter.rb:4
  def run_statement(statement, comment, bind_params); end

  # source://blazer-2.6.4/lib/blazer/adapters/cassandra_adapter.rb:25
  def schema; end

  # source://blazer-2.6.4/lib/blazer/adapters/cassandra_adapter.rb:21
  def tables; end

  private

  # source://blazer-2.6.4/lib/blazer/adapters/cassandra_adapter.rb:46
  def cluster; end

  # source://blazer-2.6.4/lib/blazer/adapters/cassandra_adapter.rb:65
  def keyspace; end

  # source://blazer-2.6.4/lib/blazer/adapters/cassandra_adapter.rb:57
  def session; end

  # source://blazer-2.6.4/lib/blazer/adapters/cassandra_adapter.rb:61
  def uri; end
end

# source://blazer-2.6.4/lib/blazer/adapters/drill_adapter.rb:3
class Blazer::Adapters::DrillAdapter < ::Blazer::Adapters::BaseAdapter
  # https://issues.apache.org/jira/browse/DRILL-5079
  #
  # source://blazer-2.6.4/lib/blazer/adapters/drill_adapter.rb:27
  def parameter_binding; end

  # https://drill.apache.org/docs/lexical-structure/#string
  #
  # source://blazer-2.6.4/lib/blazer/adapters/drill_adapter.rb:22
  def quoting; end

  # source://blazer-2.6.4/lib/blazer/adapters/drill_adapter.rb:4
  def run_statement(statement, comment); end

  private

  # source://blazer-2.6.4/lib/blazer/adapters/drill_adapter.rb:33
  def drill; end
end

# source://blazer-2.6.4/lib/blazer/adapters/druid_adapter.rb:3
class Blazer::Adapters::DruidAdapter < ::Blazer::Adapters::BaseAdapter
  # https://druid.apache.org/docs/latest/querying/sql.html#dynamic-parameters
  #
  # source://blazer-2.6.4/lib/blazer/adapters/druid_adapter.rb:97
  def parameter_binding; end

  # source://blazer-2.6.4/lib/blazer/adapters/druid_adapter.rb:86
  def preview_statement; end

  # https://druid.apache.org/docs/latest/querying/sql.html#identifiers-and-literals
  # docs only mention double quotes
  #
  # source://blazer-2.6.4/lib/blazer/adapters/druid_adapter.rb:92
  def quoting; end

  # source://blazer-2.6.4/lib/blazer/adapters/druid_adapter.rb:6
  def run_statement(statement, comment, bind_params); end

  # source://blazer-2.6.4/lib/blazer/adapters/druid_adapter.rb:81
  def schema; end

  # source://blazer-2.6.4/lib/blazer/adapters/druid_adapter.rb:76
  def tables; end
end

# source://blazer-2.6.4/lib/blazer/adapters/druid_adapter.rb:4
Blazer::Adapters::DruidAdapter::TIMESTAMP_REGEX = T.let(T.unsafe(nil), Regexp)

# source://blazer-2.6.4/lib/blazer/adapters/elasticsearch_adapter.rb:3
class Blazer::Adapters::ElasticsearchAdapter < ::Blazer::Adapters::BaseAdapter
  # https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-rest-params.html
  #
  # source://blazer-2.6.4/lib/blazer/adapters/elasticsearch_adapter.rb:46
  def parameter_binding; end

  # source://blazer-2.6.4/lib/blazer/adapters/elasticsearch_adapter.rb:36
  def preview_statement; end

  # https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-lexical-structure.html#sql-syntax-string-literals
  #
  # source://blazer-2.6.4/lib/blazer/adapters/elasticsearch_adapter.rb:41
  def quoting; end

  # source://blazer-2.6.4/lib/blazer/adapters/elasticsearch_adapter.rb:4
  def run_statement(statement, comment, bind_params); end

  # source://blazer-2.6.4/lib/blazer/adapters/elasticsearch_adapter.rb:30
  def tables; end

  protected

  # source://blazer-2.6.4/lib/blazer/adapters/elasticsearch_adapter.rb:56
  def client; end

  # source://blazer-2.6.4/lib/blazer/adapters/elasticsearch_adapter.rb:52
  def endpoint; end
end

# source://blazer-2.6.4/lib/blazer/adapters/hive_adapter.rb:3
class Blazer::Adapters::HiveAdapter < ::Blazer::Adapters::BaseAdapter
  # has variable substitution, but sets for session
  # https://cwiki.apache.org/confluence/display/Hive/LanguageManual+VariableSubstitution
  #
  # source://blazer-2.6.4/lib/blazer/adapters/hive_adapter.rb:35
  def parameter_binding; end

  # source://blazer-2.6.4/lib/blazer/adapters/hive_adapter.rb:24
  def preview_statement; end

  # https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Types#LanguageManualTypes-StringsstringStrings
  #
  # source://blazer-2.6.4/lib/blazer/adapters/hive_adapter.rb:29
  def quoting; end

  # source://blazer-2.6.4/lib/blazer/adapters/hive_adapter.rb:4
  def run_statement(statement, comment); end

  # source://blazer-2.6.4/lib/blazer/adapters/hive_adapter.rb:20
  def tables; end

  protected

  # source://blazer-2.6.4/lib/blazer/adapters/hive_adapter.rb:40
  def client; end
end

# source://blazer-2.6.4/lib/blazer/adapters/ignite_adapter.rb:3
class Blazer::Adapters::IgniteAdapter < ::Blazer::Adapters::BaseAdapter
  # query arguments
  # https://ignite.apache.org/docs/latest/binary-client-protocol/sql-and-scan-queries#op_query_sql
  #
  # source://blazer-2.6.4/lib/blazer/adapters/ignite_adapter.rb:46
  def parameter_binding; end

  # source://blazer-2.6.4/lib/blazer/adapters/ignite_adapter.rb:20
  def preview_statement; end

  # TODO figure out error
  # Table `__T0` can be accessed only within Ignite query context.
  # def schema
  #   sql = "SELECT table_schema, table_name, column_name, data_type, ordinal_position FROM information_schema.columns WHERE table_schema NOT IN ('INFORMATION_SCHEMA', 'SYS')"
  #   result = data_source.run_statement(sql)
  #   result.rows.group_by { |r| [r[0], r[1]] }.map { |k, vs| {schema: k[0], table: k[1], columns: vs.sort_by { |v| v[2] }.map { |v| {name: v[2], data_type: v[3]} }} }.sort_by { |t| [t[:schema] == default_schema ? "" : t[:schema], t[:table]] }
  # end
  #
  # source://blazer-2.6.4/lib/blazer/adapters/ignite_adapter.rb:40
  def quoting; end

  # source://blazer-2.6.4/lib/blazer/adapters/ignite_adapter.rb:4
  def run_statement(statement, comment, bind_params); end

  # source://blazer-2.6.4/lib/blazer/adapters/ignite_adapter.rb:24
  def tables; end

  private

  # source://blazer-2.6.4/lib/blazer/adapters/ignite_adapter.rb:56
  def client; end

  # source://blazer-2.6.4/lib/blazer/adapters/ignite_adapter.rb:52
  def default_schema; end
end

# source://blazer-2.6.4/lib/blazer/adapters/influxdb_adapter.rb:3
class Blazer::Adapters::InfluxdbAdapter < ::Blazer::Adapters::BaseAdapter
  # source://blazer-2.6.4/lib/blazer/adapters/influxdb_adapter.rb:46
  def parameter_binding; end

  # source://blazer-2.6.4/lib/blazer/adapters/influxdb_adapter.rb:37
  def preview_statement; end

  # https://docs.influxdata.com/influxdb/v1.8/query_language/spec/#strings
  #
  # source://blazer-2.6.4/lib/blazer/adapters/influxdb_adapter.rb:42
  def quoting; end

  # source://blazer-2.6.4/lib/blazer/adapters/influxdb_adapter.rb:4
  def run_statement(statement, comment); end

  # source://blazer-2.6.4/lib/blazer/adapters/influxdb_adapter.rb:33
  def tables; end

  protected

  # source://blazer-2.6.4/lib/blazer/adapters/influxdb_adapter.rb:52
  def client; end
end

# source://blazer-2.6.4/lib/blazer/adapters/mongodb_adapter.rb:3
class Blazer::Adapters::MongodbAdapter < ::Blazer::Adapters::BaseAdapter
  # source://blazer-2.6.4/lib/blazer/adapters/mongodb_adapter.rb:24
  def preview_statement; end

  # source://blazer-2.6.4/lib/blazer/adapters/mongodb_adapter.rb:28
  def quoting; end

  # source://blazer-2.6.4/lib/blazer/adapters/mongodb_adapter.rb:4
  def run_statement(statement, comment); end

  # source://blazer-2.6.4/lib/blazer/adapters/mongodb_adapter.rb:20
  def tables; end

  protected

  # source://blazer-2.6.4/lib/blazer/adapters/mongodb_adapter.rb:34
  def client; end

  # source://blazer-2.6.4/lib/blazer/adapters/mongodb_adapter.rb:38
  def db; end
end

# source://blazer-2.6.4/lib/blazer/adapters/neo4j_adapter.rb:3
class Blazer::Adapters::Neo4jAdapter < ::Blazer::Adapters::BaseAdapter
  # source://blazer-2.6.4/lib/blazer/adapters/neo4j_adapter.rb:42
  def parameter_binding; end

  # source://blazer-2.6.4/lib/blazer/adapters/neo4j_adapter.rb:33
  def preview_statement; end

  # https://neo4j.com/docs/cypher-manual/current/syntax/expressions/#cypher-expressions-string-literals
  #
  # source://blazer-2.6.4/lib/blazer/adapters/neo4j_adapter.rb:38
  def quoting; end

  # source://blazer-2.6.4/lib/blazer/adapters/neo4j_adapter.rb:4
  def run_statement(statement, comment, bind_params); end

  # source://blazer-2.6.4/lib/blazer/adapters/neo4j_adapter.rb:28
  def tables; end

  protected

  # source://blazer-2.6.4/lib/blazer/adapters/neo4j_adapter.rb:53
  def session; end
end

# source://blazer-2.6.4/lib/blazer/adapters/opensearch_adapter.rb:3
class Blazer::Adapters::OpensearchAdapter < ::Blazer::Adapters::BaseAdapter
  # source://blazer-2.6.4/lib/blazer/adapters/opensearch_adapter.rb:37
  def preview_statement; end

  # source://blazer-2.6.4/lib/blazer/adapters/opensearch_adapter.rb:41
  def quoting; end

  # source://blazer-2.6.4/lib/blazer/adapters/opensearch_adapter.rb:4
  def run_statement(statement, comment); end

  # source://blazer-2.6.4/lib/blazer/adapters/opensearch_adapter.rb:31
  def tables; end

  protected

  # source://blazer-2.6.4/lib/blazer/adapters/opensearch_adapter.rb:47
  def client; end
end

# source://blazer-2.6.4/lib/blazer/adapters/presto_adapter.rb:3
class Blazer::Adapters::PrestoAdapter < ::Blazer::Adapters::BaseAdapter
  # TODO support prepared statements - https://prestodb.io/docs/current/sql/prepare.html
  # feature request for variables - https://github.com/prestodb/presto/issues/5918
  #
  # source://blazer-2.6.4/lib/blazer/adapters/presto_adapter.rb:34
  def parameter_binding; end

  # source://blazer-2.6.4/lib/blazer/adapters/presto_adapter.rb:24
  def preview_statement; end

  # source://blazer-2.6.4/lib/blazer/adapters/presto_adapter.rb:28
  def quoting; end

  # source://blazer-2.6.4/lib/blazer/adapters/presto_adapter.rb:4
  def run_statement(statement, comment); end

  # source://blazer-2.6.4/lib/blazer/adapters/presto_adapter.rb:19
  def tables; end

  protected

  # source://blazer-2.6.4/lib/blazer/adapters/presto_adapter.rb:39
  def client; end
end

# source://blazer-2.6.4/lib/blazer/adapters/salesforce_adapter.rb:3
class Blazer::Adapters::SalesforceAdapter < ::Blazer::Adapters::BaseAdapter
  # source://blazer-2.6.4/lib/blazer/adapters/salesforce_adapter.rb:34
  def preview_statement; end

  # https://developer.salesforce.com/docs/atlas.en-us.soql_sosl.meta/soql_sosl/sforce_api_calls_soql_select_quotedstringescapes.htm
  #
  # source://blazer-2.6.4/lib/blazer/adapters/salesforce_adapter.rb:39
  def quoting; end

  # source://blazer-2.6.4/lib/blazer/adapters/salesforce_adapter.rb:4
  def run_statement(statement, comment); end

  # source://blazer-2.6.4/lib/blazer/adapters/salesforce_adapter.rb:29
  def tables; end

  protected

  # source://blazer-2.6.4/lib/blazer/adapters/salesforce_adapter.rb:45
  def client; end
end

# source://blazer-2.6.4/lib/blazer/adapters/snowflake_adapter.rb:3
class Blazer::Adapters::SnowflakeAdapter < ::Blazer::Adapters::SqlAdapter
  # @return [SnowflakeAdapter] a new instance of SnowflakeAdapter
  #
  # source://blazer-2.6.4/lib/blazer/adapters/snowflake_adapter.rb:4
  def initialize(data_source); end

  # source://blazer-2.6.4/lib/blazer/adapters/snowflake_adapter.rb:68
  def cancel(run_id); end

  # source://blazer-2.6.4/lib/blazer/adapters/snowflake_adapter.rb:77
  def parameter_binding; end

  # https://docs.snowflake.com/en/sql-reference/data-types-text.html#escape-sequences
  #
  # source://blazer-2.6.4/lib/blazer/adapters/snowflake_adapter.rb:73
  def quoting; end
end

# source://blazer-2.6.4/lib/blazer/adapters/soda_adapter.rb:3
class Blazer::Adapters::SodaAdapter < ::Blazer::Adapters::BaseAdapter
  # source://blazer-2.6.4/lib/blazer/adapters/soda_adapter.rb:91
  def preview_statement; end

  # https://dev.socrata.com/docs/datatypes/text.html
  #
  # source://blazer-2.6.4/lib/blazer/adapters/soda_adapter.rb:100
  def quoting; end

  # source://blazer-2.6.4/lib/blazer/adapters/soda_adapter.rb:4
  def run_statement(statement, comment); end

  # source://blazer-2.6.4/lib/blazer/adapters/soda_adapter.rb:95
  def tables; end
end

# source://blazer-2.6.4/lib/blazer/adapters/spark_adapter.rb:3
class Blazer::Adapters::SparkAdapter < ::Blazer::Adapters::HiveAdapter
  # https://spark.apache.org/docs/latest/sql-ref-literals.html
  #
  # source://blazer-2.6.4/lib/blazer/adapters/spark_adapter.rb:9
  def quoting; end

  # source://blazer-2.6.4/lib/blazer/adapters/spark_adapter.rb:4
  def tables; end
end

# source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:3
class Blazer::Adapters::SqlAdapter < ::Blazer::Adapters::BaseAdapter
  # @return [SqlAdapter] a new instance of SqlAdapter
  #
  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:6
  def initialize(data_source); end

  # @return [Boolean]
  #
  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:123
  def cachable?(statement); end

  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:112
  def cancel(run_id); end

  # TODO treat date columns as already in time zone
  #
  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:132
  def cohort_analysis_statement(statement, period:, days:); end

  # Returns the value of attribute connection_model.
  #
  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:4
  def connection_model; end

  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:86
  def cost(statement); end

  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:96
  def explain(statement); end

  # Redshift adapter silently ignores binds
  #
  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:193
  def parameter_binding; end

  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:74
  def preview_statement; end

  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:188
  def quoting; end

  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:82
  def reconnect; end

  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:18
  def run_statement(statement, comment, bind_params = T.unsafe(nil)); end

  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:68
  def schema; end

  # @return [Boolean]
  #
  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:127
  def supports_cohort_analysis?; end

  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:44
  def tables; end

  protected

  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:248
  def adapter_name; end

  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:267
  def add_schemas(query); end

  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:253
  def default_schema; end

  # seperate from select_all to prevent mysql error
  #
  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:220
  def execute(statement); end

  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:303
  def in_transaction; end

  # @return [Boolean]
  #
  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:232
  def mysql?; end

  # @return [Boolean]
  #
  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:224
  def postgresql?; end

  # @return [Boolean]
  #
  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:316
  def prepared_statements?; end

  # @return [Boolean]
  #
  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:228
  def redshift?; end

  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:214
  def select_all(statement, params = T.unsafe(nil)); end

  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:283
  def set_timeout(timeout); end

  # @return [Boolean]
  #
  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:244
  def snowflake?; end

  # @return [Boolean]
  #
  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:236
  def sqlite?; end

  # @return [Boolean]
  #
  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:240
  def sqlserver?; end

  # @return [Boolean]
  #
  # source://blazer-2.6.4/lib/blazer/adapters/sql_adapter.rb:299
  def use_transaction?; end
end

# source://blazer-2.6.4/app/models/blazer/audit.rb:2
class Blazer::Audit < ::Blazer::Record
  include ::Blazer::Audit::GeneratedAttributeMethods
  include ::Blazer::Audit::GeneratedAssociationMethods

  # source://activerecord-7.0.3.1/lib/active_record/autosave_association.rb:160
  def autosave_associated_records_for_query(*args); end

  # source://activerecord-7.0.3.1/lib/active_record/autosave_association.rb:160
  def autosave_associated_records_for_user(*args); end

  class << self
    # source://activesupport-7.0.3.1/lib/active_support/callbacks.rb:68
    def __callbacks; end

    # source://activerecord-7.0.3.1/lib/active_record/reflection.rb:11
    def _reflections; end

    # source://activemodel-7.0.3.1/lib/active_model/validations.rb:52
    def _validators; end

    # source://activerecord-7.0.3.1/lib/active_record/enum.rb:116
    def defined_enums; end
  end
end

# source://blazer-2.6.4/app/models/blazer/audit.rb:0
module Blazer::Audit::GeneratedAssociationMethods
  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/singular_association.rb:28
  def build_query(*args, &block); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/singular_association.rb:28
  def build_user(*args, &block); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/singular_association.rb:32
  def create_query(*args, &block); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/singular_association.rb:36
  def create_query!(*args, &block); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/singular_association.rb:32
  def create_user(*args, &block); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/singular_association.rb:36
  def create_user!(*args, &block); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:103
  def query; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:111
  def query=(value); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/belongs_to.rb:132
  def query_changed?; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/belongs_to.rb:136
  def query_previously_changed?; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/singular_association.rb:19
  def reload_query; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/singular_association.rb:19
  def reload_user; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:103
  def user; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:111
  def user=(value); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/belongs_to.rb:132
  def user_changed?; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/belongs_to.rb:136
  def user_previously_changed?; end
end

# source://blazer-2.6.4/app/models/blazer/audit.rb:0
module Blazer::Audit::GeneratedAttributeMethods; end

# source://blazer-2.6.4/app/helpers/blazer/base_helper.rb:2
module Blazer::BaseHelper
  # source://blazer-2.6.4/app/helpers/blazer/base_helper.rb:14
  def blazer_format_value(key, value); end

  # source://blazer-2.6.4/app/helpers/blazer/base_helper.rb:35
  def blazer_js_var(name, value); end

  # source://blazer-2.6.4/app/helpers/blazer/base_helper.rb:31
  def blazer_maps?; end

  # source://blazer-2.6.4/app/helpers/blazer/base_helper.rb:39
  def blazer_series_name(k); end

  # source://blazer-2.6.4/app/helpers/blazer/base_helper.rb:3
  def blazer_title(title = T.unsafe(nil)); end
end

# source://blazer-2.6.4/app/helpers/blazer/base_helper.rb:12
Blazer::BaseHelper::BLAZER_IMAGE_EXT = T.let(T.unsafe(nil), Array)

# source://blazer-2.6.4/app/helpers/blazer/base_helper.rb:11
Blazer::BaseHelper::BLAZER_URL_REGEX = T.let(T.unsafe(nil), Regexp)

# source://blazer-2.6.4/app/models/blazer/check.rb:2
class Blazer::Check < ::Blazer::Record
  include ::Blazer::Check::GeneratedAttributeMethods
  include ::Blazer::Check::GeneratedAssociationMethods

  # source://activerecord-7.0.3.1/lib/active_record/autosave_association.rb:160
  def autosave_associated_records_for_query(*args); end

  # source://blazer-2.6.4/app/models/blazer/check.rb:13
  def split_emails; end

  # source://blazer-2.6.4/app/models/blazer/check.rb:17
  def split_slack_channels; end

  # source://blazer-2.6.4/app/models/blazer/check.rb:25
  def update_state(result); end

  private

  # source://blazer-2.6.4/app/models/blazer/check.rb:83
  def fix_emails; end

  # source://blazer-2.6.4/app/models/blazer/check.rb:79
  def set_state; end

  # source://blazer-2.6.4/app/models/blazer/check.rb:92
  def validate_emails; end

  # source://blazer-2.6.4/app/models/blazer/check.rb:98
  def validate_variables; end

  class << self
    # source://activesupport-7.0.3.1/lib/active_support/callbacks.rb:68
    def __callbacks; end

    # source://activerecord-7.0.3.1/lib/active_record/reflection.rb:11
    def _reflections; end

    # source://activemodel-7.0.3.1/lib/active_model/validations.rb:52
    def _validators; end

    # source://activerecord-7.0.3.1/lib/active_record/enum.rb:116
    def defined_enums; end
  end
end

# source://blazer-2.6.4/app/models/blazer/check.rb:0
module Blazer::Check::GeneratedAssociationMethods
  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/singular_association.rb:28
  def build_query(*args, &block); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/singular_association.rb:32
  def create_query(*args, &block); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/singular_association.rb:36
  def create_query!(*args, &block); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:103
  def query; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:111
  def query=(value); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/belongs_to.rb:132
  def query_changed?; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/belongs_to.rb:136
  def query_previously_changed?; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/singular_association.rb:19
  def reload_query; end
end

# source://blazer-2.6.4/app/models/blazer/check.rb:0
module Blazer::Check::GeneratedAttributeMethods; end

# source://blazer-2.6.4/lib/blazer/check_mailer.rb:2
class Blazer::CheckMailer < ::ActionMailer::Base
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::TextHelper
  extend ::ActionView::Helpers::SanitizeHelper::ClassMethods

  # source://blazer-2.6.4/lib/blazer/check_mailer.rb:21
  def failing_checks(email, checks); end

  # source://blazer-2.6.4/lib/blazer/check_mailer.rb:8
  def state_change(check, state, state_was, rows_count, error, columns, rows, column_types, check_type); end

  private

  # source://actionview-7.0.3.1/lib/action_view/layouts.rb:328
  def _layout(lookup_context, formats); end

  class << self
    # source://actionview-7.0.3.1/lib/action_view/layouts.rb:209
    def _layout; end

    # source://actionview-7.0.3.1/lib/action_view/layouts.rb:210
    def _layout_conditions; end
  end
end

# source://blazer-2.6.4/app/models/blazer/connection.rb:2
class Blazer::Connection < ::ActiveRecord::Base
  include ::Blazer::Connection::GeneratedAttributeMethods
  include ::Blazer::Connection::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  extend ::Kaminari::ConfigurationMethods::ClassMethods

  class << self
    # source://activemodel-7.0.3.1/lib/active_model/validations.rb:52
    def _validators; end

    # source://activerecord-7.0.3.1/lib/active_record/enum.rb:116
    def defined_enums; end

    # source://kaminari-activerecord-1.2.2/lib/kaminari/activerecord/active_record_model_extension.rb:15
    def page(num = T.unsafe(nil)); end
  end
end

# source://blazer-2.6.4/app/models/blazer/connection.rb:0
module Blazer::Connection::GeneratedAssociationMethods; end

# source://blazer-2.6.4/app/models/blazer/connection.rb:0
module Blazer::Connection::GeneratedAttributeMethods; end

# source://blazer-2.6.4/app/models/blazer/dashboard.rb:2
class Blazer::Dashboard < ::Blazer::Record
  include ::Blazer::Dashboard::GeneratedAttributeMethods
  include ::Blazer::Dashboard::GeneratedAssociationMethods

  # source://activerecord-7.0.3.1/lib/active_record/autosave_association.rb:160
  def autosave_associated_records_for_dashboard_queries(*args); end

  # source://activerecord-7.0.3.1/lib/active_record/autosave_association.rb:160
  def autosave_associated_records_for_queries(*args); end

  # source://blazer-2.6.4/app/models/blazer/dashboard.rb:13
  def to_param; end

  # source://activerecord-7.0.3.1/lib/active_record/autosave_association.rb:160
  def validate_associated_records_for_dashboard_queries(*args); end

  # source://activerecord-7.0.3.1/lib/active_record/autosave_association.rb:160
  def validate_associated_records_for_queries(*args); end

  # source://blazer-2.6.4/app/models/blazer/dashboard.rb:9
  def variables; end

  class << self
    # source://activesupport-7.0.3.1/lib/active_support/callbacks.rb:68
    def __callbacks; end

    # source://activerecord-7.0.3.1/lib/active_record/reflection.rb:11
    def _reflections; end

    # source://activemodel-7.0.3.1/lib/active_model/validations.rb:52
    def _validators; end

    # source://activerecord-7.0.3.1/lib/active_record/enum.rb:116
    def defined_enums; end
  end
end

# source://blazer-2.6.4/app/models/blazer/dashboard.rb:0
module Blazer::Dashboard::GeneratedAssociationMethods
  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:103
  def dashboard_queries; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:111
  def dashboard_queries=(value); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/collection_association.rb:62
  def dashboard_query_ids; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/collection_association.rb:72
  def dashboard_query_ids=(ids); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:103
  def queries; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:111
  def queries=(value); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/collection_association.rb:62
  def query_ids; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/collection_association.rb:72
  def query_ids=(ids); end
end

# source://blazer-2.6.4/app/models/blazer/dashboard.rb:0
module Blazer::Dashboard::GeneratedAttributeMethods; end

# source://blazer-2.6.4/app/models/blazer/dashboard_query.rb:2
class Blazer::DashboardQuery < ::Blazer::Record
  include ::Blazer::DashboardQuery::GeneratedAttributeMethods
  include ::Blazer::DashboardQuery::GeneratedAssociationMethods

  # source://activerecord-7.0.3.1/lib/active_record/autosave_association.rb:160
  def autosave_associated_records_for_dashboard(*args); end

  # source://activerecord-7.0.3.1/lib/active_record/autosave_association.rb:160
  def autosave_associated_records_for_query(*args); end

  class << self
    # source://activesupport-7.0.3.1/lib/active_support/callbacks.rb:68
    def __callbacks; end

    # source://activerecord-7.0.3.1/lib/active_record/reflection.rb:11
    def _reflections; end

    # source://activemodel-7.0.3.1/lib/active_model/validations.rb:52
    def _validators; end

    # source://activerecord-7.0.3.1/lib/active_record/enum.rb:116
    def defined_enums; end
  end
end

# source://blazer-2.6.4/app/models/blazer/dashboard_query.rb:0
module Blazer::DashboardQuery::GeneratedAssociationMethods
  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/singular_association.rb:28
  def build_dashboard(*args, &block); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/singular_association.rb:28
  def build_query(*args, &block); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/singular_association.rb:32
  def create_dashboard(*args, &block); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/singular_association.rb:36
  def create_dashboard!(*args, &block); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/singular_association.rb:32
  def create_query(*args, &block); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/singular_association.rb:36
  def create_query!(*args, &block); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:103
  def dashboard; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:111
  def dashboard=(value); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/belongs_to.rb:132
  def dashboard_changed?; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/belongs_to.rb:136
  def dashboard_previously_changed?; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:103
  def query; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:111
  def query=(value); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/belongs_to.rb:132
  def query_changed?; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/belongs_to.rb:136
  def query_previously_changed?; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/singular_association.rb:19
  def reload_dashboard; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/singular_association.rb:19
  def reload_query; end
end

# source://blazer-2.6.4/app/models/blazer/dashboard_query.rb:0
module Blazer::DashboardQuery::GeneratedAttributeMethods; end

# source://blazer-2.6.4/lib/blazer/data_source.rb:4
class Blazer::DataSource
  extend ::Forwardable

  # @return [DataSource] a new instance of DataSource
  #
  # source://blazer-2.6.4/lib/blazer/data_source.rb:11
  def initialize(id, settings); end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:16
  def adapter; end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:180
  def bind_params(statement, variables); end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:44
  def cache; end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:65
  def cache_expires_in; end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:143
  def cache_key(key); end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:61
  def cache_mode; end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:69
  def cache_slow_threshold; end

  # source://RUBY_ROOT/forwardable.rb:229
  def cancel(*args, **_arg1, &block); end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:139
  def clear_cache(statement); end

  # source://RUBY_ROOT/forwardable.rb:229
  def cohort_analysis_statement(*args, **_arg1, &block); end

  # source://RUBY_ROOT/forwardable.rb:229
  def cost(*args, **_arg1, &block); end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:88
  def delete_results(run_id); end

  # source://RUBY_ROOT/forwardable.rb:229
  def explain(*args, **_arg1, &block); end

  # Returns the value of attribute id.
  #
  # source://blazer-2.6.4/lib/blazer/data_source.rb:7
  def id; end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:24
  def linked_columns; end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:73
  def local_time_suffix; end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:20
  def name; end

  # source://RUBY_ROOT/forwardable.rb:229
  def preview_statement(*args, **_arg1, &block); end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:155
  def quote(value); end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:77
  def read_cache(cache_key); end

  # source://RUBY_ROOT/forwardable.rb:229
  def reconnect(*args, **_arg1, &block); end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:151
  def run_cache_key(run_id); end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:84
  def run_results(run_id); end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:101
  def run_statement(statement, options = T.unsafe(nil)); end

  # source://RUBY_ROOT/forwardable.rb:229
  def schema(*args, **_arg1, &block); end

  # Returns the value of attribute settings.
  #
  # source://blazer-2.6.4/lib/blazer/data_source.rb:7
  def settings; end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:28
  def smart_columns; end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:32
  def smart_variables; end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:147
  def statement_cache_key(statement); end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:92
  def sub_variables(statement, vars); end

  # source://RUBY_ROOT/forwardable.rb:229
  def supports_cohort_analysis?(*args, **_arg1, &block); end

  # source://RUBY_ROOT/forwardable.rb:229
  def tables(*args, **_arg1, &block); end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:40
  def timeout; end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:36
  def variable_defaults; end

  protected

  # source://blazer-2.6.4/lib/blazer/data_source.rb:212
  def adapter_instance; end

  # TODO check for adapter with same name, default to sql
  #
  # source://blazer-2.6.4/lib/blazer/data_source.rb:267
  def detect_adapter; end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:231
  def parameter_binding; end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:227
  def quoting; end

  # source://blazer-2.6.4/lib/blazer/data_source.rb:235
  def run_statement_helper(statement, comment, run_id, options); end
end

# source://blazer-2.6.4/lib/blazer/engine.rb:2
class Blazer::Engine < ::Rails::Engine; end

# source://blazer-2.6.4/lib/blazer.rb:42
class Blazer::Error < ::StandardError; end

# source://blazer-2.6.4/app/models/blazer/query.rb:2
class Blazer::Query < ::Blazer::Record
  include ::Blazer::Query::GeneratedAttributeMethods
  include ::Blazer::Query::GeneratedAssociationMethods

  # source://activerecord-7.0.3.1/lib/active_record/autosave_association.rb:160
  def autosave_associated_records_for_audits(*args); end

  # source://activerecord-7.0.3.1/lib/active_record/autosave_association.rb:160
  def autosave_associated_records_for_checks(*args); end

  # source://activerecord-7.0.3.1/lib/active_record/autosave_association.rb:160
  def autosave_associated_records_for_dashboard_queries(*args); end

  # source://activerecord-7.0.3.1/lib/active_record/autosave_association.rb:160
  def autosave_associated_records_for_dashboards(*args); end

  # source://blazer-2.6.4/app/models/blazer/query.rb:44
  def cohort_analysis?; end

  # source://blazer-2.6.4/app/models/blazer/query.rb:30
  def editable?(user); end

  # source://blazer-2.6.4/app/models/blazer/query.rb:18
  def friendly_name; end

  # source://blazer-2.6.4/app/models/blazer/query.rb:49
  def statement_object; end

  # source://blazer-2.6.4/app/models/blazer/query.rb:14
  def to_param; end

  # source://activerecord-7.0.3.1/lib/active_record/autosave_association.rb:160
  def validate_associated_records_for_audits(*args); end

  # source://activerecord-7.0.3.1/lib/active_record/autosave_association.rb:160
  def validate_associated_records_for_checks(*args); end

  # source://activerecord-7.0.3.1/lib/active_record/autosave_association.rb:160
  def validate_associated_records_for_dashboard_queries(*args); end

  # source://activerecord-7.0.3.1/lib/active_record/autosave_association.rb:160
  def validate_associated_records_for_dashboards(*args); end

  # source://blazer-2.6.4/app/models/blazer/query.rb:37
  def variables; end

  # source://blazer-2.6.4/app/models/blazer/query.rb:22
  def viewable?(user); end

  class << self
    # source://activesupport-7.0.3.1/lib/active_support/callbacks.rb:68
    def __callbacks; end

    # source://activerecord-7.0.3.1/lib/active_record/reflection.rb:11
    def _reflections; end

    # source://activemodel-7.0.3.1/lib/active_model/validations.rb:52
    def _validators; end

    # source://activerecord-7.0.3.1/lib/active_record/scoping/named.rb:174
    def active(*args, **_arg1); end

    # source://activerecord-7.0.3.1/lib/active_record/enum.rb:116
    def defined_enums; end

    # source://activerecord-7.0.3.1/lib/active_record/scoping/named.rb:174
    def named(*args, **_arg1); end
  end
end

# source://blazer-2.6.4/app/models/blazer/query.rb:0
module Blazer::Query::GeneratedAssociationMethods
  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/collection_association.rb:62
  def audit_ids; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/collection_association.rb:72
  def audit_ids=(ids); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:103
  def audits; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:111
  def audits=(value); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/collection_association.rb:62
  def check_ids; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/collection_association.rb:72
  def check_ids=(ids); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:103
  def checks; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:111
  def checks=(value); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/collection_association.rb:62
  def dashboard_ids; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/collection_association.rb:72
  def dashboard_ids=(ids); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:103
  def dashboard_queries; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:111
  def dashboard_queries=(value); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/collection_association.rb:62
  def dashboard_query_ids; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/collection_association.rb:72
  def dashboard_query_ids=(ids); end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:103
  def dashboards; end

  # source://activerecord-7.0.3.1/lib/active_record/associations/builder/association.rb:111
  def dashboards=(value); end
end

# source://blazer-2.6.4/app/models/blazer/query.rb:0
module Blazer::Query::GeneratedAttributeMethods; end

# source://blazer-2.6.4/app/models/blazer/record.rb:2
class Blazer::Record < ::ActiveRecord::Base
  include ::Blazer::Record::GeneratedAttributeMethods
  include ::Blazer::Record::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  extend ::Kaminari::ConfigurationMethods::ClassMethods

  class << self
    # source://activemodel-7.0.3.1/lib/active_model/validations.rb:52
    def _validators; end

    # source://activerecord-7.0.3.1/lib/active_record/enum.rb:116
    def defined_enums; end

    # source://kaminari-activerecord-1.2.2/lib/kaminari/activerecord/active_record_model_extension.rb:15
    def page(num = T.unsafe(nil)); end
  end
end

# source://blazer-2.6.4/app/models/blazer/record.rb:0
module Blazer::Record::GeneratedAssociationMethods; end

# source://blazer-2.6.4/app/models/blazer/record.rb:0
module Blazer::Record::GeneratedAttributeMethods; end

# source://blazer-2.6.4/lib/blazer/result.rb:2
class Blazer::Result
  # @return [Result] a new instance of Result
  #
  # source://blazer-2.6.4/lib/blazer/result.rb:5
  def initialize(data_source, columns, rows, error, cached_at, just_cached); end

  # @return [Boolean]
  #
  # source://blazer-2.6.4/lib/blazer/result.rb:176
  def anomaly?(series); end

  # source://blazer-2.6.4/lib/blazer/result.rb:22
  def boom; end

  # @return [Boolean]
  #
  # source://blazer-2.6.4/lib/blazer/result.rb:18
  def cached?; end

  # Returns the value of attribute cached_at.
  #
  # source://blazer-2.6.4/lib/blazer/result.rb:3
  def cached_at; end

  # source://blazer-2.6.4/lib/blazer/result.rb:68
  def chart_type; end

  # source://blazer-2.6.4/lib/blazer/result.rb:47
  def column_types; end

  # Returns the value of attribute columns.
  #
  # source://blazer-2.6.4/lib/blazer/result.rb:3
  def columns; end

  # Returns the value of attribute data_source.
  #
  # source://blazer-2.6.4/lib/blazer/result.rb:3
  def data_source; end

  # source://blazer-2.6.4/lib/blazer/result.rb:127
  def detect_anomaly; end

  # Returns the value of attribute error.
  #
  # source://blazer-2.6.4/lib/blazer/result.rb:3
  def error; end

  # TODO cache it?
  # don't want to put result data (even hashed version)
  # into cache without developer opt-in
  #
  # source://blazer-2.6.4/lib/blazer/result.rb:93
  def forecast; end

  # Returns the value of attribute forecast_error.
  #
  # source://blazer-2.6.4/lib/blazer/result.rb:3
  def forecast_error; end

  # @return [Boolean]
  #
  # source://blazer-2.6.4/lib/blazer/result.rb:86
  def forecastable?; end

  # Returns the value of attribute just_cached.
  #
  # source://blazer-2.6.4/lib/blazer/result.rb:3
  def just_cached; end

  # Returns the value of attribute rows.
  #
  # source://blazer-2.6.4/lib/blazer/result.rb:3
  def rows; end

  # @return [Boolean]
  #
  # source://blazer-2.6.4/lib/blazer/result.rb:14
  def timed_out?; end
end

# source://blazer-2.6.4/lib/blazer/run_statement.rb:2
class Blazer::RunStatement
  # source://blazer-2.6.4/lib/blazer/run_statement.rb:3
  def perform(statement, options = T.unsafe(nil)); end
end

# source://blazer-2.6.4/lib/blazer/run_statement_job.rb:2
class Blazer::RunStatementJob < ::ActiveJob::Base
  # source://blazer-2.6.4/lib/blazer/run_statement_job.rb:5
  def perform(data_source_id, statement, options); end

  class << self
    # source://activejob-7.0.3.1/lib/active_job/queue_adapter.rb:13
    def _queue_adapter; end

    # source://activejob-7.0.3.1/lib/active_job/queue_adapter.rb:12
    def _queue_adapter_name; end
  end
end

# source://blazer-2.6.4/lib/blazer/slack_notifier.rb:4
class Blazer::SlackNotifier
  class << self
    # https://api.slack.com/docs/message-formatting#how_to_escape_characters
    # - Replace the ampersand, &, with &amp;
    # - Replace the less-than sign, < with &lt;
    # - Replace the greater-than sign, > with &gt;
    # That's it. Don't HTML entity-encode the entire message.
    #
    # source://blazer-2.6.4/lib/blazer/slack_notifier.rb:55
    def escape(str); end

    # source://blazer-2.6.4/lib/blazer/slack_notifier.rb:30
    def failing_checks(channel, checks); end

    # source://blazer-2.6.4/lib/blazer/slack_notifier.rb:59
    def pluralize(*args); end

    # TODO use return value
    #
    # source://blazer-2.6.4/lib/blazer/slack_notifier.rb:71
    def post(payload); end

    # source://blazer-2.6.4/lib/blazer/slack_notifier.rb:85
    def post_api(url, payload, headers); end

    # checks shouldn't have variables, but in any case,
    # avoid passing variable params to url helpers
    # (known unsafe parameters are removed, but still not ideal)
    #
    # source://blazer-2.6.4/lib/blazer/slack_notifier.rb:66
    def query_url(id); end

    # source://blazer-2.6.4/lib/blazer/slack_notifier.rb:5
    def state_change(check, state, state_was, rows_count, error, check_type); end
  end
end

# source://blazer-2.6.4/lib/blazer/statement.rb:2
class Blazer::Statement
  # @return [Statement] a new instance of Statement
  #
  # source://blazer-2.6.4/lib/blazer/statement.rb:6
  def initialize(statement, data_source = T.unsafe(nil)); end

  # source://blazer-2.6.4/lib/blazer/statement.rb:16
  def add_values(var_params); end

  # source://blazer-2.6.4/lib/blazer/statement.rb:50
  def apply_cohort_analysis(period:, days:); end

  # source://blazer-2.6.4/lib/blazer/statement.rb:62
  def bind; end

  # Returns the value of attribute bind_statement.
  #
  # source://blazer-2.6.4/lib/blazer/statement.rb:3
  def bind_statement; end

  # Returns the value of attribute bind_values.
  #
  # source://blazer-2.6.4/lib/blazer/statement.rb:3
  def bind_values; end

  # source://blazer-2.6.4/lib/blazer/statement.rb:70
  def clear_cache; end

  # @return [Boolean]
  #
  # source://blazer-2.6.4/lib/blazer/statement.rb:46
  def cohort_analysis?; end

  # Returns the value of attribute data_source.
  #
  # source://blazer-2.6.4/lib/blazer/statement.rb:3
  def data_source; end

  # source://blazer-2.6.4/lib/blazer/statement.rb:66
  def display_statement; end

  # Returns the value of attribute statement.
  #
  # source://blazer-2.6.4/lib/blazer/statement.rb:3
  def statement; end

  # should probably transform before cohort analysis
  # but keep previous order for now
  #
  # source://blazer-2.6.4/lib/blazer/statement.rb:56
  def transformed_statement; end

  # Returns the value of attribute values.
  #
  # source://blazer-2.6.4/lib/blazer/statement.rb:4
  def values; end

  # Sets the attribute values
  #
  # @param value the value to set the attribute values to.
  #
  # source://blazer-2.6.4/lib/blazer/statement.rb:4
  def values=(_arg0); end

  # source://blazer-2.6.4/lib/blazer/statement.rb:12
  def variables; end
end

# source://blazer-2.6.4/lib/blazer.rb:87
Blazer::TIMEOUT_ERRORS = T.let(T.unsafe(nil), Array)

# source://blazer-2.6.4/lib/blazer.rb:86
Blazer::TIMEOUT_MESSAGE = T.let(T.unsafe(nil), String)

# source://blazer-2.6.4/lib/blazer.rb:44
class Blazer::TimeoutNotSupported < ::Blazer::Error; end

# source://blazer-2.6.4/app/models/blazer/upload.rb:2
class Blazer::Upload < ::Blazer::Record
  include ::Blazer::Upload::GeneratedAttributeMethods
  include ::Blazer::Upload::GeneratedAssociationMethods

  # source://blazer-2.6.4/app/models/blazer/upload.rb:7
  def table_name; end

  class << self
    # source://activesupport-7.0.3.1/lib/active_support/callbacks.rb:68
    def __callbacks; end

    # source://activemodel-7.0.3.1/lib/active_model/validations.rb:52
    def _validators; end

    # source://activerecord-7.0.3.1/lib/active_record/enum.rb:116
    def defined_enums; end
  end
end

# source://blazer-2.6.4/app/models/blazer/upload.rb:0
module Blazer::Upload::GeneratedAssociationMethods; end

# source://blazer-2.6.4/app/models/blazer/upload.rb:0
module Blazer::Upload::GeneratedAttributeMethods; end

# source://blazer-2.6.4/lib/blazer.rb:43
class Blazer::UploadError < ::Blazer::Error; end

# source://blazer-2.6.4/app/models/blazer/uploads_connection.rb:2
class Blazer::UploadsConnection < ::ActiveRecord::Base
  include ::Blazer::UploadsConnection::GeneratedAttributeMethods
  include ::Blazer::UploadsConnection::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  extend ::Kaminari::ConfigurationMethods::ClassMethods

  class << self
    # source://activemodel-7.0.3.1/lib/active_model/validations.rb:52
    def _validators; end

    # source://activerecord-7.0.3.1/lib/active_record/enum.rb:116
    def defined_enums; end

    # source://kaminari-activerecord-1.2.2/lib/kaminari/activerecord/active_record_model_extension.rb:15
    def page(num = T.unsafe(nil)); end
  end
end

# source://blazer-2.6.4/app/models/blazer/uploads_connection.rb:0
module Blazer::UploadsConnection::GeneratedAssociationMethods; end

# source://blazer-2.6.4/app/models/blazer/uploads_connection.rb:0
module Blazer::UploadsConnection::GeneratedAttributeMethods; end

# source://blazer-2.6.4/lib/blazer.rb:85
Blazer::VARIABLE_MESSAGE = T.let(T.unsafe(nil), String)

# source://blazer-2.6.4/lib/blazer/version.rb:2
Blazer::VERSION = T.let(T.unsafe(nil), String)
