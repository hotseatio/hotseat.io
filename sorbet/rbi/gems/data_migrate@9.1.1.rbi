# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `data_migrate` gem.
# Please instead update this file by running `bin/tapioca gem data_migrate`.

# source://data_migrate//lib/data_migrate/config.rb#1
module DataMigrate
  include ::ActiveSupport::Configurable
  extend ::ActiveSupport::Configurable::ClassMethods

  class << self
    # source://data_migrate//lib/data_migrate/config.rb#9
    def config; end

    # @yield [config]
    #
    # source://data_migrate//lib/data_migrate/config.rb#5
    def configure; end

    # source://data_migrate//lib/data_migrate.rb#17
    def root; end
  end
end

# source://data_migrate//lib/data_migrate/config.rb#14
class DataMigrate::Config
  # @return [Config] a new instance of Config
  #
  # source://data_migrate//lib/data_migrate/config.rb#19
  def initialize; end

  # Returns the value of attribute data_migrations_path.
  #
  # source://data_migrate//lib/data_migrate/config.rb#15
  def data_migrations_path; end

  # Sets the attribute data_migrations_path
  #
  # @param value the value to set the attribute data_migrations_path to.
  #
  # source://data_migrate//lib/data_migrate/config.rb#15
  def data_migrations_path=(_arg0); end

  # Returns the value of attribute data_template_path.
  #
  # source://data_migrate//lib/data_migrate/config.rb#15
  def data_template_path; end

  # Sets the attribute data_template_path
  #
  # @param value the value to set the attribute data_template_path to.
  #
  # source://data_migrate//lib/data_migrate/config.rb#26
  def data_template_path=(value); end

  # Returns the value of attribute db_configuration.
  #
  # source://data_migrate//lib/data_migrate/config.rb#15
  def db_configuration; end

  # Sets the attribute db_configuration
  #
  # @param value the value to set the attribute db_configuration to.
  #
  # source://data_migrate//lib/data_migrate/config.rb#15
  def db_configuration=(_arg0); end

  # Returns the value of attribute spec_name.
  #
  # source://data_migrate//lib/data_migrate/config.rb#15
  def spec_name; end

  # Sets the attribute spec_name
  #
  # @param value the value to set the attribute spec_name to.
  #
  # source://data_migrate//lib/data_migrate/config.rb#15
  def spec_name=(_arg0); end
end

# source://data_migrate//lib/data_migrate/config.rb#17
DataMigrate::Config::DEFAULT_DATA_TEMPLATE_PATH = T.let(T.unsafe(nil), String)

# Provides the definition method for data_schema.rb
#
# source://data_migrate//lib/data_migrate/data_schema.rb#10
class DataMigrate::Data < ::ActiveRecord::Schema
  # This method is based on the following two methods
  #   ActiveRecord::Schema#define
  #   ActiveRecord::ConnectionAdapters::SchemaStatements
  #     #assume_migrated_upto_version
  #
  # source://data_migrate//lib/data_migrate/data_schema.rb#11
  def define(info); end

  private

  # source://data_migrate//lib/data_migrate/data_schema.rb#42
  def insert(version); end

  # source://data_migrate//lib/data_migrate/data_schema.rb#27
  def migrated; end

  # source://data_migrate//lib/data_migrate/data_schema.rb#55
  def sm_table; end

  # source://data_migrate//lib/data_migrate/data_schema.rb#59
  def table_name; end

  # source://data_migrate//lib/data_migrate/data_schema.rb#31
  def versions; end
end

# source://data_migrate//lib/data_migrate/data_migrator.rb#7
class DataMigrate::DataMigrator < ::ActiveRecord::Migrator
  # @return [DataMigrator] a new instance of DataMigrator
  #
  # source://data_migrate//lib/data_migrate/data_migrator.rb#16
  def initialize(direction, migrations, target_version = T.unsafe(nil)); end

  # source://data_migrate//lib/data_migrate/data_migrator.rb#28
  def load_migrated; end

  private

  # source://data_migrate//lib/data_migrate/data_migrator.rb#79
  def record_version_state_after_migrating(version); end

  class << self
    # source://data_migrate//lib/data_migrate/data_migrator.rb#12
    def create_data_schema_table; end

    # source://data_migrate//lib/data_migrate/data_migrator.rb#34
    def current_version; end

    # Provides the full migrations_path filepath
    #
    # @return [String]
    #
    # source://data_migrate//lib/data_migrate/data_migrator.rb#53
    def full_migrations_path; end

    # Compares the given filename with what we expect data migration
    # filenames to be, eg the "20091231235959_some_name.rb" pattern
    #
    # @param filename [String]
    # @return [MatchData]
    #
    # source://data_migrate//lib/data_migrate/data_migrator.rb#43
    def match(filename); end

    # TODO: this was added to be backward compatible, need to re-evaluate
    #
    # source://data_migrate//lib/data_migrate/data_migrator.rb#62
    def migrations(_migrations_paths); end

    # source://data_migrate//lib/data_migrate/data_migrator.rb#8
    def migrations_paths; end

    # source://data_migrate//lib/data_migrate/data_migrator.rb#57
    def migrations_status; end

    # @return [Boolean]
    #
    # source://data_migrate//lib/data_migrate/data_migrator.rb#47
    def needs_migration?; end

    # source://data_migrate//lib/data_migrate/data_migrator.rb#72
    def rollback(migrations_path, steps); end

    # TODO: this was added to be backward compatible, need to re-evaluate
    #
    # source://data_migrate//lib/data_migrate/data_migrator.rb#68
    def run(direction, migration_paths, version); end
  end
end

# source://data_migrate//lib/data_migrate/data_schema_migration.rb#2
class DataMigrate::DataSchemaMigration
  class << self
    # source://data_migrate//lib/data_migrate/data_schema_migration.rb#4
    def create(*_arg0, **_arg1, &_arg2); end

    # source://data_migrate//lib/data_migrate/data_schema_migration.rb#4
    def create!(*_arg0, **_arg1, &_arg2); end

    # source://data_migrate//lib/data_migrate/data_schema_migration.rb#4
    def create_table(*_arg0, **_arg1, &_arg2); end

    # source://data_migrate//lib/data_migrate/data_schema_migration.rb#4
    def exists?(*_arg0, **_arg1, &_arg2); end

    # source://data_migrate//lib/data_migrate/data_schema_migration.rb#6
    def instance; end

    # source://data_migrate//lib/data_migrate/data_schema_migration.rb#4
    def normalized_versions(*_arg0, **_arg1, &_arg2); end

    # source://data_migrate//lib/data_migrate/data_schema_migration.rb#4
    def primary_key(*_arg0, **_arg1, &_arg2); end

    # source://data_migrate//lib/data_migrate/data_schema_migration.rb#4
    def table_exists?(*_arg0, **_arg1, &_arg2); end

    # source://data_migrate//lib/data_migrate/data_schema_migration.rb#4
    def table_name(*_arg0, **_arg1, &_arg2); end

    # source://data_migrate//lib/data_migrate/data_schema_migration.rb#4
    def where(*_arg0, **_arg1, &_arg2); end
  end
end

# This class extends DatabaseTasks to add a schema_file method.
#
# source://data_migrate//lib/data_migrate/database_tasks.rb#8
class DataMigrate::DatabaseTasks
  extend ::ActiveRecord::Tasks::DatabaseTasks

  class << self
    # source://data_migrate//lib/data_migrate/database_tasks.rb#31
    def check_schema_file(filename); end

    # source://data_migrate//lib/data_migrate/database_tasks.rb#53
    def data_migrations_path; end

    # This method is removed in Rails 7.0
    #
    # source://data_migrate//lib/data_migrate/database_tasks.rb#21
    def dump_filename(spec_name, format = T.unsafe(nil)); end

    # source://data_migrate//lib/data_migrate/database_tasks.rb#88
    def forward(step = T.unsafe(nil)); end

    # source://data_migrate//lib/data_migrate/database_tasks.rb#112
    def past_migrations(sort = T.unsafe(nil)); end

    # source://data_migrate//lib/data_migrate/database_tasks.rb#102
    def pending_data_migrations; end

    # source://data_migrate//lib/data_migrate/database_tasks.rb#38
    def pending_migrations; end

    # source://data_migrate//lib/data_migrate/database_tasks.rb#108
    def pending_schema_migrations; end

    # source://data_migrate//lib/data_migrate/database_tasks.rb#57
    def run_migration(migration, direction); end

    # source://data_migrate//lib/data_migrate/database_tasks.rb#71
    def schema_dump_path(db_config, format = T.unsafe(nil)); end

    # source://data_migrate//lib/data_migrate/database_tasks.rb#12
    def schema_file(_format = T.unsafe(nil)); end

    # source://data_migrate//lib/data_migrate/database_tasks.rb#16
    def schema_file_type(_format = T.unsafe(nil)); end

    # Override this method from `ActiveRecord::Tasks::DatabaseTasks`
    # to ensure that the sha saved in ar_internal_metadata table
    # is from the original schema.rb file
    #
    # source://data_migrate//lib/data_migrate/database_tasks.rb#83
    def schema_sha1(file); end

    # source://data_migrate//lib/data_migrate/database_tasks.rb#45
    def sort_migrations(*migrations); end

    # source://data_migrate//lib/data_migrate/database_tasks.rb#49
    def sort_string(migration); end
  end
end

# source://data_migrate//lib/data_migrate/legacy_migrator.rb#2
class DataMigrate::LegacyMigrator
  # @return [LegacyMigrator] a new instance of LegacyMigrator
  #
  # source://data_migrate//lib/data_migrate/legacy_migrator.rb#3
  def initialize(migrations_paths = T.unsafe(nil)); end

  # source://data_migrate//lib/data_migrate/legacy_migrator.rb#7
  def migrate; end
end

# source://data_migrate//lib/data_migrate/migration_context.rb#2
class DataMigrate::MigrationContext < ::ActiveRecord::MigrationContext
  # @return [MigrationContext] a new instance of MigrationContext
  #
  # source://data_migrate//lib/data_migrate/migration_context.rb#3
  def initialize(migrations_paths = T.unsafe(nil)); end

  # source://data_migrate//lib/data_migrate/migration_context.rb#32
  def current_version; end

  # source://data_migrate//lib/data_migrate/migration_context.rb#17
  def down(target_version = T.unsafe(nil)); end

  # source://data_migrate//lib/data_migrate/migration_context.rb#37
  def migration_files; end

  # source://data_migrate//lib/data_migrate/migration_context.rb#42
  def migrations_status; end

  # source://data_migrate//lib/data_migrate/migration_context.rb#28
  def run(direction, target_version); end

  # source://data_migrate//lib/data_migrate/migration_context.rb#7
  def up(target_version = T.unsafe(nil)); end

  private

  # source://data_migrate//lib/data_migrate/migration_context.rb#62
  def get_all_versions; end

  # source://data_migrate//lib/data_migrate/migration_context.rb#70
  def move(direction, steps); end
end

# source://data_migrate//lib/data_migrate/railtie.rb#2
class DataMigrate::Railtie < ::Rails::Railtie; end

# Provides the capability to write the current data schema version to
# the data_schema file Based on ActiveRecord::SchemaDumper
#
# source://data_migrate//lib/data_migrate/schema_dumper.rb#7
class DataMigrate::SchemaDumper
  # @return [SchemaDumper] a new instance of SchemaDumper
  #
  # source://data_migrate//lib/data_migrate/schema_dumper.rb#27
  def initialize(connection); end

  # source://data_migrate//lib/data_migrate/schema_dumper.rb#17
  def dump(stream); end

  class << self
    # source://data_migrate//lib/data_migrate/schema_dumper.rb#11
    def dump(connection = T.unsafe(nil), stream = T.unsafe(nil)); end

    private

    def new(*_arg0); end
  end
end

# Helper class to getting access to db schema
# to allow data/schema combiation tasks
#
# source://data_migrate//lib/data_migrate/schema_migration.rb#6
class DataMigrate::SchemaMigration
  class << self
    # source://data_migrate//lib/data_migrate/schema_migration.rb#25
    def migrations_paths; end

    # source://data_migrate//lib/data_migrate/schema_migration.rb#7
    def pending_schema_migrations; end

    # source://data_migrate//lib/data_migrate/schema_migration.rb#16
    def run(direction, migration_paths, version); end

    # source://data_migrate//lib/data_migrate/schema_migration.rb#20
    def sort_migrations(set1, set2 = T.unsafe(nil)); end

    # source://data_migrate//lib/data_migrate/schema_migration.rb#36
    def sort_string(migration); end
  end
end

# source://data_migrate//lib/data_migrate/status_service.rb#4
class DataMigrate::StatusService
  # @return [StatusService] a new instance of StatusService
  #
  # source://data_migrate//lib/data_migrate/status_service.rb#12
  def initialize(connection); end

  # source://data_migrate//lib/data_migrate/status_service.rb#20
  def dump(stream); end

  # source://data_migrate//lib/data_migrate/status_service.rb#16
  def root_folder; end

  private

  # source://data_migrate//lib/data_migrate/status_service.rb#46
  def database_name; end

  # source://data_migrate//lib/data_migrate/status_service.rb#54
  def db_list; end

  # source://data_migrate//lib/data_migrate/status_service.rb#30
  def output(stream); end

  # source://data_migrate//lib/data_migrate/status_service.rb#26
  def table_name; end

  class << self
    # source://data_migrate//lib/data_migrate/status_service.rb#6
    def dump(connection = T.unsafe(nil), stream = T.unsafe(nil)); end
  end
end

# source://data_migrate//lib/data_migrate/tasks/data_migrate_tasks.rb#4
module DataMigrate::Tasks; end

# source://data_migrate//lib/data_migrate/tasks/data_migrate_tasks.rb#5
module DataMigrate::Tasks::DataMigrateTasks
  extend ::DataMigrate::Tasks::DataMigrateTasks

  # source://data_migrate//lib/data_migrate/tasks/data_migrate_tasks.rb#29
  def abort_if_pending_migrations(migrations, message); end

  # source://data_migrate//lib/data_migrate/tasks/data_migrate_tasks.rb#12
  def dump; end

  # @return [Boolean]
  #
  # source://data_migrate//lib/data_migrate/tasks/data_migrate_tasks.rb#39
  def dump_schema_after_migration?; end

  # source://data_migrate//lib/data_migrate/tasks/data_migrate_tasks.rb#22
  def migrate; end

  # source://data_migrate//lib/data_migrate/tasks/data_migrate_tasks.rb#8
  def migrations_paths; end

  # source://data_migrate//lib/data_migrate/tasks/data_migrate_tasks.rb#47
  def status; end

  # source://data_migrate//lib/data_migrate/tasks/data_migrate_tasks.rb#51
  def status_with_schema; end

  private

  # source://data_migrate//lib/data_migrate/tasks/data_migrate_tasks.rb#96
  def database_name; end
end
