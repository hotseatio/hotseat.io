# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `opensearch-ruby` gem.
# Please instead update this file by running `bin/tapioca gem opensearch-ruby`.

# source://opensearch-ruby//lib/opensearch/version.rb#27
module OpenSearch; end

# source://opensearch-ruby//lib/opensearch/api/namespace/common.rb#28
module OpenSearch::API
  class << self
    # Auto-include all namespaces in the receiver
    #
    # source://opensearch-ruby//lib/opensearch/api.rb#74
    def included(base); end

    # The serializer class
    #
    # source://opensearch-ruby//lib/opensearch/api.rb#95
    def serializer; end

    # Access the module settings
    #
    # source://opensearch-ruby//lib/opensearch/api.rb#100
    def settings; end
  end
end

# source://opensearch-ruby//lib/opensearch/api/actions/params_registry.rb#29
module OpenSearch::API::Actions
  # Abort a running benchmark
  #
  # @example
  #
  #   client.abort_benchmark name: 'my_benchmark'
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/abort_benchmark.rb#39
  def abort_benchmark(arguments = T.unsafe(nil)); end

  # Run a single query, or a set of queries, and return statistics on their performance
  #
  # @example Return statistics for a single query
  #
  #   client.benchmark body: {
  #   name: 'my_benchmark',
  #   competitors: [
  #   {
  #   name: 'query_1',
  #   requests: [
  #   { query: { match: { _all: 'a*' } } }
  #   ]
  #   }
  #   ]
  #   }
  # @example Return statistics for a set of "competing" queries
  #
  #   client.benchmark body: {
  #   name: 'my_benchmark',
  #   competitors: [
  #   {
  #   name: 'query_a',
  #   requests: [
  #   { query: { match: { _all: 'a*' } } }
  #   ]
  #   },
  #   {
  #   name: 'query_b',
  #   requests: [
  #   { query: { match: { _all: 'b*' } } }
  #   ]
  #   }
  #   ]
  #   }
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/benchmark.rb#73
  def benchmark(arguments = T.unsafe(nil)); end

  # Allows to perform multiple index/update/delete operations in a single request.
  #
  # or the conveniency "combined" format can be passed, refer to OpenSearch::API::Utils.__bulkify documentation.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/bulk.rb#47
  def bulk(arguments = T.unsafe(nil)); end

  # Explicitly clears the search context for a scroll.
  #
  # *Deprecation notice*:
  # A scroll id can be quite large and should be specified as part of the body
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/clear_scroll.rb#42
  def clear_scroll(arguments = T.unsafe(nil)); end

  # Returns number of documents matching a query.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/count.rb#56
  def count(arguments = T.unsafe(nil)); end

  # Creates a new document in the index.
  #
  # Returns a 409 response when a document with a same ID already exists in the index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/create.rb#51
  def create(arguments = T.unsafe(nil)); end

  # Creates a point in time.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/create_pit.rb#21
  def create_pit(arguments = T.unsafe(nil)); end

  # Removes a document from the index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/delete.rb#50
  def delete(arguments = T.unsafe(nil)); end

  # Deletes all PITs.
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/delete_all_pits.rb#14
  def delete_all_pits(arguments = T.unsafe(nil)); end

  # Deletes documents matching the provided query.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/delete_by_query.rb#75
  def delete_by_query(arguments = T.unsafe(nil)); end

  # The value of requests_per_second can be changed on a running delete by query using the _rethrottle API
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/delete_by_rethrottle.rb#36
  def delete_by_query_rethrottle(arguments = T.unsafe(nil)); end

  # Deletes one or several PITs.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/delete_pit.rb#16
  def delete_pit(arguments = T.unsafe(nil)); end

  # Deletes a script.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/delete_script.rb#39
  def delete_script(arguments = T.unsafe(nil)); end

  # Returns information about whether a document exists in an index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/exists.rb#52
  def exists(arguments = T.unsafe(nil)); end

  # Returns information about whether a document exists in an index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/exists.rb#52
  def exists?(arguments = T.unsafe(nil)); end

  # Returns information about whether a document source exists in an index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/exists_source.rb#51
  def exists_source(arguments = T.unsafe(nil)); end

  # Returns information about whether a document source exists in an index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/exists_source.rb#51
  def exists_source?(arguments = T.unsafe(nil)); end

  # Returns information about why a specific matches (or doesn't match) a query.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/explain.rb#55
  def explain(arguments = T.unsafe(nil)); end

  # Returns the information about the capabilities of fields among multiple indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/field_caps.rb#42
  def field_caps(arguments = T.unsafe(nil)); end

  # Returns a document.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/get.rb#52
  def get(arguments = T.unsafe(nil)); end

  # Gets all PITs.
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/get_all_pits.rb#14
  def get_all_pits(arguments = T.unsafe(nil)); end

  # Returns a script.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/get_script.rb#38
  def get_script(arguments = T.unsafe(nil)); end

  # Returns all script contexts.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/get_script_context.rb#39
  def get_script_context(arguments = T.unsafe(nil)); end

  # Returns available script types, languages and contexts
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/get_script_languages.rb#39
  def get_script_languages(arguments = T.unsafe(nil)); end

  # Returns the source of a document.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/get_source.rb#51
  def get_source(arguments = T.unsafe(nil)); end

  # Creates or updates a document in an index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/index.rb#54
  def index(arguments = T.unsafe(nil)); end

  # Returns basic information about the cluster.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/info.rb#35
  def info(arguments = T.unsafe(nil)); end

  # Allows to get multiple documents in one request.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/mget.rb#50
  def mget(arguments = T.unsafe(nil)); end

  # Allows to execute several search operations in one request.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/msearch.rb#49
  def msearch(arguments = T.unsafe(nil)); end

  # Allows to execute several search template operations in one request.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/msearch_template.rb#47
  def msearch_template(arguments = T.unsafe(nil)); end

  # Returns multiple termvectors in one request.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/mtermvectors.rb#54
  def mtermvectors(arguments = T.unsafe(nil)); end

  # Returns whether the cluster is running.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/ping.rb#35
  def ping(arguments = T.unsafe(nil)); end

  # Creates or updates a script.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/put_script.rb#41
  def put_script(arguments = T.unsafe(nil)); end

  # Allows to evaluate the quality of ranked search results over a set of typical search queries
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/rank_eval.rb#45
  def rank_eval(arguments = T.unsafe(nil)); end

  # Allows to copy documents from one index to another, optionally filtering the source
  # documents by a query, changing the destination index settings, or fetching the
  # documents from a remote cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/reindex.rb#46
  def reindex(arguments = T.unsafe(nil)); end

  # Changes the number of requests per second for a particular Reindex operation.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/reindex_rethrottle.rb#37
  def reindex_rethrottle(arguments = T.unsafe(nil)); end

  # Allows to use the Mustache language to pre-render a search definition.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/render_search_template.rb#37
  def render_search_template(arguments = T.unsafe(nil)); end

  # Allows an arbitrary script to be executed and a result to be returned
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/scripts_painless_execute.rb#40
  def scripts_painless_execute(arguments = T.unsafe(nil)); end

  # Allows to retrieve a large numbers of results from a single search request.
  #
  # *Deprecation notice*:
  # A scroll id can be quite large and should be specified as part of the body
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/scroll.rb#44
  def scroll(arguments = T.unsafe(nil)); end

  # Returns results matching a query.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/search.rb#85
  def search(arguments = T.unsafe(nil)); end

  # Returns information about the indices and shards that a search request would be executed against.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/search_shards.rb#42
  def search_shards(arguments = T.unsafe(nil)); end

  # Allows to use the Mustache language to pre-render a search definition.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/search_template.rb#55
  def search_template(arguments = T.unsafe(nil)); end

  # Deprecated: Use the plural version, {#termvectors}
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/termvectors.rb#86
  def termvector(arguments = T.unsafe(nil)); end

  # Returns information and statistics about terms in the fields of a particular document.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/termvectors.rb#54
  def termvectors(arguments = T.unsafe(nil)); end

  # Updates a document with a script or partial document.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/update.rb#55
  def update(arguments = T.unsafe(nil)); end

  # Performs an update on every document in the index without changing the source,
  # for example to pick up a mapping change.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/update_by_query.rb#78
  def update_by_query(arguments = T.unsafe(nil)); end

  # Changes the number of requests per second for a particular Update By Query operation.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/update_by_query_rethrottle.rb#37
  def update_by_query_rethrottle(arguments = T.unsafe(nil)); end
end

# source://opensearch-ruby//lib/opensearch/api/actions/params_registry.rb#30
module OpenSearch::API::Actions::ParamsRegistry
  extend ::OpenSearch::API::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/params_registry.rb#61
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/params_registry.rb#47
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://opensearch-ruby//lib/opensearch/api/actions/params_registry.rb#36
OpenSearch::API::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# source://opensearch-ruby//lib/opensearch/api.rb#44
OpenSearch::API::COMMON_PARAMS = T.let(T.unsafe(nil), Array)

# source://opensearch-ruby//lib/opensearch/api.rb#53
OpenSearch::API::COMMON_QUERY_PARAMS = T.let(T.unsafe(nil), Array)

# source://opensearch-ruby//lib/opensearch/api/actions/cat/params_registry.rb#29
module OpenSearch::API::Cat
  # Proxy method for {CatClient}, available in the receiving object
  #
  # source://opensearch-ruby//lib/opensearch/api/namespace/cat.rb#42
  def cat; end
end

# source://opensearch-ruby//lib/opensearch/api/actions/cat/params_registry.rb#30
module OpenSearch::API::Cat::Actions
  # Shows information about currently configured aliases to indices including filter and routing infos.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/aliases.rb#44
  def aliases(arguments = T.unsafe(nil)); end

  # Retrieves info of all PIT segments
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/all_pit_segments.rb#22
  def all_pit_segments(arguments = T.unsafe(nil)); end

  # Provides a snapshot of how many shards are allocated to each data node and how much disk space they are using.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/allocation.rb#46
  def allocation(arguments = T.unsafe(nil)); end

  # Returns information about the cluster_manager node.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/cluster_manager.rb#26
  def cluster_manager(arguments = T.unsafe(nil)); end

  # Provides quick access to the document count of the entire cluster, or individual indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/count.rb#42
  def count(arguments = T.unsafe(nil)); end

  # Shows how much heap memory is currently being used by fielddata on every data node in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/fielddata.rb#43
  def fielddata(arguments = T.unsafe(nil)); end

  # Returns a concise representation of the cluster health.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/health.rb#43
  def health(arguments = T.unsafe(nil)); end

  # Returns help for the Cat APIs.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/help.rb#38
  def help(arguments = T.unsafe(nil)); end

  # Returns information about indices: number of primaries and replicas, document counts, disk size, ...
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/indices.rb#51
  def indices(arguments = T.unsafe(nil)); end

  # Returns information about the master node.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/master.rb#44
  def master(arguments = T.unsafe(nil)); end

  # Returns information about custom node attributes.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/nodeattrs.rb#44
  def nodeattrs(arguments = T.unsafe(nil)); end

  # Returns basic statistics about performance of cluster nodes.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/nodes.rb#48
  def nodes(arguments = T.unsafe(nil)); end

  # Returns a concise representation of the cluster pending tasks.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/pending_tasks.rb#45
  def pending_tasks(arguments = T.unsafe(nil)); end

  # Retrieves info of certain PIT segments
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/pit_segments.rb#23
  def pit_segments(arguments = T.unsafe(nil)); end

  # Returns information about installed plugins across nodes node.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/plugins.rb#45
  def plugins(arguments = T.unsafe(nil)); end

  # Returns information about index shard recoveries, both on-going completed.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/recovery.rb#46
  def recovery(arguments = T.unsafe(nil)); end

  # Returns information about snapshot repositories registered in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/repositories.rb#44
  def repositories(arguments = T.unsafe(nil)); end

  # Provides low-level information about the segments in the shards of an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/segments.rb#43
  def segments(arguments = T.unsafe(nil)); end

  # Provides a detailed view of shard allocation on nodes.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/shards.rb#47
  def shards(arguments = T.unsafe(nil)); end

  # Returns all snapshots in a specific repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/snapshots.rb#46
  def snapshots(arguments = T.unsafe(nil)); end

  # Returns information about the tasks currently executing on one or more nodes in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/tasks.rb#46
  def tasks(arguments = T.unsafe(nil)); end

  # Returns information about existing templates.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/templates.rb#45
  def templates(arguments = T.unsafe(nil)); end

  # Returns cluster-wide thread pool statistics per node.
  # By default the active, queue and rejected statistics are returned for all thread pools.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/thread_pool.rb#47
  def thread_pool(arguments = T.unsafe(nil)); end
end

# source://opensearch-ruby//lib/opensearch/api/actions/cat/params_registry.rb#31
module OpenSearch::API::Cat::Actions::ParamsRegistry
  extend ::OpenSearch::API::Cat::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/params_registry.rb#62
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cat/params_registry.rb#48
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://opensearch-ruby//lib/opensearch/api/actions/cat/params_registry.rb#37
OpenSearch::API::Cat::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "cat" namespace (includes the {Cat::Actions} methods)
#
# source://opensearch-ruby//lib/opensearch/api/namespace/cat.rb#34
class OpenSearch::API::Cat::CatClient
  include ::OpenSearch::API::Cat::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

# source://opensearch-ruby//lib/opensearch/api/actions/cluster/params_registry.rb#29
module OpenSearch::API::Cluster
  # Proxy method for {ClusterClient}, available in the receiving object
  #
  # source://opensearch-ruby//lib/opensearch/api/namespace/cluster.rb#42
  def cluster; end
end

# source://opensearch-ruby//lib/opensearch/api/actions/cluster/params_registry.rb#30
module OpenSearch::API::Cluster::Actions
  # Provides explanations for shard allocations in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cluster/allocation_explain.rb#39
  def allocation_explain(arguments = T.unsafe(nil)); end

  # Deletes a component template
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cluster/delete_component_template.rb#40
  def delete_component_template(arguments = T.unsafe(nil)); end

  # Clears cluster voting config exclusions.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cluster/delete_voting_config_exclusions.rb#37
  def delete_voting_config_exclusions(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular component template exist
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cluster/exists_component_template.rb#40
  def exists_component_template(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular component template exist
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cluster/exists_component_template.rb#40
  def exists_component_template?(arguments = T.unsafe(nil)); end

  # Returns one or more component templates
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cluster/get_component_template.rb#40
  def get_component_template(arguments = T.unsafe(nil)); end

  # Returns cluster settings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cluster/get_settings.rb#41
  def get_settings(arguments = T.unsafe(nil)); end

  # Returns basic information about the health of the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cluster/health.rb#49
  def health(arguments = T.unsafe(nil)); end

  # Returns a list of any cluster-level changes (e.g. create index, update mapping,
  # allocate or fail shard) which have not yet been executed.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cluster/pending_tasks.rb#40
  def pending_tasks(arguments = T.unsafe(nil)); end

  # Updates the cluster voting config exclusions by node ids or node names.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cluster/post_voting_config_exclusions.rb#39
  def post_voting_config_exclusions(arguments = T.unsafe(nil)); end

  # Creates or updates a component template
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cluster/put_component_template.rb#42
  def put_component_template(arguments = T.unsafe(nil)); end

  # Updates the cluster settings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cluster/put_settings.rb#41
  def put_settings(arguments = T.unsafe(nil)); end

  # Returns the information about configured remote clusters.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cluster/remote_info.rb#36
  def remote_info(arguments = T.unsafe(nil)); end

  # Allows to manually change the allocation of individual shards in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cluster/reroute.rb#44
  def reroute(arguments = T.unsafe(nil)); end

  # Returns a comprehensive information about the state of the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cluster/state.rb#47
  def state(arguments = T.unsafe(nil)); end

  # Returns high-level overview of cluster statistics.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cluster/stats.rb#39
  def stats(arguments = T.unsafe(nil)); end
end

# source://opensearch-ruby//lib/opensearch/api/actions/cluster/params_registry.rb#31
module OpenSearch::API::Cluster::Actions::ParamsRegistry
  extend ::OpenSearch::API::Cluster::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cluster/params_registry.rb#62
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/cluster/params_registry.rb#48
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://opensearch-ruby//lib/opensearch/api/actions/cluster/params_registry.rb#37
OpenSearch::API::Cluster::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "cluster" namespace (includes the {Cluster::Actions} methods)
#
# source://opensearch-ruby//lib/opensearch/api/namespace/cluster.rb#34
class OpenSearch::API::Cluster::ClusterClient
  include ::OpenSearch::API::Cluster::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

# source://opensearch-ruby//lib/opensearch/api/namespace/common.rb#29
module OpenSearch::API::Common; end

# source://opensearch-ruby//lib/opensearch/api/namespace/common.rb#30
module OpenSearch::API::Common::Actions; end

# source://opensearch-ruby//lib/opensearch/api/namespace/common.rb#32
module OpenSearch::API::Common::Client
  # Delegates the `perform_request` method to the wrapped client
  #
  # source://opensearch-ruby//lib/opensearch/api/namespace/common.rb#45
  def perform_request(method, path, params = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil)); end

  # source://opensearch-ruby//lib/opensearch/api/namespace/common.rb#55
  def perform_request_complex_ignore404(method, path, params, body, headers, arguments); end

  # source://opensearch-ruby//lib/opensearch/api/namespace/common.rb#63
  def perform_request_ping(method, path, params, body, headers); end

  # source://opensearch-ruby//lib/opensearch/api/namespace/common.rb#49
  def perform_request_simple_ignore404(method, path, params, body, headers); end
end

# Base client wrapper
#
# source://opensearch-ruby//lib/opensearch/api/namespace/common.rb#35
module OpenSearch::API::Common::Client::Base
  # source://opensearch-ruby//lib/opensearch/api/namespace/common.rb#38
  def initialize(client); end

  # Returns the value of attribute client.
  #
  # source://opensearch-ruby//lib/opensearch/api/namespace/common.rb#36
  def client; end
end

# source://opensearch-ruby//lib/opensearch/api.rb#71
OpenSearch::API::DEFAULT_DOC = T.let(T.unsafe(nil), String)

# source://opensearch-ruby//lib/opensearch/api.rb#42
OpenSearch::API::DEFAULT_SERIALIZER = MultiJson

# source://opensearch-ruby//lib/opensearch/api/actions/dangling_indices/params_registry.rb#29
module OpenSearch::API::DanglingIndices
  # Proxy method for {DanglingIndicesClient}, available in the receiving object
  #
  # source://opensearch-ruby//lib/opensearch/api/namespace/dangling_indices.rb#42
  def dangling_indices; end
end

# source://opensearch-ruby//lib/opensearch/api/actions/dangling_indices/params_registry.rb#30
module OpenSearch::API::DanglingIndices::Actions
  # Deletes the specified dangling index
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/dangling_indices/delete_dangling_index.rb#41
  def delete_dangling_index(arguments = T.unsafe(nil)); end

  # Imports the specified dangling index
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/dangling_indices/import_dangling_index.rb#40
  def import_dangling_index(arguments = T.unsafe(nil)); end

  # Returns all dangling indices.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/dangling_indices/list_dangling_indices.rb#36
  def list_dangling_indices(arguments = T.unsafe(nil)); end
end

# source://opensearch-ruby//lib/opensearch/api/actions/dangling_indices/params_registry.rb#31
module OpenSearch::API::DanglingIndices::Actions::ParamsRegistry
  extend ::OpenSearch::API::DanglingIndices::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/dangling_indices/params_registry.rb#62
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/dangling_indices/params_registry.rb#48
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://opensearch-ruby//lib/opensearch/api/actions/dangling_indices/params_registry.rb#37
OpenSearch::API::DanglingIndices::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "dangling_indices" namespace (includes the {DanglingIndices::Actions} methods)
#
# source://opensearch-ruby//lib/opensearch/api/namespace/dangling_indices.rb#34
class OpenSearch::API::DanglingIndices::DanglingIndicesClient
  include ::OpenSearch::API::DanglingIndices::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

# source://opensearch-ruby//lib/opensearch/api/actions/features/params_registry.rb#29
module OpenSearch::API::Features
  # Proxy method for {FeaturesClient}, available in the receiving object
  #
  # source://opensearch-ruby//lib/opensearch/api/namespace/features.rb#42
  def features; end
end

# source://opensearch-ruby//lib/opensearch/api/actions/features/params_registry.rb#30
module OpenSearch::API::Features::Actions
  # Gets a list of features which can be included in snapshots using the feature_states field when creating a snapshot
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/features/get_features.rb#38
  def get_features(arguments = T.unsafe(nil)); end

  # Resets the internal state of features, usually by deleting system indices
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/features/reset_features.rb#40
  def reset_features(arguments = T.unsafe(nil)); end
end

# source://opensearch-ruby//lib/opensearch/api/actions/features/params_registry.rb#31
module OpenSearch::API::Features::Actions::ParamsRegistry
  extend ::OpenSearch::API::Features::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/features/params_registry.rb#62
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/features/params_registry.rb#48
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://opensearch-ruby//lib/opensearch/api/actions/features/params_registry.rb#37
OpenSearch::API::Features::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "features" namespace (includes the {Features::Actions} methods)
#
# source://opensearch-ruby//lib/opensearch/api/namespace/features.rb#34
class OpenSearch::API::Features::FeaturesClient
  include ::OpenSearch::API::Features::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

# source://opensearch-ruby//lib/opensearch/api.rb#67
OpenSearch::API::HTTP_DELETE = T.let(T.unsafe(nil), String)

# source://opensearch-ruby//lib/opensearch/api.rb#62
OpenSearch::API::HTTP_GET = T.let(T.unsafe(nil), String)

# source://opensearch-ruby//lib/opensearch/api.rb#63
OpenSearch::API::HTTP_HEAD = T.let(T.unsafe(nil), String)

# source://opensearch-ruby//lib/opensearch/api.rb#64
OpenSearch::API::HTTP_PATCH = T.let(T.unsafe(nil), String)

# source://opensearch-ruby//lib/opensearch/api.rb#65
OpenSearch::API::HTTP_POST = T.let(T.unsafe(nil), String)

# source://opensearch-ruby//lib/opensearch/api.rb#66
OpenSearch::API::HTTP_PUT = T.let(T.unsafe(nil), String)

# source://opensearch-ruby//lib/opensearch/api/actions/http/connect.rb#14
module OpenSearch::API::Http
  # Proxy method for HttpClient, available in the receiving object
  #
  # source://opensearch-ruby//lib/opensearch/api/namespace/http.rb#25
  def http; end
end

# source://opensearch-ruby//lib/opensearch/api/actions/http/connect.rb#15
module OpenSearch::API::Http::Actions
  # Make a customized CONNECT request.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/http/connect.rb#22
  def connect(url, headers: T.unsafe(nil), body: T.unsafe(nil), params: T.unsafe(nil)); end

  # Make a customized DELETE request.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/http/delete.rb#22
  def delete(url, headers: T.unsafe(nil), body: T.unsafe(nil), params: T.unsafe(nil)); end

  # Make a customized GET request.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/http/get.rb#22
  def get(url, headers: T.unsafe(nil), body: T.unsafe(nil), params: T.unsafe(nil)); end

  # Make a customized HEAD request.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/http/head.rb#22
  def head(url, headers: T.unsafe(nil), body: T.unsafe(nil), params: T.unsafe(nil)); end

  # Make a customized OPTIONS request.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/http/options.rb#22
  def options(url, headers: T.unsafe(nil), body: T.unsafe(nil), params: T.unsafe(nil)); end

  # Make a customized PATCH request.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/http/patch.rb#22
  def patch(url, headers: T.unsafe(nil), body: T.unsafe(nil), params: T.unsafe(nil)); end

  # Make a customized POST request.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/http/post.rb#22
  def post(url, headers: T.unsafe(nil), body: T.unsafe(nil), params: T.unsafe(nil)); end

  # Make a customized PUT request.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/http/put.rb#22
  def put(url, headers: T.unsafe(nil), body: T.unsafe(nil), params: T.unsafe(nil)); end

  # Make a customized TRACE request.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/http/trace.rb#22
  def trace(url, headers: T.unsafe(nil), body: T.unsafe(nil), params: T.unsafe(nil)); end

  private

  # source://opensearch-ruby//lib/opensearch/api/actions/http/request.rb#18
  def request(method, url, headers: T.unsafe(nil), body: T.unsafe(nil), params: T.unsafe(nil)); end
end

# Client for the "http" namespace (includes the Http::Actions methods)
#
# source://opensearch-ruby//lib/opensearch/api/namespace/http.rb#18
class OpenSearch::API::Http::HttpClient
  include ::OpenSearch::API::Http::Actions
  include ::OpenSearch::API::Common::Client
  include ::OpenSearch::API::Common::Client::Base
end

# source://opensearch-ruby//lib/opensearch/api/actions/indices/params_registry.rb#29
module OpenSearch::API::Indices
  # Proxy method for {IndicesClient}, available in the receiving object
  #
  # source://opensearch-ruby//lib/opensearch/api/namespace/indices.rb#42
  def indices; end
end

# source://opensearch-ruby//lib/opensearch/api/actions/indices/params_registry.rb#30
module OpenSearch::API::Indices::Actions
  # Adds a block to an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/add_block.rb#44
  def add_block(arguments = T.unsafe(nil)); end

  # Performs the analysis process on a text and return the tokens breakdown of the text.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/analyze.rb#38
  def analyze(arguments = T.unsafe(nil)); end

  # Clears all or specific caches for one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/clear_cache.rb#44
  def clear_cache(arguments = T.unsafe(nil)); end

  # Clones an index
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/clone.rb#43
  def clone(arguments = T.unsafe(nil)); end

  # Closes an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/close.rb#44
  def close(arguments = T.unsafe(nil)); end

  # Creates an index with optional settings and mappings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/create.rb#42
  def create(arguments = T.unsafe(nil)); end

  # Deletes an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/delete.rb#43
  def delete(arguments = T.unsafe(nil)); end

  # Deletes an alias.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/delete_alias.rb#41
  def delete_alias(arguments = T.unsafe(nil)); end

  # Deletes an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/delete_index_template.rb#40
  def delete_index_template(arguments = T.unsafe(nil)); end

  # Deletes an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/delete_template.rb#40
  def delete_template(arguments = T.unsafe(nil)); end

  # Analyzes the disk usage of each field of an index or data stream
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/disk_usage.rb#46
  def disk_usage(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/exists.rb#43
  def exists(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/exists.rb#43
  def exists?(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular alias exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/exists_alias.rb#42
  def exists_alias(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular alias exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/exists_alias.rb#42
  def exists_alias?(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index template exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/exists_index_template.rb#41
  def exists_index_template(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index template exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/exists_index_template.rb#41
  def exists_index_template?(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index template exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/exists_template.rb#41
  def exists_template(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index template exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/exists_template.rb#41
  def exists_template?(arguments = T.unsafe(nil)); end

  # Returns the field usage stats for each field of an index
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/field_usage_stats.rb#45
  def field_usage_stats(arguments = T.unsafe(nil)); end

  # Performs the flush operation on one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/flush.rb#42
  def flush(arguments = T.unsafe(nil)); end

  # Performs the force merge operation on one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/forcemerge.rb#43
  def forcemerge(arguments = T.unsafe(nil)); end

  # Returns information about one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/get.rb#45
  def get(arguments = T.unsafe(nil)); end

  # Returns an alias.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/get_alias.rb#42
  def get_alias(arguments = T.unsafe(nil)); end

  # Returns mapping for one or more fields.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/get_field_mapping.rb#48
  def get_field_mapping(arguments = T.unsafe(nil)); end

  # Returns an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/get_index_template.rb#41
  def get_index_template(arguments = T.unsafe(nil)); end

  # Returns mappings for one or more indices.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/get_mapping.rb#48
  def get_mapping(arguments = T.unsafe(nil)); end

  # Returns settings for one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/get_settings.rb#46
  def get_settings(arguments = T.unsafe(nil)); end

  # Returns an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/get_template.rb#41
  def get_template(arguments = T.unsafe(nil)); end

  # DEPRECATED Returns a progress status of current upgrade.
  #
  # *Deprecation notice*:
  # The _upgrade API is no longer useful and will be removed. Instead, see _reindex API.
  # Deprecated since version 8.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/get_upgrade.rb#45
  def get_upgrade(arguments = T.unsafe(nil)); end

  # Opens an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/open.rb#44
  def open(arguments = T.unsafe(nil)); end

  # Creates or updates an alias.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/put_alias.rb#42
  def put_alias(arguments = T.unsafe(nil)); end

  # Creates or updates an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/put_index_template.rb#42
  def put_index_template(arguments = T.unsafe(nil)); end

  # Updates the index mappings.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/put_mapping.rb#50
  def put_mapping(arguments = T.unsafe(nil)); end

  # Updates the index settings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/put_settings.rb#46
  def put_settings(arguments = T.unsafe(nil)); end

  # Creates or updates an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/put_template.rb#42
  def put_template(arguments = T.unsafe(nil)); end

  # Returns information about ongoing index shard recoveries.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/recovery.rb#39
  def recovery(arguments = T.unsafe(nil)); end

  # Performs the refresh operation in one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/refresh.rb#40
  def refresh(arguments = T.unsafe(nil)); end

  # Returns information about any matching indices, aliases, and data streams
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/resolve_index.rb#42
  def resolve_index(arguments = T.unsafe(nil)); end

  # Updates an alias to point to a new index when the existing index
  # is considered to be too large or too old.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/rollover.rb#45
  def rollover(arguments = T.unsafe(nil)); end

  # Provides low-level information about segments in a Lucene index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/segments.rb#41
  def segments(arguments = T.unsafe(nil)); end

  # Provides store information for shard copies of indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/shard_stores.rb#41
  def shard_stores(arguments = T.unsafe(nil)); end

  # Allow to shrink an existing index into a new index with fewer primary shards.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/shrink.rb#44
  def shrink(arguments = T.unsafe(nil)); end

  # Simulate matching the given index name against the index templates in the system
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/simulate_index_template.rb#42
  def simulate_index_template(arguments = T.unsafe(nil)); end

  # Simulate resolving the given template name or body
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/simulate_template.rb#42
  def simulate_template(arguments = T.unsafe(nil)); end

  # Allows you to split an existing index into a new index with more primary shards.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/split.rb#44
  def split(arguments = T.unsafe(nil)); end

  # Provides statistics on operations happening in an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/stats.rb#48
  def stats(arguments = T.unsafe(nil)); end

  # Updates index aliases.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/update_aliases.rb#40
  def update_aliases(arguments = T.unsafe(nil)); end

  # DEPRECATED Upgrades to the current version of Lucene.
  #
  # *Deprecation notice*:
  # The _upgrade API is no longer useful and will be removed. Instead, see _reindex API.
  # Deprecated since version 8.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/upgrade.rb#47
  def upgrade(arguments = T.unsafe(nil)); end

  # Allows a user to validate a potentially expensive query without executing it.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/validate_query.rb#55
  def validate_query(arguments = T.unsafe(nil)); end
end

# source://opensearch-ruby//lib/opensearch/api/actions/indices/params_registry.rb#31
module OpenSearch::API::Indices::Actions::ParamsRegistry
  extend ::OpenSearch::API::Indices::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/params_registry.rb#62
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/indices/params_registry.rb#48
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://opensearch-ruby//lib/opensearch/api/actions/indices/params_registry.rb#37
OpenSearch::API::Indices::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "indices" namespace (includes the {Indices::Actions} methods)
#
# source://opensearch-ruby//lib/opensearch/api/namespace/indices.rb#34
class OpenSearch::API::Indices::IndicesClient
  include ::OpenSearch::API::Indices::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

# source://opensearch-ruby//lib/opensearch/api/actions/ingest/params_registry.rb#29
module OpenSearch::API::Ingest
  # Proxy method for {IngestClient}, available in the receiving object
  #
  # source://opensearch-ruby//lib/opensearch/api/namespace/ingest.rb#42
  def ingest; end
end

# source://opensearch-ruby//lib/opensearch/api/actions/ingest/params_registry.rb#30
module OpenSearch::API::Ingest::Actions
  # Deletes a pipeline.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/ingest/delete_pipeline.rb#40
  def delete_pipeline(arguments = T.unsafe(nil)); end

  # Returns statistical information about geoip databases
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/ingest/geo_ip_stats.rb#36
  def geo_ip_stats(arguments = T.unsafe(nil)); end

  # Returns a pipeline.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/ingest/get_pipeline.rb#40
  def get_pipeline(arguments = T.unsafe(nil)); end

  # Returns a list of the built-in patterns.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/ingest/processor_grok.rb#36
  def processor_grok(arguments = T.unsafe(nil)); end

  # Creates or updates a pipeline.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/ingest/put_pipeline.rb#41
  def put_pipeline(arguments = T.unsafe(nil)); end

  # Allows to simulate a pipeline with example documents.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/ingest/simulate.rb#39
  def simulate(arguments = T.unsafe(nil)); end
end

# source://opensearch-ruby//lib/opensearch/api/actions/ingest/params_registry.rb#31
module OpenSearch::API::Ingest::Actions::ParamsRegistry
  extend ::OpenSearch::API::Ingest::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/ingest/params_registry.rb#62
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/ingest/params_registry.rb#48
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://opensearch-ruby//lib/opensearch/api/actions/ingest/params_registry.rb#37
OpenSearch::API::Ingest::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "ingest" namespace (includes the {Ingest::Actions} methods)
#
# source://opensearch-ruby//lib/opensearch/api/namespace/ingest.rb#34
class OpenSearch::API::Ingest::IngestClient
  include ::OpenSearch::API::Ingest::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

# source://opensearch-ruby//lib/opensearch/api/actions/nodes/params_registry.rb#29
module OpenSearch::API::Nodes
  # Proxy method for {NodesClient}, available in the receiving object
  #
  # source://opensearch-ruby//lib/opensearch/api/namespace/nodes.rb#42
  def nodes; end
end

# source://opensearch-ruby//lib/opensearch/api/actions/nodes/params_registry.rb#30
module OpenSearch::API::Nodes::Actions
  # Returns information about hot threads on each node in the cluster.
  #
  # *Deprecation notice*:
  # The hot accepts /_cluster/nodes as prefix for backwards compatibility reasons
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/nodes/hot_threads.rb#48
  def hot_threads(arguments = T.unsafe(nil)); end

  # Returns information about nodes in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/nodes/info.rb#40
  def info(arguments = T.unsafe(nil)); end

  # Reloads secure settings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/nodes/reload_secure_settings.rb#39
  def reload_secure_settings(arguments = T.unsafe(nil)); end

  # Shutdown one or all nodes
  #
  # @example Shut down node named _Bloke_
  #
  #   client.nodes.shutdown node_id: 'Bloke'
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://opensearch.org/guide/reference/api/admin-cluster-nodes-shutdown/
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/nodes/shutdown.rb#45
  def shutdown(arguments = T.unsafe(nil)); end

  # Returns statistical information about nodes in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/nodes/stats.rb#48
  def stats(arguments = T.unsafe(nil)); end

  # Returns low-level information about REST actions usage on nodes.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/nodes/usage.rb#39
  def usage(arguments = T.unsafe(nil)); end
end

# source://opensearch-ruby//lib/opensearch/api/actions/nodes/params_registry.rb#31
module OpenSearch::API::Nodes::Actions::ParamsRegistry
  extend ::OpenSearch::API::Nodes::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/nodes/params_registry.rb#62
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/nodes/params_registry.rb#48
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://opensearch-ruby//lib/opensearch/api/actions/nodes/params_registry.rb#37
OpenSearch::API::Nodes::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "nodes" namespace (includes the {Nodes::Actions} methods)
#
# source://opensearch-ruby//lib/opensearch/api/namespace/nodes.rb#34
class OpenSearch::API::Nodes::NodesClient
  include ::OpenSearch::API::Nodes::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

# source://opensearch-ruby//lib/opensearch/api/actions/remote/info.rb#29
module OpenSearch::API::Remote
  # Proxy method for {RemoteClient}, available in the receiving object
  #
  # source://opensearch-ruby//lib/opensearch/api/namespace/remote.rb#42
  def remote; end
end

# source://opensearch-ruby//lib/opensearch/api/actions/remote/info.rb#30
module OpenSearch::API::Remote::Actions
  # Returns all of the configured remote cluster information
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/remote/info.rb#34
  def info(_arguments = T.unsafe(nil)); end
end

# Client for the "remote" namespace (includes the {Remote::Actions} methods)
#
# source://opensearch-ruby//lib/opensearch/api/namespace/remote.rb#34
class OpenSearch::API::Remote::RemoteClient
  include ::OpenSearch::API::Remote::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

# source://opensearch-ruby//lib/opensearch/api/actions/remote_store/restore.rb#14
module OpenSearch::API::RemoteStore
  # Proxy method for RemoteStoreClient, available in the receiving object
  #
  # source://opensearch-ruby//lib/opensearch/api/namespace/remote_store.rb#25
  def remote_store; end
end

# source://opensearch-ruby//lib/opensearch/api/actions/remote_store/restore.rb#15
module OpenSearch::API::RemoteStore::Actions
  # Restores from remote store.
  #
  # {API Reference}[https://opensearch.org/docs/latest/opensearch/remote/#restoring-from-a-backup]
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/remote_store/restore.rb#28
  def restore(arguments = T.unsafe(nil)); end
end

# source://opensearch-ruby//lib/opensearch/api/actions/remote_store/restore.rb#16
OpenSearch::API::RemoteStore::Actions::RESTORE_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# Client for the "remote_store" namespace (includes the RemoteStore::Actions methods)
#
# source://opensearch-ruby//lib/opensearch/api/namespace/remote_store.rb#18
class OpenSearch::API::RemoteStore::RemoteStoreClient
  include ::OpenSearch::API::RemoteStore::Actions
  include ::OpenSearch::API::Common::Client
  include ::OpenSearch::API::Common::Client::Base
end

# source://opensearch-ruby//lib/opensearch/api/actions/security/change_password.rb#14
module OpenSearch::API::Security
  # Proxy method for SecurityClient, available in the receiving object
  #
  # source://opensearch-ruby//lib/opensearch/api/namespace/security.rb#25
  def security; end
end

# source://opensearch-ruby//lib/opensearch/api/actions/security/change_password.rb#15
module OpenSearch::API::Security::Actions
  # Changes the password for the current user.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#change-password]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/change_password.rb#24
  def change_password(arguments = T.unsafe(nil)); end

  # Creates or replaces the specified action group.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#create-action-group]
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/create_action_group.rb#25
  def create_action_group(arguments = T.unsafe(nil)); end

  # Creates or replaces the specified role.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#create-role]
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/create_role.rb#25
  def create_role(arguments = T.unsafe(nil)); end

  # Creates or replaces the specified role mapping.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#create-role-mapping]
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/create_role_mapping.rb#25
  def create_role_mapping(arguments = T.unsafe(nil)); end

  # Creates or replaces the specified tenant.
  #
  # {API Reference}[https://opensearch.org/docs/2.7/security/access-control/api/#create-tenant]
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/create_tenant.rb#25
  def create_tenant(arguments = T.unsafe(nil)); end

  # Creates or replaces the specified user.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#create-user]
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/create_user.rb#25
  def create_user(arguments = T.unsafe(nil)); end

  # Delete a specified action group.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#delete-action-group]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/delete_action_group.rb#24
  def delete_action_group(arguments = T.unsafe(nil)); end

  # Deletes all distinguished names in the specified cluster’s or node’s allow list.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#delete-distinguished-names]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/delete_distinguished_names.rb#24
  def delete_distinguished_names(arguments = T.unsafe(nil)); end

  # Delete the specified role.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#delete-role]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/delete_role.rb#24
  def delete_role(arguments = T.unsafe(nil)); end

  # Deletes the specified role mapping.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#delete-role-mapping]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/delete_role_mapping.rb#24
  def delete_role_mapping(arguments = T.unsafe(nil)); end

  # Delete the specified tenant.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#delete-action-group]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/delete_tenant.rb#24
  def delete_tenant(arguments = T.unsafe(nil)); end

  # Delete the specified user.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#delete-user]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/delete_user.rb#24
  def delete_user(arguments = T.unsafe(nil)); end

  # Flushes the Security plugin user, authentication, and authorization cache.
  #
  #
  # {API Reference}[https://opensearch.org/docs/2.7/security/access-control/api/#flush-cache]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/flush_cache.rb#23
  def flush_cache(arguments = T.unsafe(nil)); end

  # Returns account details for the current user.
  #
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#get-account-details]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/get_account_details.rb#23
  def get_account_details(arguments = T.unsafe(nil)); end

  # Retrieves one action group.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#get-action-group]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/get_action_group.rb#24
  def get_action_group(arguments = T.unsafe(nil)); end

  # Retrieves all action groups.
  #
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#get-action-groups]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/get_action_groups.rb#23
  def get_action_groups(arguments = T.unsafe(nil)); end

  # Retrieves the audit configuration.
  #
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#audit-logs]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/get_audit_configuration.rb#23
  def get_audit_configuration(arguments = T.unsafe(nil)); end

  # Retrieves the cluster’s security certificates.
  #
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#get-certificates]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/get_certificates.rb#23
  def get_certificates(arguments = T.unsafe(nil)); end

  # Returns the current Security plugin configuration in JSON format.
  #
  #
  # {API Reference}[https://opensearch.org/docs/2.7/security/access-control/api/#get-configuration]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/get_configuration.rb#23
  def get_configuration(arguments = T.unsafe(nil)); end

  # Retrieves all distinguished names in the allow list.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#get-distinguished-names]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/get_distinguished_names.rb#24
  def get_distinguished_names(arguments = T.unsafe(nil)); end

  # Retrieves one role.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#get-role]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/get_role.rb#24
  def get_role(arguments = T.unsafe(nil)); end

  # Retrieves one role mapping.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#get-role-mapping]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/get_role_mapping.rb#24
  def get_role_mapping(arguments = T.unsafe(nil)); end

  # Retrieves all role mappings.
  #
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#get-role-mappings]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/get_role_mappings.rb#23
  def get_role_mappings(arguments = T.unsafe(nil)); end

  # Retrieves all roles.
  #
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#get-roles]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/get_roles.rb#23
  def get_roles(arguments = T.unsafe(nil)); end

  # Retrieves one tenant.
  #
  # {API Reference}[https://opensearch.org/docs/2.7/security/access-control/api/#get-tenant]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/get_tenant.rb#24
  def get_tenant(arguments = T.unsafe(nil)); end

  # Retrieves all tenants.
  #
  #
  # {API Reference}[https://opensearch.org/docs/2.7/security/access-control/api/#get-tenants]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/get_tenants.rb#23
  def get_tenants(arguments = T.unsafe(nil)); end

  # Retrieve one internal user.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#get-user]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/get_user.rb#24
  def get_user(arguments = T.unsafe(nil)); end

  # Retrieve all internal users.
  #
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#get-users]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/get_users.rb#23
  def get_users(arguments = T.unsafe(nil)); end

  # Checks to see if the Security plugin is up and running.
  #
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#health-check]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/health.rb#23
  def health(arguments = T.unsafe(nil)); end

  # Updates individual attributes of an action group.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#patch-action-group]
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/patch_action_group.rb#25
  def patch_action_group(arguments = T.unsafe(nil)); end

  # Creates, updates, or deletes multiple action groups in a single call.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#patch-action-groups]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/patch_action_groups.rb#24
  def patch_action_groups(arguments = T.unsafe(nil)); end

  # A PATCH call is used to update specified fields in the audit configuration.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#audit-logs]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/patch_audit_configuration.rb#24
  def patch_audit_configuration(arguments = T.unsafe(nil)); end

  # A PATCH call is used to update the existing configuration using the REST API.
  #
  # {API Reference}[https://opensearch.org/docs/2.7/security/access-control/api/#patch-configuration]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/patch_configuration.rb#24
  def patch_configuration(arguments = T.unsafe(nil)); end

  # Bulk update of distinguished names.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#update-all-distinguished-names]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/patch_distinguished_names.rb#24
  def patch_distinguished_names(arguments = T.unsafe(nil)); end

  # Updates individual attributes of a role.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#patch-role]
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/patch_role.rb#25
  def patch_role(arguments = T.unsafe(nil)); end

  # Updates individual attributes of a role mapping.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#patch-role-mapping]
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/patch_role_mapping.rb#25
  def patch_role_mapping(arguments = T.unsafe(nil)); end

  # Creates or updates multiple role mappings in a single call.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#patch-role-mappings]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/patch_role_mappings.rb#24
  def patch_role_mappings(arguments = T.unsafe(nil)); end

  # Creates, updates, or deletes multiple roles in a single call.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#patch-roles]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/patch_roles.rb#24
  def patch_roles(arguments = T.unsafe(nil)); end

  # Add, delete, or modify a single tenant.
  #
  # {API Reference}[https://opensearch.org/docs/2.7/security/access-control/api/#patch-tenant]
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/patch_tenant.rb#25
  def patch_tenant(arguments = T.unsafe(nil)); end

  # Add, delete, or modify multiple tenants in a single call.
  #
  # {API Reference}[https://opensearch.org/docs/2.7/security/access-control/api/#patch-tenants]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/patch_tenants.rb#24
  def patch_tenants(arguments = T.unsafe(nil)); end

  # Updates individual attributes of an internal user.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#patch-user]
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/patch_user.rb#25
  def patch_user(arguments = T.unsafe(nil)); end

  # Creates, updates, or deletes multiple internal users in a single call.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#patch-users]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/patch_users.rb#24
  def patch_users(arguments = T.unsafe(nil)); end

  # Reload HTTP layer communication certificates.
  #
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#reload-http-certificates]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/reload_http_certificates.rb#23
  def reload_http_certificates(arguments = T.unsafe(nil)); end

  # Reload transport layer communication certificates.
  #
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#reload-transport-certificates]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/reload_transport_certificates.rb#23
  def reload_transport_certificates(arguments = T.unsafe(nil)); end

  # Updates the audit configuration.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#audit-logs]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/update_audit_configuration.rb#24
  def update_audit_configuration(arguments = T.unsafe(nil)); end

  # Adds or updates the existing configuration using the REST API.
  #
  # {API Reference}[https://opensearch.org/docs/2.7/security/access-control/api/#update-configuration]
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/update_configuration.rb#24
  def update_configuration(arguments = T.unsafe(nil)); end

  # Adds or updates the specified distinguished names in the cluster’s or node’s allow list.
  #
  # {API Reference}[https://opensearch.org/docs/latest/security/access-control/api/#update-distinguished-names]
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/security/update_distinguished_names.rb#25
  def update_distinguished_names(arguments = T.unsafe(nil)); end
end

# source://opensearch-ruby//lib/opensearch/api/actions/security/change_password.rb#16
OpenSearch::API::Security::Actions::CHANGE_PASSWORD_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/create_action_group.rb#16
OpenSearch::API::Security::Actions::CREATE_ACTION_GROUP_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/create_role_mapping.rb#16
OpenSearch::API::Security::Actions::CREATE_ROLE_MAPPING_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/create_role.rb#16
OpenSearch::API::Security::Actions::CREATE_ROLE_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/create_tenant.rb#16
OpenSearch::API::Security::Actions::CREATE_TENANT_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/create_user.rb#16
OpenSearch::API::Security::Actions::CREATE_USER_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/delete_action_group.rb#16
OpenSearch::API::Security::Actions::DELETE_ACTION_GROUP_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/delete_distinguished_names.rb#16
OpenSearch::API::Security::Actions::DELETE_DISTINGUISHED_NAMES_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/delete_role_mapping.rb#16
OpenSearch::API::Security::Actions::DELETE_ROLE_MAPPING_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/delete_role.rb#16
OpenSearch::API::Security::Actions::DELETE_ROLE_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/delete_tenant.rb#16
OpenSearch::API::Security::Actions::DELETE_TENANT_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/delete_user.rb#16
OpenSearch::API::Security::Actions::DELETE_USER_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/flush_cache.rb#16
OpenSearch::API::Security::Actions::FLUSH_CACHE_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/get_account_details.rb#16
OpenSearch::API::Security::Actions::GET_ACCOUNT_DETAILS_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/get_action_groups.rb#16
OpenSearch::API::Security::Actions::GET_ACTION_GROUPS_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/get_action_group.rb#16
OpenSearch::API::Security::Actions::GET_ACTION_GROUP_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/get_audit_configuration.rb#16
OpenSearch::API::Security::Actions::GET_AUDIT_CONFIGURATION_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/get_certificates.rb#16
OpenSearch::API::Security::Actions::GET_CERTIFICATES_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/get_configuration.rb#16
OpenSearch::API::Security::Actions::GET_CONFIGURATION_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/get_distinguished_names.rb#16
OpenSearch::API::Security::Actions::GET_DISTINGUISHED_NAMES_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/get_roles.rb#16
OpenSearch::API::Security::Actions::GET_ROLES_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/get_role_mappings.rb#16
OpenSearch::API::Security::Actions::GET_ROLE_MAPPINGS_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/get_role_mapping.rb#16
OpenSearch::API::Security::Actions::GET_ROLE_MAPPING_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/get_role.rb#16
OpenSearch::API::Security::Actions::GET_ROLE_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/get_tenants.rb#16
OpenSearch::API::Security::Actions::GET_TENANTS_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/get_tenant.rb#16
OpenSearch::API::Security::Actions::GET_TENANT_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/get_users.rb#16
OpenSearch::API::Security::Actions::GET_USERS_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/get_user.rb#16
OpenSearch::API::Security::Actions::GET_USER_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/health.rb#16
OpenSearch::API::Security::Actions::HEALTH_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/patch_action_groups.rb#16
OpenSearch::API::Security::Actions::PATCH_ACTION_GROUPS_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/patch_action_group.rb#16
OpenSearch::API::Security::Actions::PATCH_ACTION_GROUP_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/patch_audit_configuration.rb#16
OpenSearch::API::Security::Actions::PATCH_AUDIT_CONFIGURATION_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/patch_configuration.rb#16
OpenSearch::API::Security::Actions::PATCH_CONFIGURATION_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/patch_distinguished_names.rb#16
OpenSearch::API::Security::Actions::PATCH_DISTINGUISHED_NAMES_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/patch_roles.rb#16
OpenSearch::API::Security::Actions::PATCH_ROLES_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/patch_role_mappings.rb#16
OpenSearch::API::Security::Actions::PATCH_ROLE_MAPPINGS_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/patch_role_mapping.rb#16
OpenSearch::API::Security::Actions::PATCH_ROLE_MAPPING_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/patch_role.rb#16
OpenSearch::API::Security::Actions::PATCH_ROLE_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/patch_tenants.rb#16
OpenSearch::API::Security::Actions::PATCH_TENANTS_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/patch_tenant.rb#16
OpenSearch::API::Security::Actions::PATCH_TENANT_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/patch_users.rb#16
OpenSearch::API::Security::Actions::PATCH_USERS_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/patch_user.rb#16
OpenSearch::API::Security::Actions::PATCH_USER_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/reload_http_certificates.rb#16
OpenSearch::API::Security::Actions::RELOAD_HTTP_CERTIFICATES_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/reload_transport_certificates.rb#16
OpenSearch::API::Security::Actions::RELOAD_TRANSPORT_CERTIFICATES_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/update_audit_configuration.rb#16
OpenSearch::API::Security::Actions::UPDATE_AUDIT_CONFIGURATION_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/update_configuration.rb#16
OpenSearch::API::Security::Actions::UPDATE_CONFIGURATION_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# source://opensearch-ruby//lib/opensearch/api/actions/security/update_distinguished_names.rb#16
OpenSearch::API::Security::Actions::UPDATE_DISTINGUISHED_NAMES_QUERY_PARAMS = T.let(T.unsafe(nil), Set)

# Client for the "security" namespace (includes the Security::Actions methods)
#
# source://opensearch-ruby//lib/opensearch/api/namespace/security.rb#18
class OpenSearch::API::Security::SecurityClient
  include ::OpenSearch::API::Security::Actions
  include ::OpenSearch::API::Common::Client
  include ::OpenSearch::API::Common::Client::Base
end

# source://opensearch-ruby//lib/opensearch/api/actions/shutdown/params_registry.rb#29
module OpenSearch::API::Shutdown
  # Proxy method for {ShutdownClient}, available in the receiving object
  #
  # source://opensearch-ruby//lib/opensearch/api/namespace/shutdown.rb#42
  def shutdown; end
end

# source://opensearch-ruby//lib/opensearch/api/actions/shutdown/params_registry.rb#30
module OpenSearch::API::Shutdown::Actions
  # Removes a node from the shutdown list
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/shutdown/delete_node.rb#41
  def delete_node(arguments = T.unsafe(nil)); end

  # Retrieve status of a node or nodes that are currently marked as shutting down
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/shutdown/get_node.rb#41
  def get_node(arguments = T.unsafe(nil)); end

  # Adds a node to be shut down
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/shutdown/put_node.rb#42
  def put_node(arguments = T.unsafe(nil)); end
end

# source://opensearch-ruby//lib/opensearch/api/actions/shutdown/params_registry.rb#31
module OpenSearch::API::Shutdown::Actions::ParamsRegistry
  extend ::OpenSearch::API::Shutdown::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/shutdown/params_registry.rb#62
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/shutdown/params_registry.rb#48
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://opensearch-ruby//lib/opensearch/api/actions/shutdown/params_registry.rb#37
OpenSearch::API::Shutdown::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "shutdown" namespace (includes the {Shutdown::Actions} methods)
#
# source://opensearch-ruby//lib/opensearch/api/namespace/shutdown.rb#34
class OpenSearch::API::Shutdown::ShutdownClient
  include ::OpenSearch::API::Shutdown::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

# source://opensearch-ruby//lib/opensearch/api/actions/snapshot/params_registry.rb#29
module OpenSearch::API::Snapshot
  # Proxy method for {SnapshotClient}, available in the receiving object
  #
  # source://opensearch-ruby//lib/opensearch/api/namespace/snapshot.rb#42
  def snapshot; end
end

# source://opensearch-ruby//lib/opensearch/api/actions/snapshot/params_registry.rb#30
module OpenSearch::API::Snapshot::Actions
  # Removes stale data from repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/snapshot/cleanup_repository.rb#40
  def cleanup_repository(arguments = T.unsafe(nil)); end

  # Clones indices from one snapshot into another snapshot in the same repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/snapshot/clone.rb#42
  def clone(arguments = T.unsafe(nil)); end

  # Creates a snapshot in a repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/snapshot/create.rb#42
  def create(arguments = T.unsafe(nil)); end

  # Creates a repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/snapshot/create_repository.rb#42
  def create_repository(arguments = T.unsafe(nil)); end

  # Deletes a snapshot.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/snapshot/delete.rb#40
  def delete(arguments = T.unsafe(nil)); end

  # Deletes a repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/snapshot/delete_repository.rb#40
  def delete_repository(arguments = T.unsafe(nil)); end

  # Returns information about a snapshot.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/snapshot/get.rb#44
  def get(arguments = T.unsafe(nil)); end

  # Returns a list of features which can be snapshotted in this cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/snapshot/get_features.rb#38
  def get_features(arguments = T.unsafe(nil)); end

  # Returns information about a repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/snapshot/get_repository.rb#39
  def get_repository(arguments = T.unsafe(nil)); end

  # Analyzes a repository for correctness and performance
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/snapshot/repository_analyze.rb#48
  def repository_analyze(arguments = T.unsafe(nil)); end

  # Restores a snapshot.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/snapshot/restore.rb#42
  def restore(arguments = T.unsafe(nil)); end

  # Returns information about the status of a snapshot.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/snapshot/status.rb#41
  def status(arguments = T.unsafe(nil)); end

  # Verifies a repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/snapshot/verify_repository.rb#40
  def verify_repository(arguments = T.unsafe(nil)); end
end

# source://opensearch-ruby//lib/opensearch/api/actions/snapshot/params_registry.rb#31
module OpenSearch::API::Snapshot::Actions::ParamsRegistry
  extend ::OpenSearch::API::Snapshot::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/snapshot/params_registry.rb#62
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/snapshot/params_registry.rb#48
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://opensearch-ruby//lib/opensearch/api/actions/snapshot/params_registry.rb#37
OpenSearch::API::Snapshot::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "snapshot" namespace (includes the {Snapshot::Actions} methods)
#
# source://opensearch-ruby//lib/opensearch/api/namespace/snapshot.rb#34
class OpenSearch::API::Snapshot::SnapshotClient
  include ::OpenSearch::API::Snapshot::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

# source://opensearch-ruby//lib/opensearch/api/actions/tasks/params_registry.rb#29
module OpenSearch::API::Tasks
  # Proxy method for {TasksClient}, available in the receiving object
  #
  # source://opensearch-ruby//lib/opensearch/api/namespace/tasks.rb#42
  def tasks; end
end

# source://opensearch-ruby//lib/opensearch/api/actions/tasks/params_registry.rb#30
module OpenSearch::API::Tasks::Actions
  # Cancels a task, if it can be cancelled through an API.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/tasks/cancel.rb#45
  def cancel(arguments = T.unsafe(nil)); end

  # Returns information about a task.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/tasks/get.rb#43
  def get(arguments = T.unsafe(nil)); end

  # Returns a list of tasks.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. OpenSearch will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/tasks/list.rb#47
  def list(arguments = T.unsafe(nil)); end
end

# source://opensearch-ruby//lib/opensearch/api/actions/tasks/params_registry.rb#31
module OpenSearch::API::Tasks::Actions::ParamsRegistry
  extend ::OpenSearch::API::Tasks::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/tasks/params_registry.rb#62
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/api/actions/tasks/params_registry.rb#48
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://opensearch-ruby//lib/opensearch/api/actions/tasks/params_registry.rb#37
OpenSearch::API::Tasks::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "tasks" namespace (includes the {Tasks::Actions} methods)
#
# source://opensearch-ruby//lib/opensearch/api/namespace/tasks.rb#34
class OpenSearch::API::Tasks::TasksClient
  include ::OpenSearch::API::Tasks::Actions
  include ::OpenSearch::API::Common::Client::Base
  include ::OpenSearch::API::Common::Client
end

# source://opensearch-ruby//lib/opensearch/api.rb#70
OpenSearch::API::UNDERSCORE_ALL = T.let(T.unsafe(nil), String)

# source://opensearch-ruby//lib/opensearch/api.rb#69
OpenSearch::API::UNDERSCORE_SEARCH = T.let(T.unsafe(nil), String)

# Generic utility methods
#
# source://opensearch-ruby//lib/opensearch/api/utils.rb#31
module OpenSearch::API::Utils
  extend ::OpenSearch::API::Utils

  # Convert an array of payloads into OpenSearch `header\ndata` format
  #
  # Supports various different formats of the payload: Array of Strings, Header/Data pairs,
  # or the conveniency "combined" format where data is passed along with the header
  # in a single item.
  #
  #     OpenSearch::API::Utils.__bulkify [
  #       { :index =>  { :_index => 'myindexA', :_id => '1', :data => { :title => 'Test' } } },
  #       { :update => { :_index => 'myindexB', :_id => '2', :data => { :doc => { :title => 'Update' } } } }
  #     ]
  #
  #     # => {"index":{"_index":"myindexA","_id":"1"}}
  #     # => {"title":"Test"}
  #     # => {"update":{"_index":"myindexB","_id":"2"}}
  #     # => {"doc":{"title":"Update"}}
  #
  # source://opensearch-ruby//lib/opensearch/api/utils.rb#108
  def __bulkify(payload); end

  # URL-escape a string
  #
  # @api private
  # @example
  #   __escape('foo/bar') # => 'foo%2Fbar'
  #   __escape('bar^bam') # => 'bar%5Ebam'
  #
  # source://opensearch-ruby//lib/opensearch/api/utils.rb#39
  def __escape(string); end

  # source://opensearch-ruby//lib/opensearch/api/utils.rb#183
  def __extract_params(arguments, params = T.unsafe(nil), options = T.unsafe(nil)); end

  # Extracts the valid parts of the URL from the arguments
  #
  # @api private
  # @example Extract parts
  #   __extract_parts { :foo => true }, [:foo, :bar]
  #   # => [:foo]
  # @note Mutates the `arguments` argument, to prevent failures in `__validate_and_extract_params`.
  # @param arguments [Hash] Hash of arguments to verify and extract, **with symbolized keys**
  # @param valid_parts [Array<Symbol>] An array of symbol with valid keys
  # @return [Array<String>] Valid parts of the URL as an array of strings
  #
  # source://opensearch-ruby//lib/opensearch/api/utils.rb#205
  def __extract_parts(arguments, valid_parts = T.unsafe(nil)); end

  # Create a "list" of values from arguments, ignoring nil values and encoding special characters.
  #
  # @api private
  # @example Create a list from array
  #   __listify(['A','B']) # => 'A,B'
  # @example Create a list from arguments
  #   __listify('A','B') # => 'A,B'
  # @example Escape values
  #   __listify('foo','bar^bam') # => 'foo,bar%5Ebam'
  # @example Do not escape the values
  #   __listify('foo','bar^bam', escape: false) # => 'foo,bar^bam'
  #
  # source://opensearch-ruby//lib/opensearch/api/utils.rb#60
  def __listify(*list); end

  # Create a path (URL part) from arguments, ignoring nil values and empty strings.
  #
  # # @example Encode special characters
  #     __pathify(['foo', 'bar^bam']) # => 'foo/bar%5Ebam'
  #
  # @api private
  # @example Create a path from array
  #   __pathify(['foo', '', nil, 'bar']) # => 'foo/bar'
  # @example Create a path from arguments
  #   __pathify('foo', '', nil, 'bar') # => 'foo/bar'
  #
  # source://opensearch-ruby//lib/opensearch/api/utils.rb#84
  def __pathify(*segments); end

  # source://opensearch-ruby//lib/opensearch/api/utils.rb#278
  def __report_unsupported_method(name); end

  # source://opensearch-ruby//lib/opensearch/api/utils.rb#234
  def __report_unsupported_parameters(arguments, params = T.unsafe(nil)); end

  # Calls the given block, rescuing from `StandardError`.
  #
  # Primary use case is the `:ignore` parameter for API calls.
  #
  # Returns `false` if exception contains NotFound in its class name or message,
  # else re-raises the exception.
  #
  # @api private
  # @yield [block] A block of code to be executed with exception handling.
  #
  # source://opensearch-ruby//lib/opensearch/api/utils.rb#227
  def __rescue_from_not_found; end

  # Validates the argument Hash against common and valid API parameters
  #
  # @api private
  # @example Extract parameters
  #   __validate_and_extract_params( { :foo => 'qux' }, [:foo, :bar] )
  #   # => { :foo => 'qux' }
  # @example Raise an exception for invalid parameters
  #   __validate_and_extract_params( { :foo => 'qux', :bam => 'mux' }, [:foo, :bar] )
  #   # ArgumentError: "URL parameter 'bam' is not supported"
  # @example Skip validating parameters
  #   __validate_and_extract_params( { :foo => 'q', :bam => 'm' }, [:foo, :bar], { skip_parameter_validation: true } )
  #   # => { :foo => "q", :bam => "m" }
  # @example Skip validating parameters when the module setting is set
  #   OpenSearch::API.settings[:skip_parameter_validation] = true
  #   __validate_and_extract_params( { :foo => 'q', :bam => 'm' }, [:foo, :bar] )
  #   # => { :foo => "q", :bam => "m" }
  # @param arguments [Hash] Hash of arguments to verify and extract, **with symbolized keys**
  # @param valid_params [Array<Symbol>] An array of symbols with valid keys
  # @raise [ArgumentError] If the arguments Hash contains invalid keys
  # @return [Hash] Return whitelisted Hash
  #
  # source://opensearch-ruby//lib/opensearch/api/utils.rb#167
  def __validate_and_extract_params(arguments, params = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://opensearch-ruby//lib/opensearch/api/utils.rb#176
  def __validate_params(arguments, valid_params = T.unsafe(nil)); end
end

# source://opensearch-ruby//lib/opensearch.rb#35
class OpenSearch::Client
  include ::OpenSearch::API
  include ::OpenSearch::API::Tasks
  include ::OpenSearch::API::Snapshot
  include ::OpenSearch::API::Shutdown
  include ::OpenSearch::API::Security
  include ::OpenSearch::API::RemoteStore
  include ::OpenSearch::API::Remote
  include ::OpenSearch::API::Nodes
  include ::OpenSearch::API::Ingest
  include ::OpenSearch::API::Indices
  include ::OpenSearch::API::Http
  include ::OpenSearch::API::Features
  include ::OpenSearch::API::DanglingIndices
  include ::OpenSearch::API::Cluster
  include ::OpenSearch::API::Cat
  include ::OpenSearch::API::Actions
  include ::OpenSearch::API::Common

  # See OpenSearch::Transport::Client for initializer parameters
  #
  # @return [Client] a new instance of Client
  #
  # source://opensearch-ruby//lib/opensearch.rb#40
  def initialize(arguments = T.unsafe(nil), &block); end

  # source://opensearch-ruby//lib/opensearch.rb#45
  def method_missing(name, *args, &block); end

  # Returns the value of attribute transport.
  #
  # source://opensearch-ruby//lib/opensearch.rb#37
  def transport; end

  # Sets the attribute transport
  #
  # @param value the value to set the attribute transport to.
  #
  # source://opensearch-ruby//lib/opensearch.rb#37
  def transport=(_arg0); end

  private

  # source://opensearch-ruby//lib/opensearch.rb#91
  def open_search_validation_request; end

  # @return [Boolean]
  #
  # source://opensearch-ruby//lib/opensearch.rb#51
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end

  # source://opensearch-ruby//lib/opensearch.rb#57
  def verify_open_search; end

  # @raise [OpenSearch::UnsupportedProductError]
  #
  # source://opensearch-ruby//lib/opensearch.rb#78
  def verify_version_and_distribution(version, distribution); end
end

# Module to encapsulate all logging functionality.
#
# @since 7.0.0
#
# source://opensearch-ruby//lib/opensearch/transport/transport/loggable.rb#31
module OpenSearch::Loggable
  # Log a debug message.
  #
  # @example Log a debug message.
  #   log_debug('Message')
  # @param message [String] The message to log.
  # @since 7.0.0
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/loggable.rb#40
  def log_debug(message); end

  # Log an error message.
  #
  # @example Log an error message.
  #   log_error('Message')
  # @param message [String] The message to log.
  # @since 7.0.0
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/loggable.rb#52
  def log_error(message); end

  # Log a fatal message.
  #
  # @example Log a fatal message.
  #   log_fatal('Message')
  # @param message [String] The message to log.
  # @since 7.0.0
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/loggable.rb#64
  def log_fatal(message); end

  # Log an info message.
  #
  # @example Log an info message.
  #   log_info('Message')
  # @param message [String] The message to log.
  # @since 7.0.0
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/loggable.rb#76
  def log_info(message); end

  # Log a warn message.
  #
  # @example Log a warn message.
  #   log_warn('Message')
  # @param message [String] The message to log.
  # @since 7.0.0
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/loggable.rb#88
  def log_warn(message); end
end

# source://opensearch-ruby//lib/opensearch.rb#33
OpenSearch::NOT_SUPPORTED_WARNING = T.let(T.unsafe(nil), String)

# source://opensearch-ruby//lib/opensearch.rb#32
OpenSearch::SECURITY_PRIVILEGES_VALIDATION_WARNING = T.let(T.unsafe(nil), String)

# source://opensearch-ruby//lib/opensearch/transport/transport/serializer/multi_json.rb#28
module OpenSearch::Transport; end

# Handles communication with an OpenSearch cluster.
#
# See {file:README.md README} for usage and code examples.
#
# source://opensearch-ruby//lib/opensearch/transport/client.rb#35
class OpenSearch::Transport::Client
  # Create a client connected to an OpenSearch cluster.
  #
  # Specify the URL via arguments or set the `OPENSEARCH_URL` environment variable.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option api_key
  # @option opaque_id_prefix
  # @param arguments [Hash] a customizable set of options
  # @param api_key [Hash] a customizable set of options
  # @param opaque_id_prefix [Hash] a customizable set of options
  # @return [Client] a new instance of Client
  # @yield [faraday] Access and configure the `Faraday::Connection` instance directly with a block
  #
  # source://opensearch-ruby//lib/opensearch/transport/client.rb#137
  def initialize(arguments = T.unsafe(nil), &block); end

  # Performs a request through delegation to {#transport}.
  #
  # source://opensearch-ruby//lib/opensearch/transport/client.rb#186
  def perform_request(method, path, params = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil)); end

  # Returns the transport object.
  #
  # @see OpenSearch::Transport::Transport::Base
  # @see OpenSearch::Transport::Transport::HTTP::Faraday
  #
  # source://opensearch-ruby//lib/opensearch/transport/client.rb#75
  def transport; end

  # Returns the transport object.
  #
  # @see OpenSearch::Transport::Transport::Base
  # @see OpenSearch::Transport::Transport::HTTP::Faraday
  #
  # source://opensearch-ruby//lib/opensearch/transport/client.rb#75
  def transport=(_arg0); end

  private

  # Auto-detect the best adapter (HTTP "driver") available, based on libraries
  # loaded by the user, preferring those with persistent connections
  # ("keep-alive") by default
  #
  # @api private
  # @return [Symbol]
  #
  # source://opensearch-ruby//lib/opensearch/transport/client.rb#332
  def __auto_detect_adapter; end

  # Encode credentials for the Authorization Header
  # Credentials is the base64 encoding of id and api_key joined by a colon
  #
  # source://opensearch-ruby//lib/opensearch/transport/client.rb#357
  def __encode(api_key); end

  # Normalizes and returns hosts configuration.
  #
  # Arrayifies the `hosts_config` argument and extracts `host` and `port` info from strings.
  # Performs shuffling when the `randomize_hosts` option is set.
  #
  # TODO: Refactor, so it's available in OpenSearch::Transport::Base as well
  #
  # @api private
  # @raise [ArgumentError]
  # @return [Array<Hash>]
  #
  # source://opensearch-ruby//lib/opensearch/transport/client.rb#260
  def __extract_hosts(hosts_config); end

  # source://opensearch-ruby//lib/opensearch/transport/client.rb#276
  def __parse_host(host); end

  # source://opensearch-ruby//lib/opensearch/transport/client.rb#216
  def add_header(header); end

  # source://opensearch-ruby//lib/opensearch/transport/client.rb#224
  def extract_cloud_creds(arguments); end

  # source://opensearch-ruby//lib/opensearch/transport/client.rb#198
  def set_api_key; end

  # source://opensearch-ruby//lib/opensearch/transport/client.rb#205
  def set_compatibility_header; end
end

# The default port to use if connecting using a Cloud ID.
# Updated from 9243 to 443 in client version 7.10.1
#
# @since 7.2.0
#
# source://opensearch-ruby//lib/opensearch/transport/client.rb#63
OpenSearch::Transport::Client::DEFAULT_CLOUD_PORT = T.let(T.unsafe(nil), Integer)

# The default host and port to use if not otherwise specified.
#
# @since 7.0.0
#
# source://opensearch-ruby//lib/opensearch/transport/client.rb#57
OpenSearch::Transport::Client::DEFAULT_HOST = T.let(T.unsafe(nil), String)

# source://opensearch-ruby//lib/opensearch/transport/client.rb#38
OpenSearch::Transport::Client::DEFAULT_LOGGER = T.let(T.unsafe(nil), Proc)

# The default port to use if not otherwise specified.
#
# @since 7.2.0
#
# source://opensearch-ruby//lib/opensearch/transport/client.rb#68
OpenSearch::Transport::Client::DEFAULT_PORT = T.let(T.unsafe(nil), Integer)

# source://opensearch-ruby//lib/opensearch/transport/client.rb#46
OpenSearch::Transport::Client::DEFAULT_TRACER = T.let(T.unsafe(nil), Proc)

# source://opensearch-ruby//lib/opensearch/transport/client.rb#36
OpenSearch::Transport::Client::DEFAULT_TRANSPORT_CLASS = OpenSearch::Transport::Transport::HTTP::Faraday

# Class for wrapping a hash that could have sensitive data.
# When printed, the sensitive values will be redacted.
#
# @since 6.1.1
#
# source://opensearch-ruby//lib/opensearch/transport/redacted.rb#33
class OpenSearch::Transport::Redacted < ::Hash
  # @return [Redacted] a new instance of Redacted
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/transport/redacted.rb#34
  def initialize(elements = T.unsafe(nil)); end

  # Get a string representation of the hash.
  #
  # @return [String] The string representation of the hash.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/transport/redacted.rb#55
  def inspect; end

  # Get a string representation of the hash.
  #
  # @return [String] The string representation of the hash.
  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/transport/redacted.rb#64
  def to_s; end

  private

  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/transport/redacted.rb#75
  def redact(key, val, method); end

  # @since 6.1.1
  #
  # source://opensearch-ruby//lib/opensearch/transport/redacted.rb#70
  def redacted_string(method); end
end

# The keys whose values will be redacted.
#
# @since 6.1.1
#
# source://opensearch-ruby//lib/opensearch/transport/redacted.rb#42
OpenSearch::Transport::Redacted::SENSITIVE_KEYS = T.let(T.unsafe(nil), Array)

# The replacement string used in place of the value for sensitive keys.
#
# @since 6.1.1
#
# source://opensearch-ruby//lib/opensearch/transport/redacted.rb#48
OpenSearch::Transport::Redacted::STRING_REPLACEMENT = T.let(T.unsafe(nil), String)

# source://opensearch-ruby//lib/opensearch/transport/transport/serializer/multi_json.rb#29
module OpenSearch::Transport::Transport; end

# @abstract Module with common functionality for transport implementations.
#
# source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#32
module OpenSearch::Transport::Transport::Base
  include ::OpenSearch::Loggable

  # Creates a new transport object
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] Settings and options for the transport
  # @param block [Proc] Lambda or Proc which can be evaluated in the context of the "session" object
  # @see Client#initialize
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#58
  def initialize(arguments = T.unsafe(nil), &block); end

  # @abstract Build and return a connection.
  #   A transport implementation *must* implement this method.
  #   See {HTTP::Faraday#__build_connection} for an example.
  # @api private
  # @raise [NoMethodError]
  # @return [Connections::Connection]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#181
  def __build_connection(_host, _options = T.unsafe(nil), _block = T.unsafe(nil)); end

  # Builds and returns a collection of connections
  #
  # The adapters have to implement the {Base#__build_connection} method.
  #
  # @api private
  # @return [Connections::Collection]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#157
  def __build_connections; end

  # Closes the connections collection
  #
  # @api private
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#189
  def __close_connections; end

  # Converts any non-String object to JSON
  #
  # @api private
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#236
  def __convert_to_json(obj = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns a full URL based on information from host
  #
  # @api private
  # @param host [Hash] Host configuration passed in from {Client}
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#245
  def __full_url(host); end

  # Log request and response information
  #
  # @api private
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#197
  def __log_response(method, _path, _params, body, url, response, _json, took, duration); end

  # Raise error specific for the HTTP response status or a generic server error
  #
  # @api private
  # @raise [error]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#227
  def __raise_transport_error(response); end

  # Rebuilds the connections collection in the transport.
  #
  # The methods *adds* new connections from the passed hosts to the collection,
  # and *removes* all connections not contained in the passed hosts.
  #
  # @api private
  # @return [Connections::Collection]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#133
  def __rebuild_connections(arguments = T.unsafe(nil)); end

  # Trace the request in the `curl` format
  #
  # @api private
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#210
  def __trace(method, path, params, headers, body, _url, response, json, _took, duration); end

  # Returns the value of attribute connections.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#43
  def connections; end

  # Returns the value of attribute counter.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#43
  def counter; end

  # Returns a connection from the connection pool by delegating to {Connections::Collection#get_connection}.
  #
  # Resurrects dead connection if the `resurrect_after` timeout has passed.
  # Increments the counter and performs connection reloading if the `reload_connections` option is set.
  #
  # @return [Connections::Connection]
  # @see Connections::Collection#get_connection
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#94
  def get_connection(options = T.unsafe(nil)); end

  # @abstract Returns an Array of connection errors specific to the transport implementation.
  #   See {HTTP::Faraday#host_unreachable_exceptions} for an example.
  # @return [Array]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#384
  def host_unreachable_exceptions; end

  # Returns the value of attribute hosts.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#43
  def hosts; end

  # Returns the value of attribute last_request_at.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#43
  def last_request_at; end

  # Returns the value of attribute logger.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#44
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#44
  def logger=(_arg0); end

  # Returns the value of attribute options.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#43
  def options; end

  # Performs a request to Elasticsearch, while handling logging, tracing, marking dead connections,
  # retrying the request and reloading the connections.
  #
  # @abstract The transport implementation has to implement this method either in full,
  #   or by invoking this method with a block. See {HTTP::Faraday#perform_request} for an example.
  # @param method [String] Request method
  # @param path [String] The API endpoint
  # @param params [Hash] Request parameters (will be serialized by {Connections::Connection#full_url})
  # @param body [Hash] Request body (will be serialized by the {#serializer})
  # @param block [Proc] Code block to evaluate, passed from the implementation
  # @param headers [Hash] Request headers (will be serialized by the {#serializer})
  # @raise [NoMethodError] If no block is passed
  # @raise [ServerError] If request failed on server
  # @raise [Error] If no connection is available
  # @return [Response]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#272
  def perform_request(method, path, params = T.unsafe(nil), body = T.unsafe(nil), _headers = T.unsafe(nil), opts = T.unsafe(nil), &block); end

  # Returns the value of attribute protocol.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#43
  def protocol; end

  # Returns the value of attribute reload_after.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#44
  def reload_after; end

  # Sets the attribute reload_after
  #
  # @param value the value to set the attribute reload_after to.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#44
  def reload_after=(_arg0); end

  # Returns the value of attribute reload_connections.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#44
  def reload_connections; end

  # Reloads and replaces the connection collection based on cluster information
  #
  # @see Sniffer#hosts
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#106
  def reload_connections!; end

  # Sets the attribute reload_connections
  #
  # @param value the value to set the attribute reload_connections to.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#44
  def reload_connections=(_arg0); end

  # Returns the value of attribute resurrect_after.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#44
  def resurrect_after; end

  # Sets the attribute resurrect_after
  #
  # @param value the value to set the attribute resurrect_after to.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#44
  def resurrect_after=(_arg0); end

  # Tries to "resurrect" all eligible dead connections
  #
  # @see Connections::Connection#resurrect!
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#121
  def resurrect_dead_connections!; end

  # Returns the value of attribute serializer.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#44
  def serializer; end

  # Sets the attribute serializer
  #
  # @param value the value to set the attribute serializer to.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#44
  def serializer=(_arg0); end

  # Returns the value of attribute sniffer.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#44
  def sniffer; end

  # Sets the attribute sniffer
  #
  # @param value the value to set the attribute sniffer to.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#44
  def sniffer=(_arg0); end

  # Returns the value of attribute tracer.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#44
  def tracer; end

  # Sets the attribute tracer
  #
  # @param value the value to set the attribute tracer to.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#44
  def tracer=(_arg0); end

  private

  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#422
  def apply_headers(client, options); end

  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#401
  def decompress_response(body); end

  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#430
  def find_value(hash, regex); end

  # @return [Boolean]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#414
  def gzipped?(body); end

  # @return [Boolean]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#418
  def use_compression?; end

  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#437
  def user_agent_header(_client); end

  # source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#447
  def warnings(warning); end
end

# source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#396
OpenSearch::Transport::Transport::Base::ACCEPT_ENCODING = T.let(T.unsafe(nil), String)

# source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#393
OpenSearch::Transport::Transport::Base::CONTENT_TYPE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#392
OpenSearch::Transport::Transport::Base::CONTENT_TYPE_STR = T.let(T.unsafe(nil), String)

# source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#394
OpenSearch::Transport::Transport::Base::DEFAULT_CONTENT_TYPE = T.let(T.unsafe(nil), String)

# Requests
#
# source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#39
OpenSearch::Transport::Transport::Base::DEFAULT_MAX_RETRIES = T.let(T.unsafe(nil), Integer)

# source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#35
OpenSearch::Transport::Transport::Base::DEFAULT_PORT = T.let(T.unsafe(nil), Integer)

# source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#36
OpenSearch::Transport::Transport::Base::DEFAULT_PROTOCOL = T.let(T.unsafe(nil), String)

# Requests
#
# source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#37
OpenSearch::Transport::Transport::Base::DEFAULT_RELOAD_AFTER = T.let(T.unsafe(nil), Integer)

# Seconds
#
# source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#38
OpenSearch::Transport::Transport::Base::DEFAULT_RESURRECT_AFTER = T.let(T.unsafe(nil), Integer)

# source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#40
OpenSearch::Transport::Transport::Base::DEFAULT_SERIALIZER_CLASS = OpenSearch::Transport::Transport::Serializer::MultiJson

# source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#395
OpenSearch::Transport::Transport::Base::GZIP = T.let(T.unsafe(nil), String)

# source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#397
OpenSearch::Transport::Transport::Base::GZIP_FIRST_TWO_BYTES = T.let(T.unsafe(nil), String)

# source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#398
OpenSearch::Transport::Transport::Base::HEX_STRING_DIRECTIVE = T.let(T.unsafe(nil), String)

# source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#399
OpenSearch::Transport::Transport::Base::RUBY_ENCODING = T.let(T.unsafe(nil), TrueClass)

# source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#41
OpenSearch::Transport::Transport::Base::SANITIZED_PASSWORD = T.let(T.unsafe(nil), String)

# source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#391
OpenSearch::Transport::Transport::Base::USER_AGENT_REGEX = T.let(T.unsafe(nil), Regexp)

# source://opensearch-ruby//lib/opensearch/transport/transport/base.rb#390
OpenSearch::Transport::Transport::Base::USER_AGENT_STR = T.let(T.unsafe(nil), String)

# source://opensearch-ruby//lib/opensearch/transport/transport/connections/selector.rb#30
module OpenSearch::Transport::Transport::Connections; end

# Wraps the collection of connections for the transport object as an Enumerable object.
#
# @see Base#connections
# @see Selector::Base#select
# @see Connection
#
# source://opensearch-ruby//lib/opensearch/transport/transport/connections/collection.rb#37
class OpenSearch::Transport::Transport::Connections::Collection
  include ::Enumerable

  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @return [Collection] a new instance of Collection
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/collection.rb#48
  def initialize(arguments = T.unsafe(nil)); end

  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/collection.rb#102
  def [](*args); end

  # Add connection(s) to the collection
  #
  # @param connections [Connection, Array] A connection or an array of connections to add
  # @return [self]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/collection.rb#116
  def add(connections); end

  # Returns an Array of alive connections.
  #
  # @return [Array]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/collection.rb#66
  def alive; end

  # Returns an Array of all connections, both dead and alive
  #
  # @return [Array]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/collection.rb#83
  def all; end

  # Returns an Array of alive connections.
  #
  # @return [Array]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/collection.rb#66
  def connections; end

  # Returns an Array of dead connections.
  #
  # @return [Array]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/collection.rb#75
  def dead; end

  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/collection.rb#98
  def each(&block); end

  # Returns a connection.
  #
  # If there are no alive connections, returns a connection with least failures.
  # Delegates to selector's `#select` method to get the connection.
  #
  # @return [Connection]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/collection.rb#94
  def get_connection(options = T.unsafe(nil)); end

  # Returns an Array of hosts information in this collection as Hashes.
  #
  # @return [Array]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/collection.rb#58
  def hosts; end

  # Remove connection(s) from the collection
  #
  # @param connections [Connection, Array] A connection or an array of connections to remove
  # @return [self]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/collection.rb#126
  def remove(connections); end

  # Returns the value of attribute selector.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/collection.rb#42
  def selector; end

  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/collection.rb#107
  def size; end

  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/collection.rb#102
  def slice(*args); end
end

# source://opensearch-ruby//lib/opensearch/transport/transport/connections/collection.rb#40
OpenSearch::Transport::Transport::Connections::Collection::DEFAULT_SELECTOR = OpenSearch::Transport::Transport::Connections::Selector::RoundRobin

# Wraps the connection information and logic.
#
# The Connection instance wraps the host information (hostname, port, attributes, etc),
# as well as the "session" (a transport client object, such as a {HTTP::Faraday} instance).
#
# It provides methods to construct and properly encode the URLs and paths for passing them
# to the transport client object.
#
# It provides methods to handle connection livecycle (dead, alive, healthy).
#
# source://opensearch-ruby//lib/opensearch/transport/transport/connections/connection.rb#41
class OpenSearch::Transport::Transport::Connections::Connection
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @return [Connection] a new instance of Connection
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/connection.rb#50
  def initialize(arguments = T.unsafe(nil)); end

  # Equality operator based on connection protocol, host, port and attributes
  #
  # @return [Boolean]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/connection.rb#152
  def ==(other); end

  # Marks this connection as alive, ie. it is eligible to be returned from the pool by the selector.
  #
  # @return [self]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/connection.rb#109
  def alive!; end

  # Returns the value of attribute connection.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/connection.rb#44
  def connection; end

  # Marks this connection as dead, incrementing the `failures` counter and
  # storing the current time as `dead_since`.
  #
  # @return [self]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/connection.rb#96
  def dead!; end

  # Returns true when this connection has been marked dead, false otherwise.
  #
  # @return [Boolean]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/connection.rb#87
  def dead?; end

  # Returns the value of attribute dead_since.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/connection.rb#44
  def dead_since; end

  # Returns the value of attribute failures.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/connection.rb#44
  def failures; end

  # Returns the complete endpoint path with serialized parameters.
  #
  # @return [String]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/connection.rb#79
  def full_path(path, params = T.unsafe(nil)); end

  # Returns the complete endpoint URL with host, port, path and serialized parameters.
  #
  # @return [String]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/connection.rb#65
  def full_url(path, params = T.unsafe(nil)); end

  # Marks this connection as healthy, ie. a request has been successfully performed with it.
  #
  # @return [self]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/connection.rb#120
  def healthy!; end

  # Returns the value of attribute host.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/connection.rb#44
  def host; end

  # Returns the value of attribute options.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/connection.rb#44
  def options; end

  # Marks this connection as alive, if the required timeout has passed.
  #
  # @return [self, nil]
  # @see DEFAULT_RESURRECT_TIMEOUT
  # @see #resurrectable?
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/connection.rb#134
  def resurrect!; end

  # Returns true if the connection is eligible to be resurrected as alive, false otherwise.
  #
  # @return [Boolean]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/connection.rb#142
  def resurrectable?; end

  # @return [String]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/connection.rb#161
  def to_s; end
end

# source://opensearch-ruby//lib/opensearch/transport/transport/connections/connection.rb#42
OpenSearch::Transport::Transport::Connections::Connection::DEFAULT_RESURRECT_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://opensearch-ruby//lib/opensearch/transport/transport/connections/selector.rb#31
module OpenSearch::Transport::Transport::Connections::Selector; end

# @abstract Common functionality for connection selector implementations.
#
# source://opensearch-ruby//lib/opensearch/transport/transport/connections/selector.rb#34
module OpenSearch::Transport::Transport::Connections::Selector::Base
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/selector.rb#39
  def initialize(arguments = T.unsafe(nil)); end

  # Returns the value of attribute connections.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/selector.rb#35
  def connections; end

  # @abstract Selector strategies implement this method to
  #   select and return a connection from the pool.
  # @raise [NoMethodError]
  # @return [Connection]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/selector.rb#48
  def select(_options = T.unsafe(nil)); end
end

# "Random connection" selector strategy.
#
# source://opensearch-ruby//lib/opensearch/transport/transport/connections/selector.rb#55
class OpenSearch::Transport::Transport::Connections::Selector::Random
  include ::OpenSearch::Transport::Transport::Connections::Selector::Base

  # Returns a random connection from the collection.
  #
  # @return [Connections::Connection]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/selector.rb#62
  def select(_options = T.unsafe(nil)); end
end

# "Round-robin" selector strategy (default).
#
# source://opensearch-ruby//lib/opensearch/transport/transport/connections/selector.rb#69
class OpenSearch::Transport::Transport::Connections::Selector::RoundRobin
  include ::OpenSearch::Transport::Transport::Connections::Selector::Base

  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @return [RoundRobin] a new instance of RoundRobin
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/selector.rb#74
  def initialize(arguments = T.unsafe(nil)); end

  # Returns the next connection from the collection, rotating them in round-robin fashion.
  #
  # @return [Connections::Connection]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/connections/selector.rb#84
  def select(_options = T.unsafe(nil)); end
end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#91
OpenSearch::Transport::Transport::ERRORS = T.let(T.unsafe(nil), Hash)

# Generic client error
#
# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#32
class OpenSearch::Transport::Transport::Error < ::StandardError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#42
module OpenSearch::Transport::Transport::Errors; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::BadGateway < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::BadRequest < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::BlockedByWindowsParentalControls < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::ClientClosedRequest < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::Conflict < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::ExpectationFailed < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::Forbidden < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::Found < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::GatewayTimeout < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::Gone < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::HTTPToHTTPS < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::HTTPVersionNotSupported < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::ImATeapot < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::InternalServerError < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::LengthRequired < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::MethodNotAllowed < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::MovedPermanently < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::MultipleChoices < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::NotAcceptable < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::NotExtended < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::NotFound < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::NotImplemented < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::NotModified < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::PaymentRequired < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::PermanentRedirect < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::PreconditionFailed < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::ProxyAuthenticationRequired < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::RequestEntityTooLarge < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::RequestHeaderTooLarge < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::RequestTimeout < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::RequestURITooLong < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::RequestedRangeNotSatisfiable < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::SeeOther < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::ServiceUnavailable < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::TemporaryRedirect < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::TooManyConnectionsFromThisIP < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::TooManyRequests < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::Unauthorized < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::UnsupportedMediaType < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::UpgradeRequired < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::UseProxy < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#93
class OpenSearch::Transport::Transport::Errors::VariantAlsoNegotiates < ::OpenSearch::Transport::Transport::ServerError; end

# source://opensearch-ruby//lib/opensearch/transport/transport/http/faraday.rb#30
module OpenSearch::Transport::Transport::HTTP; end

# The default transport implementation, using the [_Faraday_](https://rubygems.org/gems/faraday)
# library for abstracting the HTTP client.
#
# @see Transport::Base
#
# source://opensearch-ruby//lib/opensearch/transport/transport/http/faraday.rb#36
class OpenSearch::Transport::Transport::HTTP::Faraday
  include ::OpenSearch::Loggable
  include ::OpenSearch::Transport::Transport::Base

  # Builds and returns a connection
  #
  # @return [Connections::Connection]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/http/faraday.rb#71
  def __build_connection(host, options = T.unsafe(nil), block = T.unsafe(nil)); end

  # Returns an array of implementation specific connection errors.
  #
  # @return [Array]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/http/faraday.rb#81
  def host_unreachable_exceptions; end

  # Performs the request by invoking {Transport::Base#perform_request} with a block.
  #
  # @return [Response]
  # @see Transport::Base#perform_request
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/http/faraday.rb#44
  def perform_request(method, path, params = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil), opts = T.unsafe(nil)); end

  private

  # source://opensearch-ruby//lib/opensearch/transport/transport/http/faraday.rb#87
  def user_agent_header(client); end
end

# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#44
OpenSearch::Transport::Transport::HTTP_STATUSES = T.let(T.unsafe(nil), Hash)

# Wraps the response from OpenSearch.
#
# source://opensearch-ruby//lib/opensearch/transport/transport/response.rb#32
class OpenSearch::Transport::Transport::Response
  # @param status [Integer] Response status code
  # @param body [String] Response body
  # @param headers [Hash] Response headers
  # @return [Response] a new instance of Response
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/response.rb#38
  def initialize(status, body, headers = T.unsafe(nil)); end

  # Returns the value of attribute body.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/response.rb#33
  def body; end

  # Returns the value of attribute headers.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/response.rb#33
  def headers; end

  # Returns the value of attribute status.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/response.rb#33
  def status; end
end

# source://opensearch-ruby//lib/opensearch/transport/transport/serializer/multi_json.rb#30
module OpenSearch::Transport::Transport::Serializer; end

# An abstract class for implementing serializer implementations
#
# source://opensearch-ruby//lib/opensearch/transport/transport/serializer/multi_json.rb#33
module OpenSearch::Transport::Transport::Serializer::Base
  # @param transport [Object] The instance of transport which uses this serializer
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/serializer/multi_json.rb#36
  def initialize(transport = T.unsafe(nil)); end
end

# A default JSON serializer (using [MultiJSON](http://rubygems.org/gems/multi_json))
#
# source://opensearch-ruby//lib/opensearch/transport/transport/serializer/multi_json.rb#43
class OpenSearch::Transport::Transport::Serializer::MultiJson
  include ::OpenSearch::Transport::Transport::Serializer::Base

  # Serialize a Hash to JSON string
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/serializer/multi_json.rb#54
  def dump(object, options = T.unsafe(nil)); end

  # De-serialize a Hash from JSON string
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/serializer/multi_json.rb#48
  def load(string, options = T.unsafe(nil)); end
end

# Elasticsearch server error (HTTP status 5xx)
#
# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#40
class OpenSearch::Transport::Transport::ServerError < ::OpenSearch::Transport::Transport::Error; end

# Handles node discovery ("sniffing")
#
# source://opensearch-ruby//lib/opensearch/transport/transport/sniffer.rb#32
class OpenSearch::Transport::Transport::Sniffer
  # @param transport [Object] A transport instance
  # @return [Sniffer] a new instance of Sniffer
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/sniffer.rb#40
  def initialize(transport); end

  # Retrieves the node list from the OpenSearch's
  # _Nodes Info API_
  # and returns a normalized Array of information suitable for passing to transport.
  #
  # Shuffles the collection before returning it when the `randomize_hosts` option is set for transport.
  #
  # @raise [SnifferTimeoutError]
  # @return [Array<Hash>]
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/sniffer.rb#54
  def hosts; end

  # Returns the value of attribute timeout.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/sniffer.rb#36
  def timeout; end

  # Sets the attribute timeout
  #
  # @param value the value to set the attribute timeout to.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/sniffer.rb#36
  def timeout=(_arg0); end

  # Returns the value of attribute transport.
  #
  # source://opensearch-ruby//lib/opensearch/transport/transport/sniffer.rb#35
  def transport; end

  private

  # source://opensearch-ruby//lib/opensearch/transport/transport/sniffer.rb#97
  def parse_address_port(publish_address); end

  # source://opensearch-ruby//lib/opensearch/transport/transport/sniffer.rb#87
  def parse_publish_address(publish_address); end

  # source://opensearch-ruby//lib/opensearch/transport/transport/sniffer.rb#80
  def perform_sniff_request; end
end

# source://opensearch-ruby//lib/opensearch/transport/transport/sniffer.rb#33
OpenSearch::Transport::Transport::Sniffer::PROTOCOL = T.let(T.unsafe(nil), String)

# Reloading connections timeout (1 sec by default)
#
# source://opensearch-ruby//lib/opensearch/transport/transport/errors.rb#36
class OpenSearch::Transport::Transport::SnifferTimeoutError < ::Timeout::Error; end

# source://opensearch-ruby//lib/opensearch.rb#96
class OpenSearch::UnsupportedProductError < ::StandardError
  # @return [UnsupportedProductError] a new instance of UnsupportedProductError
  #
  # source://opensearch-ruby//lib/opensearch.rb#97
  def initialize(message = T.unsafe(nil)); end
end

# source://opensearch-ruby//lib/opensearch/version.rb#28
OpenSearch::VERSION = T.let(T.unsafe(nil), String)
