# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `builder` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Builder
  class << self
    def check_for_name_collision(klass, method_name, defined_constant = T.unsafe(nil)); end
  end
end

Builder::BlankSlate = BasicObject
class Builder::IllegalBlockError < ::RuntimeError; end

module Builder::XChar
  class << self
    def encode(string); end
    def unicode(string); end
  end
end

Builder::XChar::CP1252 = T.let(T.unsafe(nil), Hash)
Builder::XChar::CP1252_DIFFERENCES = T.let(T.unsafe(nil), String)
Builder::XChar::ENCODING_BINARY = T.let(T.unsafe(nil), Encoding)
Builder::XChar::ENCODING_ISO1 = T.let(T.unsafe(nil), Encoding)
Builder::XChar::ENCODING_UTF8 = T.let(T.unsafe(nil), Encoding)
Builder::XChar::INVALID_XML_CHAR = T.let(T.unsafe(nil), Regexp)
Builder::XChar::PREDEFINED = T.let(T.unsafe(nil), Hash)
Builder::XChar::REPLACEMENT_CHAR = T.let(T.unsafe(nil), String)
Builder::XChar::UNICODE_EQUIVALENT = T.let(T.unsafe(nil), String)
Builder::XChar::VALID = T.let(T.unsafe(nil), Array)
Builder::XChar::XML_PREDEFINED = T.let(T.unsafe(nil), Regexp)

class Builder::XmlBase < ::BasicObject
  def initialize(indent = T.unsafe(nil), initial = T.unsafe(nil), encoding = T.unsafe(nil)); end

  def <<(text); end
  def explicit_nil_handling?; end
  def method_missing(sym, *args, &block); end
  def nil?; end
  def tag!(sym, *args, &block); end
  def text!(text); end

  private

  def _escape(text); end
  def _escape_attribute(text); end
  def _indent; end
  def _nested_structures(block); end
  def _newline; end
  def cache_method_call(sym); end

  class << self
    def cache_method_calls; end
    def cache_method_calls=(_arg0); end
  end
end

class Builder::XmlEvents < ::Builder::XmlMarkup
  def _end_tag(sym); end
  def _start_tag(sym, attrs, end_too = T.unsafe(nil)); end
  def text!(text); end
end

class Builder::XmlMarkup < ::Builder::XmlBase
  def initialize(options = T.unsafe(nil)); end

  def cdata!(text); end
  def cdata_value!(open, text); end
  def comment!(comment_text); end
  def declare!(inst, *args, &block); end
  def instruct!(directive_tag = T.unsafe(nil), attrs = T.unsafe(nil)); end
  def target!; end

  private

  def _attr_value(value); end
  def _end_tag(sym); end
  def _ensure_no_block(got_block); end
  def _insert_attributes(attrs, order = T.unsafe(nil)); end
  def _special(open, close, data = T.unsafe(nil), attrs = T.unsafe(nil), order = T.unsafe(nil)); end
  def _start_tag(sym, attrs, end_too = T.unsafe(nil)); end
  def _text(text); end
end
