# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `hashery` gem.
# Please instead update this file by running `bin/tapioca gem hashery`.

# source://hashery//lib/hashery/lru_hash.rb#3
module Hashery; end

# source://hashery//lib/hashery/lru_hash.rb#13
class Hashery::LRUHash
  include ::Enumerable

  # Initialize new LRUHash instance.
  #
  # max_size      -
  # default_value -
  # block         -
  #
  # @return [LRUHash] a new instance of LRUHash
  #
  # source://hashery//lib/hashery/lru_hash.rb#30
  def initialize(max_size, default_value = T.unsafe(nil), &block); end

  # source://hashery//lib/hashery/lru_hash.rb#114
  def [](key); end

  # source://hashery//lib/hashery/lru_hash.rb#197
  def []=(key, value); end

  # source://hashery//lib/hashery/lru_hash.rb#165
  def assoc(key); end

  # source://hashery//lib/hashery/lru_hash.rb#253
  def clear; end

  # Returns the value of attribute default.
  #
  # source://hashery//lib/hashery/lru_hash.rb#19
  def default; end

  # Sets the attribute default
  #
  # @param value the value to set the attribute default to.
  #
  # source://hashery//lib/hashery/lru_hash.rb#19
  def default=(_arg0); end

  # Returns the value of attribute default_proc.
  #
  # source://hashery//lib/hashery/lru_hash.rb#20
  def default_proc; end

  # Sets the attribute default_proc
  #
  # @param value the value to set the attribute default_proc to.
  #
  # source://hashery//lib/hashery/lru_hash.rb#20
  def default_proc=(_arg0); end

  # source://hashery//lib/hashery/lru_hash.rb#224
  def delete(key); end

  # source://hashery//lib/hashery/lru_hash.rb#231
  def delete_if; end

  # Iterate over each pair.
  #
  # Same as each pair.
  #
  # source://hashery//lib/hashery/lru_hash.rb#43
  def each; end

  # Iterate over each key.
  #
  # source://hashery//lib/hashery/lru_hash.rb#61
  def each_key; end

  # Iterate over each pair.
  #
  # source://hashery//lib/hashery/lru_hash.rb#43
  def each_pair; end

  # Iterate over each value.
  #
  # source://hashery//lib/hashery/lru_hash.rb#74
  def each_value; end

  # @return [Boolean]
  #
  # source://hashery//lib/hashery/lru_hash.rb#94
  def empty?; end

  # source://hashery//lib/hashery/lru_hash.rb#101
  def fetch(key, &b); end

  # @return [Boolean]
  #
  # source://hashery//lib/hashery/lru_hash.rb#137
  def has_key?(key); end

  # @return [Boolean]
  #
  # source://hashery//lib/hashery/lru_hash.rb#148
  def has_value?(value); end

  # @return [Boolean]
  #
  # source://hashery//lib/hashery/lru_hash.rb#137
  def include?(key); end

  # source://hashery//lib/hashery/lru_hash.rb#264
  def inspect; end

  # source://hashery//lib/hashery/lru_hash.rb#190
  def key(value); end

  # @return [Boolean]
  #
  # source://hashery//lib/hashery/lru_hash.rb#137
  def key?(key); end

  # source://hashery//lib/hashery/lru_hash.rb#123
  def keys; end

  # Returns the value of attribute max_size.
  #
  # source://hashery//lib/hashery/lru_hash.rb#17
  def max_size; end

  # source://hashery//lib/hashery/lru_hash.rb#240
  def max_size=(limit); end

  # @return [Boolean]
  #
  # source://hashery//lib/hashery/lru_hash.rb#137
  def member?(key); end

  # source://hashery//lib/hashery/lru_hash.rb#177
  def rassoc(value); end

  # Returns the value of attribute release_proc.
  #
  # source://hashery//lib/hashery/lru_hash.rb#21
  def release_proc; end

  # Sets the attribute release_proc
  #
  # @param value the value to set the attribute release_proc to.
  #
  # source://hashery//lib/hashery/lru_hash.rb#21
  def release_proc=(_arg0); end

  # Size of the hash.
  #
  # source://hashery//lib/hashery/lru_hash.rb#87
  def size; end

  # source://hashery//lib/hashery/lru_hash.rb#197
  def store(key, value); end

  # source://hashery//lib/hashery/lru_hash.rb#264
  def to_s; end

  # @return [Boolean]
  #
  # source://hashery//lib/hashery/lru_hash.rb#148
  def value?(value); end

  # source://hashery//lib/hashery/lru_hash.rb#130
  def values; end

  # source://hashery//lib/hashery/lru_hash.rb#158
  def values_at(*key_list); end

  private

  # Remove the oldest node returning the node
  #
  # source://hashery//lib/hashery/lru_hash.rb#314
  def delete_oldest; end

  # Iterate nodes.
  #
  # source://hashery//lib/hashery/lru_hash.rb#277
  def each_node; end

  # Move node to front.
  #
  # node - [Node]
  #
  # source://hashery//lib/hashery/lru_hash.rb#294
  def front(node); end

  # Normalize the argument in order to be usable as max_size
  # criterion is that n.to_i must be an Integer and it must
  # be larger than zero.
  #
  # n - [#to_i] max size
  #
  # @raise [ArgumentError]
  #
  # source://hashery//lib/hashery/lru_hash.rb#327
  def normalize_max(n); end

  # Remove the node and invoke release_proc
  # if set
  #
  # node - [Node]
  #
  # source://hashery//lib/hashery/lru_hash.rb#304
  def remove_node(node); end
end

# source://hashery//lib/hashery/lru_hash.rb#334
Hashery::LRUHash::FETCH = T.let(T.unsafe(nil), Proc)

# A single node in the doubly linked LRU list of nodes.
#
# source://hashery//lib/hashery/lru_hash.rb#337
class Hashery::LRUHash::Node < ::Struct
  # source://hashery//lib/hashery/lru_hash.rb#345
  def insert_after(node); end

  # Returns the value of attribute key
  #
  # @return [Object] the current value of key
  def key; end

  # Sets the attribute key
  #
  # @param value [Object] the value to set the attribute key to.
  # @return [Object] the newly set value
  def key=(_); end

  # Returns the value of attribute pred
  #
  # @return [Object] the current value of pred
  def pred; end

  # Sets the attribute pred
  #
  # @param value [Object] the value to set the attribute pred to.
  # @return [Object] the newly set value
  def pred=(_); end

  # Returns the value of attribute succ
  #
  # @return [Object] the current value of succ
  def succ; end

  # Sets the attribute succ
  #
  # @param value [Object] the value to set the attribute succ to.
  # @return [Object] the newly set value
  def succ=(_); end

  # source://hashery//lib/hashery/lru_hash.rb#338
  def unlink; end

  # Returns the value of attribute value
  #
  # @return [Object] the current value of value
  def value; end

  # Sets the attribute value
  #
  # @param value [Object] the value to set the attribute value to.
  # @return [Object] the newly set value
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end
