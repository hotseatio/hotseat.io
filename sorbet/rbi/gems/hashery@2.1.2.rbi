# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `hashery` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Hashery; end

class Hashery::LRUHash
  include ::Enumerable

  def initialize(max_size, default_value = T.unsafe(nil), &block); end

  def [](key); end
  def []=(key, value); end
  def assoc(key); end
  def clear; end
  def default; end
  def default=(_arg0); end
  def default_proc; end
  def default_proc=(_arg0); end
  def delete(key); end
  def delete_if; end
  def each; end
  def each_key; end
  def each_pair; end
  def each_value; end
  def empty?; end
  def fetch(key, &b); end
  def has_key?(key); end
  def has_value?(value); end
  def include?(key); end
  def inspect; end
  def key(value); end
  def key?(key); end
  def keys; end
  def max_size; end
  def max_size=(limit); end
  def member?(key); end
  def rassoc(value); end
  def release_proc; end
  def release_proc=(_arg0); end
  def size; end
  def store(key, value); end
  def to_s; end
  def value?(value); end
  def values; end
  def values_at(*key_list); end

  private

  def delete_oldest; end
  def each_node; end
  def front(node); end
  def normalize_max(n); end
  def remove_node(node); end
end

Hashery::LRUHash::FETCH = T.let(T.unsafe(nil), Proc)

class Hashery::LRUHash::Node < ::Struct
  def insert_after(node); end
  def key; end
  def key=(_); end
  def pred; end
  def pred=(_); end
  def succ; end
  def succ=(_); end
  def unlink; end
  def value; end
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end
