# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `webdrivers` gem.
# Please instead update this file by running `bin/tapioca gem webdrivers`.

module Webdrivers
  class << self
    def cache_time; end
    def cache_time=(_arg0); end
    def configure; end
    def install_dir; end
    def install_dir=(_arg0); end
    def logger; end
    def net_http_ssl_fix; end
    def proxy_addr; end
    def proxy_addr=(_arg0); end
    def proxy_pass; end
    def proxy_pass=(_arg0); end
    def proxy_port; end
    def proxy_port=(_arg0); end
    def proxy_user; end
    def proxy_user=(_arg0); end
  end
end

class Webdrivers::BrowserNotFound < ::StandardError; end

class Webdrivers::ChromeFinder
  class << self
    def location; end
    def version; end

    private

    def linux_location; end
    def linux_version(location); end
    def mac_location; end
    def mac_version(location); end
    def user_defined_location; end
    def win_location; end
    def win_version(location); end
    def wsl_location; end
    def wsl_version(location); end
  end
end

class Webdrivers::Chromedriver < ::Webdrivers::Common
  class << self
    def base_url; end
    def browser_version; end
    def chrome_version; end
    def current_version; end
    def latest_version; end

    private

    def apple_m1_compatible?(driver_version); end
    def browser_build_version; end
    def chrome_build_version; end
    def current_build_version; end
    def direct_url(driver_version); end
    def driver_filename(driver_version); end
    def file_name; end
    def latest_point_release(version); end
    def sufficient_binary?; end
  end
end

class Webdrivers::Common
  class << self
    def driver_path; end
    def remove; end
    def required_version; end
    def required_version=(_arg0); end
    def update; end

    private

    def binary_version; end
    def correct_binary?; end
    def download_url; end
    def download_version; end
    def exists?; end
    def normalize_version(version); end
    def sufficient_binary?; end
    def with_cache(file_name, driver_build = T.unsafe(nil), browser_build = T.unsafe(nil)); end
  end
end

class Webdrivers::ConnectionError < ::StandardError; end
Webdrivers::DEFAULT_CACHE_TIME = T.let(T.unsafe(nil), Integer)
Webdrivers::DEFAULT_INSTALL_DIR = T.let(T.unsafe(nil), String)

class Webdrivers::EdgeFinder
  class << self
    def location; end
    def version; end

    private

    def linux_location; end
    def linux_version(location); end
    def mac_location; end
    def mac_version(location); end
    def user_defined_location; end
    def win_location; end
    def win_version(location); end
  end
end

class Webdrivers::Edgedriver < ::Webdrivers::Chromedriver
  class << self
    def base_url; end
    def browser_version; end

    private

    def apple_m1_compatible?(driver_version); end
    def direct_url(driver_version); end
    def driver_filename(driver_version); end
    def failed_to_find_message(version); end
    def file_name; end
    def latest_point_release(version); end
    def linux_compatible?(driver_version); end
  end
end

class Webdrivers::Geckodriver < ::Webdrivers::Common
  class << self
    def base_url; end
    def current_version; end
    def latest_version; end

    private

    def direct_url(version); end
    def file_name; end
    def platform_ext; end
  end
end

class Webdrivers::IEdriver < ::Webdrivers::Common
  class << self
    def base_url; end
    def current_version; end
    def latest_version; end

    private

    def direct_url(version); end
    def download_manifest; end
    def downloads; end
    def file_name; end
  end
end

class Webdrivers::Logger < ::Selenium::WebDriver::Logger
  def initialize; end
end

class Webdrivers::Network
  class << self
    def get(url, limit = T.unsafe(nil)); end
    def get_response(url, limit = T.unsafe(nil)); end
    def get_url(url, limit = T.unsafe(nil)); end
    def http; end
    def using_proxy; end
  end
end

class Webdrivers::NetworkError < ::StandardError; end
class Webdrivers::Railtie < ::Rails::Railtie; end

class Webdrivers::System
  class << self
    def apple_m1_architecture?; end
    def bitsize; end
    def cache_version(file_name, version); end
    def cached_version(file_name); end
    def call(process, arg = T.unsafe(nil)); end
    def decompress_file(tempfile, file_name, target); end
    def delete(file); end
    def download(url, target); end
    def download_file(url, target); end
    def exists?(file); end
    def install_dir; end
    def platform; end
    def to_win32_path(path); end
    def to_wsl_path(path); end
    def untarbz2_file(filename); end
    def untargz_file(source, target); end
    def unzip_file(filename, driver_name); end
    def valid_cache?(file_name); end
    def wsl_v1?; end
  end
end

Webdrivers::VERSION = T.let(T.unsafe(nil), String)
class Webdrivers::VersionError < ::StandardError; end
