# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `device_detector` gem.
# Please instead update this file by running `bin/tapioca gem device_detector`.

# source://device_detector//lib/device_detector/version.rb#3
class DeviceDetector
  # @return [DeviceDetector] a new instance of DeviceDetector
  #
  # source://device_detector//lib/device_detector.rb#23
  def initialize(user_agent, headers = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#185
  def bot?; end

  # source://device_detector//lib/device_detector.rb#189
  def bot_name; end

  # Returns the value of attribute client_hint.
  #
  # source://device_detector//lib/device_detector.rb#21
  def client_hint; end

  # source://device_detector//lib/device_detector.rb#82
  def device_brand; end

  # source://device_detector//lib/device_detector.rb#76
  def device_name; end

  # source://device_detector//lib/device_detector.rb#92
  def device_type; end

  # source://device_detector//lib/device_detector.rb#41
  def encode_user_agent_if_needed(user_agent); end

  # source://device_detector//lib/device_detector.rb#54
  def full_version; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#181
  def known?; end

  # source://device_detector//lib/device_detector.rb#48
  def name; end

  # source://device_detector//lib/device_detector.rb#58
  def os_family; end

  # source://device_detector//lib/device_detector.rb#70
  def os_full_version; end

  # source://device_detector//lib/device_detector.rb#64
  def os_name; end

  # https://github.com/matomo-org/device-detector/blob/c235832dba13961ab0f71b681616baf1aa48de23/Parser/Device/AbstractDeviceParser.php#L1873
  #
  # source://device_detector//lib/device_detector.rb#30
  def set_user_agent(user_agent); end

  # Returns the value of attribute user_agent.
  #
  # source://device_detector//lib/device_detector.rb#21
  def user_agent; end

  private

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#264
  def android_mobile_fragment?; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#260
  def android_tablet_fragment?; end

  # source://device_detector//lib/device_detector.rb#220
  def bot; end

  # source://device_detector//lib/device_detector.rb#306
  def build_regex(src); end

  # source://device_detector//lib/device_detector.rb#224
  def client; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#297
  def desktop?; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#268
  def desktop_fragment?; end

  # This is a workaround until we support detecting mobile only browsers
  #
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#293
  def desktop_string?; end

  # source://device_detector//lib/device_detector.rb#228
  def device; end

  # https://github.com/matomo-org/device-detector/blob/827a3fab7e38c3274c18d2f5f5bc2a78b7ef4a3a/DeviceDetector.php#L921C5-L921C5
  #
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#237
  def fake_ua?; end

  # Related to issue mentionned in device.rb#1562
  #
  # source://device_detector//lib/device_detector.rb#252
  def fix_for_x_music; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#247
  def linux_fix?; end

  # https://github.com/matomo-org/device-detector/blob/be1c9ef486c247dc4886668da5ed0b1c49d90ba8/Parser/Client/Browser.php#L772
  # Fix mobile browser names e.g. Chrome => Chrome Mobile
  #
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#243
  def mobile_fix?; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#280
  def opera_tablet?; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#276
  def opera_tv_store?; end

  # source://device_detector//lib/device_detector.rb#232
  def os; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#256
  def skip_os_version?; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#284
  def tizen_samsung_tv?; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#272
  def touch_enabled?; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector.rb#288
  def uses_mobile_browser?; end

  class << self
    # source://device_detector//lib/device_detector.rb#208
    def cache; end

    # source://device_detector//lib/device_detector.rb#204
    def config; end

    # @yield [config]
    #
    # source://device_detector//lib/device_detector.rb#212
    def configure; end
  end
end

# source://device_detector//lib/device_detector/bot.rb#4
class DeviceDetector::Bot < ::DeviceDetector::Parser
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/bot.rb#5
  def bot?; end

  private

  # source://device_detector//lib/device_detector/bot.rb#11
  def filenames; end
end

# source://device_detector//lib/device_detector/browser.rb#4
class DeviceDetector::Browser
  class << self
    # @return [Boolean]
    #
    # source://device_detector//lib/device_detector/browser.rb#550
    def mobile_only_browser?(name); end
  end
end

# source://device_detector//lib/device_detector/browser.rb#5
DeviceDetector::Browser::AVAILABLE_BROWSERS = T.let(T.unsafe(nil), Hash)

# source://device_detector//lib/device_detector/browser.rb#527
DeviceDetector::Browser::BROWSER_FULL_TO_SHORT = T.let(T.unsafe(nil), Hash)

# source://device_detector//lib/device_detector/browser.rb#529
DeviceDetector::Browser::MOBILE_ONLY_BROWSERS = T.let(T.unsafe(nil), Set)

# source://device_detector//lib/device_detector/client.rb#4
class DeviceDetector::Client < ::DeviceDetector::Parser
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/client.rb#9
  def browser?; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/client.rb#5
  def known?; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/client.rb#13
  def mobile_only_browser?; end

  private

  # source://device_detector//lib/device_detector/client.rb#19
  def filenames; end
end

# source://device_detector//lib/device_detector/client_hint.rb#4
class DeviceDetector::ClientHint
  # @return [ClientHint] a new instance of ClientHint
  #
  # source://device_detector//lib/device_detector/client_hint.rb#13
  def initialize(headers); end

  # Returns the value of attribute app_name.
  #
  # source://device_detector//lib/device_detector/client_hint.rb#26
  def app_name; end

  # Returns the value of attribute browser_list.
  #
  # source://device_detector//lib/device_detector/client_hint.rb#26
  def browser_list; end

  # source://device_detector//lib/device_detector/client_hint.rb#29
  def browser_name; end

  # Returns the value of attribute full_version.
  #
  # source://device_detector//lib/device_detector/client_hint.rb#26
  def full_version; end

  # Returns the value of attribute headers.
  #
  # source://device_detector//lib/device_detector/client_hint.rb#26
  def headers; end

  # Returns the value of attribute mobile.
  #
  # source://device_detector//lib/device_detector/client_hint.rb#26
  def mobile; end

  # Returns the value of attribute model.
  #
  # source://device_detector//lib/device_detector/client_hint.rb#26
  def model; end

  # source://device_detector//lib/device_detector/client_hint.rb#54
  def os_family; end

  # source://device_detector//lib/device_detector/client_hint.rb#41
  def os_name; end

  # source://device_detector//lib/device_detector/client_hint.rb#48
  def os_short_name; end

  # source://device_detector//lib/device_detector/client_hint.rb#35
  def os_version; end

  # Returns the value of attribute platform.
  #
  # source://device_detector//lib/device_detector/client_hint.rb#26
  def platform; end

  # Returns the value of attribute platform_version.
  #
  # source://device_detector//lib/device_detector/client_hint.rb#26
  def platform_version; end

  private

  # https://github.com/matomo-org/device-detector/blob/28211c6f411528abf41304e07b886fdf322a49b7/Parser/OperatingSystem.php#L330
  #
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/client_hint.rb#70
  def android_app?; end

  # source://device_detector//lib/device_detector/client_hint.rb#108
  def app_name_from_headers; end

  # source://device_detector//lib/device_detector/client_hint.rb#79
  def available_browsers; end

  # source://device_detector//lib/device_detector/client_hint.rb#83
  def available_osses; end

  # source://device_detector//lib/device_detector/client_hint.rb#75
  def browser_name_from_list; end

  # source://device_detector//lib/device_detector/client_hint.rb#116
  def extract_app_name; end

  # source://device_detector//lib/device_detector/client_hint.rb#143
  def extract_browser_list; end

  # source://device_detector//lib/device_detector/client_hint.rb#154
  def extract_browser_name_and_version(component); end

  # source://device_detector//lib/device_detector/client_hint.rb#175
  def extract_model; end

  # source://device_detector//lib/device_detector/client_hint.rb#62
  def extract_platform_version; end

  # source://device_detector//lib/device_detector/client_hint.rb#123
  def hint_app_names; end

  # source://device_detector//lib/device_detector/client_hint.rb#129
  def hint_filenames; end

  # source://device_detector//lib/device_detector/client_hint.rb#133
  def hint_filepaths; end

  # https://github.com/matomo-org/device-detector/blob/be1c9ef486c247dc4886668da5ed0b1c49d90ba8/Parser/Client/Browser.php#L749
  # If version from client hints report 2022 or 2022.04, then is the Iridium browser
  # https://iridiumbrowser.de/news/2022/05/16/version-2022-04-released
  #
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/client_hint.rb#100
  def is_iridium?; end

  # source://device_detector//lib/device_detector/client_hint.rb#139
  def load_hint_app_names; end

  # https://github.com/matomo-org/device-detector/blob/be1c9ef486c247dc4886668da5ed0b1c49d90ba8/Parser/Client/Browser.php#L865
  #
  # source://device_detector//lib/device_detector/client_hint.rb#162
  def name_from_known_browsers(name); end

  # https://github.com/matomo-org/device-detector/blob/28211c6f411528abf41304e07b886fdf322a49b7/Parser/OperatingSystem.php#L434
  #
  # source://device_detector//lib/device_detector/client_hint.rb#88
  def windows_version; end
end

# source://device_detector//lib/device_detector/client_hint.rb#10
class DeviceDetector::ClientHint::HintBrowser < ::Struct; end

# source://device_detector//lib/device_detector/client_hint.rb#7
DeviceDetector::ClientHint::REGEX_CACHE = T.let(T.unsafe(nil), DeviceDetector::MemoryCache)

# source://device_detector//lib/device_detector/client_hint.rb#5
DeviceDetector::ClientHint::ROOT = T.let(T.unsafe(nil), String)

# source://device_detector//lib/device_detector/device.rb#4
class DeviceDetector::Device < ::DeviceDetector::Parser
  # source://device_detector//lib/device_detector/device.rb#1726
  def brand; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/device.rb#1710
  def known?; end

  # source://device_detector//lib/device_detector/device.rb#1714
  def name; end

  # source://device_detector//lib/device_detector/device.rb#1718
  def type; end

  private

  # The order of files needs to be the same as the order of device
  # parser classes used in the piwik project.
  #
  # source://device_detector//lib/device_detector/device.rb#1747
  def filenames; end

  # source://device_detector//lib/device_detector/device.rb#1737
  def fix_for_x_music; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/device.rb#1800
  def hbbtv?; end

  # source://device_detector//lib/device_detector/device.rb#1760
  def matching_regex; end

  # source://device_detector//lib/device_detector/device.rb#1822
  def parse_regexes(path, raw_regexes); end

  # Finds the first match of the string in a list of regexes.
  # Handles exception with special characters caused by bug in Ruby regex
  #
  # @param user_agent [String] User Agent string
  # @param regex_list [Array<Regex>] List of regexes
  # @return [MatchData, nil] MatchData if string matches any regexp, nil otherwise
  #
  # source://device_detector//lib/device_detector/device.rb#1789
  def regex_find(user_agent, regex_list); end

  # source://device_detector//lib/device_detector/device.rb#1810
  def regexes_for_hbbtv; end

  # source://device_detector//lib/device_detector/device.rb#1814
  def regexes_for_shelltv; end

  # source://device_detector//lib/device_detector/device.rb#1818
  def regexes_other; end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/device.rb#1805
  def shelltv?; end

  # source://device_detector//lib/device_detector/device.rb#1741
  def vendor_fragment; end
end

# source://device_detector//lib/device_detector/device.rb#23
DeviceDetector::Device::DEVICE_BRANDS = T.let(T.unsafe(nil), Hash)

# order is relevant for testing with fixtures
#
# source://device_detector//lib/device_detector/device.rb#6
DeviceDetector::Device::DEVICE_NAMES = T.let(T.unsafe(nil), Array)

# source://device_detector//lib/device_detector/memory_cache.rb#4
class DeviceDetector::MemoryCache
  # @return [MemoryCache] a new instance of MemoryCache
  #
  # source://device_detector//lib/device_detector/memory_cache.rb#11
  def initialize(config); end

  # Returns the value of attribute data.
  #
  # source://device_detector//lib/device_detector/memory_cache.rb#8
  def data; end

  # source://device_detector//lib/device_detector/memory_cache.rb#27
  def get(key); end

  # source://device_detector//lib/device_detector/memory_cache.rb#32
  def get_or_set(key, value = T.unsafe(nil)); end

  # Returns the value of attribute max_keys.
  #
  # source://device_detector//lib/device_detector/memory_cache.rb#8
  def max_keys; end

  # source://device_detector//lib/device_detector/memory_cache.rb#17
  def set(key, value); end

  private

  # source://device_detector//lib/device_detector/memory_cache.rb#44
  def get_hit(key); end

  # Returns the value of attribute lock.
  #
  # source://device_detector//lib/device_detector/memory_cache.rb#8
  def lock; end

  # source://device_detector//lib/device_detector/memory_cache.rb#51
  def purge_cache; end
end

# source://device_detector//lib/device_detector/memory_cache.rb#5
DeviceDetector::MemoryCache::DEFAULT_MAX_KEYS = T.let(T.unsafe(nil), Integer)

# source://device_detector//lib/device_detector/memory_cache.rb#6
DeviceDetector::MemoryCache::STORES_NIL_VALUE = T.let(T.unsafe(nil), Symbol)

# source://device_detector//lib/device_detector/metadata_extractor.rb#4
class DeviceDetector::MetadataExtractor < ::Struct
  # source://device_detector//lib/device_detector/metadata_extractor.rb#5
  def call; end

  private

  # source://device_detector//lib/device_detector/metadata_extractor.rb#16
  def extract_metadata; end

  # @raise [NotImplementedError]
  #
  # source://device_detector//lib/device_detector/metadata_extractor.rb#11
  def metadata_string; end

  # source://device_detector//lib/device_detector/metadata_extractor.rb#24
  def regex; end
end

# source://device_detector//lib/device_detector/model_extractor.rb#4
class DeviceDetector::ModelExtractor < ::DeviceDetector::MetadataExtractor
  # source://device_detector//lib/device_detector/model_extractor.rb#5
  def call; end

  private

  # source://device_detector//lib/device_detector/model_extractor.rb#16
  def metadata_string; end

  # source://device_detector//lib/device_detector/model_extractor.rb#20
  def regex; end
end

# source://device_detector//lib/device_detector/name_extractor.rb#4
class DeviceDetector::NameExtractor < ::DeviceDetector::MetadataExtractor
  # source://device_detector//lib/device_detector/name_extractor.rb#5
  def call; end

  private

  # source://device_detector//lib/device_detector/name_extractor.rb#15
  def metadata_string; end
end

# source://device_detector//lib/device_detector/os.rb#6
class DeviceDetector::OS < ::DeviceDetector::Parser
  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/os.rb#19
  def desktop?; end

  # source://device_detector//lib/device_detector/os.rb#15
  def family; end

  # source://device_detector//lib/device_detector/os.rb#23
  def full_version; end

  # source://device_detector//lib/device_detector/os.rb#7
  def name; end

  # source://device_detector//lib/device_detector/os.rb#11
  def short_name; end

  private

  # source://device_detector//lib/device_detector/os.rb#233
  def filenames; end

  # source://device_detector//lib/device_detector/os.rb#30
  def os_info; end
end

# source://device_detector//lib/device_detector/os.rb#42
DeviceDetector::OS::DESKTOP_OSS = T.let(T.unsafe(nil), Set)

# source://device_detector//lib/device_detector/os.rb#191
DeviceDetector::OS::DOWNCASED_OPERATING_SYSTEMS = T.let(T.unsafe(nil), Hash)

# source://device_detector//lib/device_detector/os.rb#229
DeviceDetector::OS::FAMILY_TO_OS = T.let(T.unsafe(nil), Hash)

# OS short codes mapped to long names
#
# source://device_detector//lib/device_detector/os.rb#49
DeviceDetector::OS::OPERATING_SYSTEMS = T.let(T.unsafe(nil), Hash)

# source://device_detector//lib/device_detector/os.rb#195
DeviceDetector::OS::OS_FAMILIES = T.let(T.unsafe(nil), Hash)

# source://device_detector//lib/device_detector/parser.rb#4
class DeviceDetector::Parser
  # @return [Parser] a new instance of Parser
  #
  # source://device_detector//lib/device_detector/parser.rb#10
  def initialize(user_agent); end

  # source://device_detector//lib/device_detector/parser.rb#22
  def full_version; end

  # source://device_detector//lib/device_detector/parser.rb#16
  def name; end

  # Returns the value of attribute user_agent.
  #
  # source://device_detector//lib/device_detector/parser.rb#14
  def user_agent; end

  private

  # source://device_detector//lib/device_detector/parser.rb#109
  def build_regex(src); end

  # @raise [NotImplementedError]
  #
  # source://device_detector//lib/device_detector/parser.rb#44
  def filenames; end

  # source://device_detector//lib/device_detector/parser.rb#48
  def filepaths; end

  # source://device_detector//lib/device_detector/parser.rb#113
  def from_cache(key, &block); end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/parser.rb#70
  def is_device_yml_file?(file_path); end

  # @return [Boolean]
  #
  # source://device_detector//lib/device_detector/parser.rb#74
  def is_vendor_yml_file?(file_path); end

  # source://device_detector//lib/device_detector/parser.rb#60
  def load_regexes(file_paths); end

  # source://device_detector//lib/device_detector/parser.rb#34
  def matching_regex; end

  # source://device_detector//lib/device_detector/parser.rb#99
  def parse_regexes(path, raw_regexes); end

  # source://device_detector//lib/device_detector/parser.rb#30
  def regex_meta; end

  # source://device_detector//lib/device_detector/parser.rb#40
  def regexes; end

  # source://device_detector//lib/device_detector/parser.rb#54
  def regexes_for(file_paths); end

  # source://device_detector//lib/device_detector/parser.rb#82
  def rewrite_device_object!(object); end

  # source://device_detector//lib/device_detector/parser.rb#78
  def rewrite_vendor_object!(object); end

  # source://device_detector//lib/device_detector/parser.rb#86
  def symbolize_keys!(object); end
end

# source://device_detector//lib/device_detector/parser.rb#7
DeviceDetector::Parser::REGEX_CACHE = T.let(T.unsafe(nil), DeviceDetector::MemoryCache)

# source://device_detector//lib/device_detector/parser.rb#5
DeviceDetector::Parser::ROOT = T.let(T.unsafe(nil), String)

# source://device_detector//lib/device_detector/version.rb#4
DeviceDetector::VERSION = T.let(T.unsafe(nil), String)

# source://device_detector//lib/device_detector/vendor_fragment.rb#6
class DeviceDetector::VendorFragment < ::DeviceDetector::Parser
  # source://device_detector//lib/device_detector/vendor_fragment.rb#7
  def name; end

  private

  # source://device_detector//lib/device_detector/vendor_fragment.rb#21
  def filenames; end

  # source://device_detector//lib/device_detector/vendor_fragment.rb#13
  def vendor_fragment_info; end
end

# source://device_detector//lib/device_detector/version_extractor.rb#4
class DeviceDetector::VersionExtractor < ::DeviceDetector::MetadataExtractor
  # source://device_detector//lib/device_detector/version_extractor.rb#10
  def call; end

  private

  # source://device_detector//lib/device_detector/version_extractor.rb#35
  def metadata_string; end

  # source://device_detector//lib/device_detector/version_extractor.rb#20
  def os_version_by_regexes; end
end

# source://device_detector//lib/device_detector/version_extractor.rb#5
DeviceDetector::VersionExtractor::MAJOR_VERSION_2 = T.let(T.unsafe(nil), Gem::Version)

# source://device_detector//lib/device_detector/version_extractor.rb#6
DeviceDetector::VersionExtractor::MAJOR_VERSION_3 = T.let(T.unsafe(nil), Gem::Version)

# source://device_detector//lib/device_detector/version_extractor.rb#7
DeviceDetector::VersionExtractor::MAJOR_VERSION_4 = T.let(T.unsafe(nil), Gem::Version)

# source://device_detector//lib/device_detector/version_extractor.rb#8
DeviceDetector::VersionExtractor::MAJOR_VERSION_8 = T.let(T.unsafe(nil), Gem::Version)
