# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rails-erd` gem.
# Please instead update this file by running `bin/tapioca gem rails-erd`.

# Welcome to the API documentation of Rails ERD. If you wish to extend or
# customise the output that is generated by Rails ERD, you have come to the
# right place.
#
# == Creating custom output
#
# If you want to create your own kind of diagrams, or some other output, a
# good starting point is the RailsERD::Diagram class. It can serve as the base
# of your output generation code.
#
# == Options
#
# Rails ERD provides several options that allow you to customise the
# generation of the diagram and the domain model itself. For an overview of
# all options available in Rails ERD, see README.rdoc.
#
# You can specify the option on the command line if you use Rails ERD with
# Rake:
#
#   % rake erd orientation=vertical title='My model diagram'
#
# When using Rails ERD from within Ruby, you can set the options on the
# RailsERD namespace module:
#
#   RailsERD.options.orientation = :vertical
#   RailsERD.options.title = "My model diagram"
module RailsERD
  class << self
    def default_options; end
    def load_tasks; end
    def loaded_tasks; end
    def loaded_tasks=(val); end

    # Access to default options. Any instance of RailsERD::Domain and
    # RailsERD::Diagram will use these options unless overridden.
    def options; end

    # Access to default options. Any instance of RailsERD::Domain and
    # RailsERD::Diagram will use these options unless overridden.
    def options=(_arg0); end
  end
end

class RailsERD::Config
  # @return [Config] a new instance of Config
  def initialize; end

  def load(extra_config_file = T.unsafe(nil)); end

  # Returns the value of attribute options.
  def options; end

  private

  def load_file(path); end
  def normalize_value(key, value); end

  class << self
    def font_names_based_on_os; end
    def load(extra_config_file = T.unsafe(nil)); end

    # @return [Boolean]
    def use_os_x_fonts?; end
  end
end

RailsERD::Config::CURRENT_CONFIG_FILE = T.let(T.unsafe(nil), String)
RailsERD::Config::USER_WIDE_CONFIG_FILE = T.let(T.unsafe(nil), String)

# @private :nodoc:
module RailsERD::Inspectable
  def inspection_attributes(*attributes); end
end

# Rails ERD integrates with Rails 3. If you add it to your +Gemfile+, you
# will gain a Rake task called +erd+, which you can use to generate diagrams
# of your domain model.
class RailsERD::Railtie < ::Rails::Railtie; end
