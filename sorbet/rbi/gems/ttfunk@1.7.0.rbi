# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ttfunk` gem.
# Please instead update this file by running `bin/tapioca gem ttfunk`.

# source://ttfunk//lib/ttfunk/aggregate.rb#3
module TTFunk; end

# source://ttfunk//lib/ttfunk/aggregate.rb#4
class TTFunk::Aggregate
  private

  # source://ttfunk//lib/ttfunk/aggregate.rb#7
  def coerce(other); end
end

# source://ttfunk//lib/ttfunk/bin_utils.rb#4
module TTFunk::BinUtils
  extend ::TTFunk::BinUtils

  # turns a (sorted) sequence of values into a series of two-element arrays
  # where the first element is the start and the second is the length
  #
  # source://ttfunk//lib/ttfunk/bin_utils.rb#39
  def rangify(values); end

  # assumes big-endian
  #
  # source://ttfunk//lib/ttfunk/bin_utils.rb#17
  def slice_int(value, bit_width:, slice_count:); end

  # assumes big-endian
  #
  # source://ttfunk//lib/ttfunk/bin_utils.rb#6
  def stitch_int(arr, bit_width:); end

  # source://ttfunk//lib/ttfunk/bin_utils.rb#25
  def twos_comp_to_int(num, bit_width:); end
end

# source://ttfunk//lib/ttfunk/bit_field.rb#4
class TTFunk::BitField
  # @return [BitField] a new instance of BitField
  #
  # source://ttfunk//lib/ttfunk/bit_field.rb#7
  def initialize(value = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/bit_field.rb#27
  def dup; end

  # source://ttfunk//lib/ttfunk/bit_field.rb#19
  def off(pos); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/bit_field.rb#23
  def off?(pos); end

  # source://ttfunk//lib/ttfunk/bit_field.rb#11
  def on(pos); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/bit_field.rb#15
  def on?(pos); end

  # Returns the value of attribute value.
  #
  # source://ttfunk//lib/ttfunk/bit_field.rb#5
  def value; end
end

# source://ttfunk//lib/ttfunk/collection.rb#4
class TTFunk::Collection
  include ::Enumerable

  # @raise [ArgumentError]
  # @return [Collection] a new instance of Collection
  #
  # source://ttfunk//lib/ttfunk/collection.rb#19
  def initialize(io); end

  # source://ttfunk//lib/ttfunk/collection.rb#43
  def [](index); end

  # source://ttfunk//lib/ttfunk/collection.rb#32
  def count; end

  # source://ttfunk//lib/ttfunk/collection.rb#36
  def each; end

  class << self
    # source://ttfunk//lib/ttfunk/collection.rb#7
    def open(path); end
  end
end

# source://ttfunk//lib/ttfunk/directory.rb#4
class TTFunk::Directory
  # @return [Directory] a new instance of Directory
  #
  # source://ttfunk//lib/ttfunk/directory.rb#8
  def initialize(io, offset = T.unsafe(nil)); end

  # Returns the value of attribute scaler_type.
  #
  # source://ttfunk//lib/ttfunk/directory.rb#6
  def scaler_type; end

  # Returns the value of attribute tables.
  #
  # source://ttfunk//lib/ttfunk/directory.rb#5
  def tables; end
end

# source://ttfunk//lib/ttfunk/encoded_string.rb#9
class TTFunk::DuplicatePlaceholderError < ::StandardError; end

# source://ttfunk//lib/ttfunk/encoded_string.rb#12
class TTFunk::EncodedString
  # @return [EncodedString] a new instance of EncodedString
  # @yield [_self]
  # @yieldparam _self [TTFunk::EncodedString] the object that the method was called on
  #
  # source://ttfunk//lib/ttfunk/encoded_string.rb#13
  def initialize; end

  # source://ttfunk//lib/ttfunk/encoded_string.rb#17
  def <<(obj); end

  # source://ttfunk//lib/ttfunk/encoded_string.rb#36
  def align!(width = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/encoded_string.rb#57
  def bytes; end

  # source://ttfunk//lib/ttfunk/encoded_string.rb#44
  def length; end

  # source://ttfunk//lib/ttfunk/encoded_string.rb#77
  def placeholders; end

  # source://ttfunk//lib/ttfunk/encoded_string.rb#65
  def resolve_placeholder(name, value); end

  # source://ttfunk//lib/ttfunk/encoded_string.rb#48
  def string; end

  # source://ttfunk//lib/ttfunk/encoded_string.rb#61
  def unresolved_string; end

  private

  # source://ttfunk//lib/ttfunk/encoded_string.rb#83
  def add_placeholder(new_placeholder, pos = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/encoded_string.rb#93
  def io; end
end

# source://ttfunk//lib/ttfunk.rb#24
class TTFunk::Error < ::StandardError; end

# source://ttfunk//lib/ttfunk.rb#26
class TTFunk::File
  # @return [File] a new instance of File
  #
  # source://ttfunk//lib/ttfunk.rb#61
  def initialize(contents, offset = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk.rb#66
  def ascent; end

  # source://ttfunk//lib/ttfunk.rb#81
  def bbox; end

  # source://ttfunk//lib/ttfunk.rb#137
  def cff; end

  # source://ttfunk//lib/ttfunk.rb#93
  def cmap; end

  # Returns the value of attribute contents.
  #
  # source://ttfunk//lib/ttfunk.rb#27
  def contents; end

  # source://ttfunk//lib/ttfunk.rb#71
  def descent; end

  # source://ttfunk//lib/ttfunk.rb#148
  def digital_signature; end

  # Returns the value of attribute directory.
  #
  # source://ttfunk//lib/ttfunk.rb#28
  def directory; end

  # source://ttfunk//lib/ttfunk.rb#85
  def directory_info(tag); end

  # source://ttfunk//lib/ttfunk.rb#155
  def find_glyph(glyph_id); end

  # source://ttfunk//lib/ttfunk.rb#125
  def glyph_locations; end

  # source://ttfunk//lib/ttfunk.rb#129
  def glyph_outlines; end

  # source://ttfunk//lib/ttfunk.rb#89
  def header; end

  # source://ttfunk//lib/ttfunk.rb#97
  def horizontal_header; end

  # source://ttfunk//lib/ttfunk.rb#101
  def horizontal_metrics; end

  # source://ttfunk//lib/ttfunk.rb#109
  def kerning; end

  # source://ttfunk//lib/ttfunk.rb#76
  def line_gap; end

  # source://ttfunk//lib/ttfunk.rb#105
  def maximum_profile; end

  # source://ttfunk//lib/ttfunk.rb#113
  def name; end

  # source://ttfunk//lib/ttfunk.rb#117
  def os2; end

  # source://ttfunk//lib/ttfunk.rb#121
  def postscript; end

  # source://ttfunk//lib/ttfunk.rb#133
  def sbix; end

  # source://ttfunk//lib/ttfunk.rb#141
  def vertical_origins; end

  class << self
    # source://ttfunk//lib/ttfunk.rb#34
    def from_dfont(file, which = T.unsafe(nil)); end

    # source://ttfunk//lib/ttfunk.rb#38
    def from_ttc(file, which = T.unsafe(nil)); end

    # source://ttfunk//lib/ttfunk.rb#30
    def open(io_or_path); end

    # @raise [ArgumentError]
    #
    # source://ttfunk//lib/ttfunk.rb#42
    def verify_and_open(io_or_path); end
  end
end

# source://ttfunk//lib/ttfunk/max.rb#4
class TTFunk::Max < ::TTFunk::Aggregate
  # @return [Max] a new instance of Max
  #
  # source://ttfunk//lib/ttfunk/max.rb#7
  def initialize(init_value = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/max.rb#12
  def <<(new_value); end

  # Returns the value of attribute value.
  #
  # source://ttfunk//lib/ttfunk/max.rb#5
  def value; end

  # source://ttfunk//lib/ttfunk/max.rb#20
  def value_or(default); end
end

# source://ttfunk//lib/ttfunk/min.rb#4
class TTFunk::Min < ::TTFunk::Aggregate
  # @return [Min] a new instance of Min
  #
  # source://ttfunk//lib/ttfunk/min.rb#7
  def initialize(init_value = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/min.rb#12
  def <<(new_value); end

  # Returns the value of attribute value.
  #
  # source://ttfunk//lib/ttfunk/min.rb#5
  def value; end

  # source://ttfunk//lib/ttfunk/min.rb#20
  def value_or(default); end
end

# source://ttfunk//lib/ttfunk/otf_encoder.rb#4
class TTFunk::OTFEncoder < ::TTFunk::TTFEncoder
  private

  # source://ttfunk//lib/ttfunk/otf_encoder.rb#25
  def base_table; end

  # source://ttfunk//lib/ttfunk/otf_encoder.rb#29
  def cff_table; end

  # source://ttfunk//lib/ttfunk/otf_encoder.rb#52
  def collect_glyphs(glyph_ids); end

  # CFF fonts don't maintain a glyf table, all glyph information is stored
  # in the charstrings index. Return an empty hash here to indicate a glyf
  # table should not be encoded.
  #
  # source://ttfunk//lib/ttfunk/otf_encoder.rb#14
  def glyf_table; end

  # Since CFF fonts don't maintain a glyf table, they also don't maintain
  # a loca table. Return an empty hash here to indicate a loca table
  # shouldn't be encoded.
  #
  # source://ttfunk//lib/ttfunk/otf_encoder.rb#21
  def loca_table; end

  # source://ttfunk//lib/ttfunk/otf_encoder.rb#45
  def optimal_table_order; end

  # source://ttfunk//lib/ttfunk/otf_encoder.rb#37
  def tables; end

  # source://ttfunk//lib/ttfunk/otf_encoder.rb#33
  def vorg_table; end
end

# source://ttfunk//lib/ttfunk/otf_encoder.rb#5
TTFunk::OTFEncoder::OPTIMAL_TABLE_ORDER = T.let(T.unsafe(nil), Array)

# source://ttfunk//lib/ttfunk/one_based_array.rb#4
class TTFunk::OneBasedArray
  include ::Enumerable

  # @return [OneBasedArray] a new instance of OneBasedArray
  #
  # source://ttfunk//lib/ttfunk/one_based_array.rb#7
  def initialize(size = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/one_based_array.rb#11
  def [](idx); end

  # source://ttfunk//lib/ttfunk/one_based_array.rb#28
  def each(&block); end

  # source://ttfunk//lib/ttfunk/one_based_array.rb#20
  def size; end

  # source://ttfunk//lib/ttfunk/one_based_array.rb#24
  def to_ary; end

  private

  # Returns the value of attribute entries.
  #
  # source://ttfunk//lib/ttfunk/one_based_array.rb#34
  def entries; end
end

# source://ttfunk//lib/ttfunk/placeholder.rb#4
class TTFunk::Placeholder
  # @return [Placeholder] a new instance of Placeholder
  #
  # source://ttfunk//lib/ttfunk/placeholder.rb#8
  def initialize(name, length: T.unsafe(nil)); end

  # Returns the value of attribute length.
  #
  # source://ttfunk//lib/ttfunk/placeholder.rb#6
  def length; end

  # Returns the value of attribute name.
  #
  # source://ttfunk//lib/ttfunk/placeholder.rb#6
  def name; end

  # Returns the value of attribute position.
  #
  # source://ttfunk//lib/ttfunk/placeholder.rb#5
  def position; end

  # Sets the attribute position
  #
  # @param value the value to set the attribute position to.
  #
  # source://ttfunk//lib/ttfunk/placeholder.rb#5
  def position=(_arg0); end
end

# source://ttfunk//lib/ttfunk/reader.rb#4
module TTFunk::Reader
  private

  # For debugging purposes
  #
  # source://ttfunk//lib/ttfunk/reader.rb#32
  def hexdump(string); end

  # source://ttfunk//lib/ttfunk/reader.rb#7
  def io; end

  # source://ttfunk//lib/ttfunk/reader.rb#23
  def parse_from(position); end

  # source://ttfunk//lib/ttfunk/reader.rb#11
  def read(bytes, format); end

  # source://ttfunk//lib/ttfunk/reader.rb#15
  def read_signed(count); end

  # source://ttfunk//lib/ttfunk/reader.rb#19
  def to_signed(number); end
end

# source://ttfunk//lib/ttfunk/resource_file.rb#4
class TTFunk::ResourceFile
  # @return [ResourceFile] a new instance of ResourceFile
  #
  # source://ttfunk//lib/ttfunk/resource_file.rb#14
  def initialize(io); end

  # source://ttfunk//lib/ttfunk/resource_file.rb#61
  def [](type, index = T.unsafe(nil)); end

  # Returns the value of attribute map.
  #
  # source://ttfunk//lib/ttfunk/resource_file.rb#5
  def map; end

  # source://ttfunk//lib/ttfunk/resource_file.rb#73
  def resources_for(type); end

  private

  # source://ttfunk//lib/ttfunk/resource_file.rb#79
  def parse_from(offset); end

  class << self
    # source://ttfunk//lib/ttfunk/resource_file.rb#7
    def open(path); end
  end
end

# source://ttfunk//lib/ttfunk/sci_form.rb#4
class TTFunk::SciForm
  # @return [SciForm] a new instance of SciForm
  #
  # source://ttfunk//lib/ttfunk/sci_form.rb#8
  def initialize(significand, exponent = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/sci_form.rb#17
  def ==(other); end

  def eql?(_arg0); end

  # Returns the value of attribute exponent.
  #
  # source://ttfunk//lib/ttfunk/sci_form.rb#5
  def exponent; end

  # Returns the value of attribute significand.
  #
  # source://ttfunk//lib/ttfunk/sci_form.rb#5
  def significand; end

  # source://ttfunk//lib/ttfunk/sci_form.rb#13
  def to_f; end
end

# source://ttfunk//lib/ttfunk/sub_table.rb#6
class TTFunk::SubTable
  include ::TTFunk::Reader

  # @return [SubTable] a new instance of SubTable
  #
  # source://ttfunk//lib/ttfunk/sub_table.rb#14
  def initialize(file, offset, length = T.unsafe(nil)); end

  # end of table
  #
  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/sub_table.rb#22
  def eot?; end

  # Returns the value of attribute file.
  #
  # source://ttfunk//lib/ttfunk/sub_table.rb#12
  def file; end

  # Returns the value of attribute length.
  #
  # source://ttfunk//lib/ttfunk/sub_table.rb#12
  def length; end

  # source://ttfunk//lib/ttfunk/sub_table.rb#30
  def read(*args); end

  # Returns the value of attribute table_offset.
  #
  # source://ttfunk//lib/ttfunk/sub_table.rb#12
  def table_offset; end
end

# source://ttfunk//lib/ttfunk/sub_table.rb#7
class TTFunk::SubTable::EOTError < ::StandardError; end

# source://ttfunk//lib/ttfunk/sum.rb#4
class TTFunk::Sum < ::TTFunk::Aggregate
  # @return [Sum] a new instance of Sum
  #
  # source://ttfunk//lib/ttfunk/sum.rb#7
  def initialize(init_value = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/sum.rb#12
  def <<(operand); end

  # Returns the value of attribute value.
  #
  # source://ttfunk//lib/ttfunk/sum.rb#5
  def value; end

  # source://ttfunk//lib/ttfunk/sum.rb#16
  def value_or(_default); end
end

# source://ttfunk//lib/ttfunk/ttf_encoder.rb#4
class TTFunk::TTFEncoder
  # @return [TTFEncoder] a new instance of TTFEncoder
  #
  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#13
  def initialize(original, subset, options = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#19
  def encode; end

  # Returns the value of attribute options.
  #
  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#11
  def options; end

  # Returns the value of attribute original.
  #
  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#11
  def original; end

  # Returns the value of attribute subset.
  #
  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#11
  def subset; end

  private

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#212
  def align(data, width); end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#204
  def checksum(data); end

  # "mandatory" tables. Every font should ("should") have these
  #
  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#69
  def cmap_table; end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#129
  def cvt_table; end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#164
  def dsig_table; end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#133
  def fpgm_table; end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#141
  def gasp_table; end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#73
  def glyf_table; end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#192
  def glyphs; end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#115
  def head_table; end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#91
  def hhea_table; end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#85
  def hmtx_table; end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#145
  def kern_table; end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#79
  def loca_table; end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#97
  def maxp_table; end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#109
  def name_table; end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#196
  def new_to_old_glyph; end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#200
  def old_to_new_glyph; end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#61
  def optimal_table_order; end

  # "optional" tables. Fonts may omit these if they do not need them.
  # Because they apply globally, we can simply copy them over, without
  # modification, if they exist.
  #
  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#125
  def os2_table; end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#103
  def post_table; end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#137
  def prep_table; end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#208
  def raw(data); end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#170
  def tables; end

  # source://ttfunk//lib/ttfunk/ttf_encoder.rb#158
  def vorg_table; end
end

# source://ttfunk//lib/ttfunk/ttf_encoder.rb#5
TTFunk::TTFEncoder::OPTIMAL_TABLE_ORDER = T.let(T.unsafe(nil), Array)

# source://ttfunk//lib/ttfunk/table/cff.rb#4
class TTFunk::Table
  include ::TTFunk::Reader

  # @return [Table] a new instance of Table
  #
  # source://ttfunk//lib/ttfunk/table.rb#13
  def initialize(file); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table.rb#28
  def exists?; end

  # Returns the value of attribute file.
  #
  # source://ttfunk//lib/ttfunk/table.rb#9
  def file; end

  # Returns the value of attribute length.
  #
  # source://ttfunk//lib/ttfunk/table.rb#11
  def length; end

  # Returns the value of attribute offset.
  #
  # source://ttfunk//lib/ttfunk/table.rb#10
  def offset; end

  # source://ttfunk//lib/ttfunk/table.rb#32
  def raw; end

  # source://ttfunk//lib/ttfunk/table.rb#38
  def tag; end

  private

  # source://ttfunk//lib/ttfunk/table.rb#44
  def parse!; end
end

# source://ttfunk//lib/ttfunk/table/cff.rb#5
class TTFunk::Table::Cff < ::TTFunk::Table
  # source://ttfunk//lib/ttfunk/table/cff.rb#34
  def encode(new_to_old, old_to_new); end

  # Returns the value of attribute global_subr_index.
  #
  # source://ttfunk//lib/ttfunk/table/cff.rb#28
  def global_subr_index; end

  # Returns the value of attribute header.
  #
  # source://ttfunk//lib/ttfunk/table/cff.rb#27
  def header; end

  # Returns the value of attribute name_index.
  #
  # source://ttfunk//lib/ttfunk/table/cff.rb#27
  def name_index; end

  # Returns the value of attribute string_index.
  #
  # source://ttfunk//lib/ttfunk/table/cff.rb#27
  def string_index; end

  # source://ttfunk//lib/ttfunk/table/cff.rb#30
  def tag; end

  # Returns the value of attribute top_index.
  #
  # source://ttfunk//lib/ttfunk/table/cff.rb#27
  def top_index; end

  private

  # source://ttfunk//lib/ttfunk/table/cff.rb#51
  def parse!; end
end

# source://ttfunk//lib/ttfunk/table/cff/charset.rb#6
class TTFunk::Table::Cff::Charset < ::TTFunk::SubTable
  include ::Enumerable

  # @return [Charset] a new instance of Charset
  #
  # source://ttfunk//lib/ttfunk/table/cff/charset.rb#40
  def initialize(top_dict, file, offset_or_id = T.unsafe(nil), length = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/table/cff/charset.rb#58
  def [](glyph_id); end

  # Returns the value of attribute count.
  #
  # source://ttfunk//lib/ttfunk/table/cff/charset.rb#38
  def count; end

  # source://ttfunk//lib/ttfunk/table/cff/charset.rb#51
  def each; end

  # mapping is new -> old glyph ids
  #
  # source://ttfunk//lib/ttfunk/table/cff/charset.rb#77
  def encode(mapping); end

  # Returns the value of attribute entries.
  #
  # source://ttfunk//lib/ttfunk/table/cff/charset.rb#37
  def entries; end

  # Returns the value of attribute format.
  #
  # source://ttfunk//lib/ttfunk/table/cff/charset.rb#38
  def format; end

  # Returns the value of attribute length.
  #
  # source://ttfunk//lib/ttfunk/table/cff/charset.rb#37
  def length; end

  # source://ttfunk//lib/ttfunk/table/cff/charset.rb#64
  def offset; end

  # Returns the value of attribute offset_or_id.
  #
  # source://ttfunk//lib/ttfunk/table/cff/charset.rb#38
  def offset_or_id; end

  # Returns the value of attribute top_dict.
  #
  # source://ttfunk//lib/ttfunk/table/cff/charset.rb#38
  def top_dict; end

  private

  # source://ttfunk//lib/ttfunk/table/cff/charset.rb#185
  def element_format(fmt = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/table/cff/charset.rb#177
  def element_width(fmt = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/table/cff/charset.rb#135
  def find_string(sid); end

  # source://ttfunk//lib/ttfunk/table/cff/charset.rb#203
  def format_int(sym = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/table/cff/charset.rb#193
  def format_sym; end

  # source://ttfunk//lib/ttfunk/table/cff/charset.rb#149
  def parse!; end

  # source://ttfunk//lib/ttfunk/table/cff/charset.rb#113
  def sid_for(glyph_id); end

  class << self
    # source://ttfunk//lib/ttfunk/table/cff/charset.rb#21
    def standard_strings; end

    # source://ttfunk//lib/ttfunk/table/cff/charset.rb#25
    def strings_for_charset_id(charset_id); end
  end
end

# source://ttfunk//lib/ttfunk/table/cff/charset.rb#10
TTFunk::Table::Cff::Charset::ARRAY_FORMAT = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/charset.rb#18
TTFunk::Table::Cff::Charset::DEFAULT_CHARSET_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/charset.rb#15
TTFunk::Table::Cff::Charset::EXPERT_CHARSET_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/charset.rb#16
TTFunk::Table::Cff::Charset::EXPERT_SUBSET_CHARSET_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/charset.rb#9
TTFunk::Table::Cff::Charset::FIRST_GLYPH_STRING = T.let(T.unsafe(nil), String)

# source://ttfunk//lib/ttfunk/table/cff/charset.rb#14
TTFunk::Table::Cff::Charset::ISO_ADOBE_CHARSET_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/charset.rb#12
TTFunk::Table::Cff::Charset::RANGE_FORMAT_16 = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/charset.rb#11
TTFunk::Table::Cff::Charset::RANGE_FORMAT_8 = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/charsets.rb#6
module TTFunk::Table::Cff::Charsets; end

# source://ttfunk//lib/ttfunk/table/cff/charsets/expert.rb#7
TTFunk::Table::Cff::Charsets::EXPERT = T.let(T.unsafe(nil), TTFunk::OneBasedArray)

# source://ttfunk//lib/ttfunk/table/cff/charsets/expert_subset.rb#7
TTFunk::Table::Cff::Charsets::EXPERT_SUBSET = T.let(T.unsafe(nil), TTFunk::OneBasedArray)

# source://ttfunk//lib/ttfunk/table/cff/charsets/iso_adobe.rb#7
TTFunk::Table::Cff::Charsets::ISO_ADOBE = T.let(T.unsafe(nil), TTFunk::OneBasedArray)

# source://ttfunk//lib/ttfunk/table/cff/charsets/standard_strings.rb#7
TTFunk::Table::Cff::Charsets::STANDARD_STRINGS = T.let(T.unsafe(nil), TTFunk::OneBasedArray)

# source://ttfunk//lib/ttfunk/table/cff/charstring.rb#6
class TTFunk::Table::Cff::Charstring
  # @return [Charstring] a new instance of Charstring
  #
  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#43
  def initialize(glyph_id, top_dict, font_dict, raw); end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#94
  def encode; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#77
  def glyph; end

  # Returns the value of attribute glyph_id.
  #
  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#41
  def glyph_id; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#69
  def path; end

  # Returns the value of attribute raw.
  #
  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#41
  def raw; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#85
  def render(x: T.unsafe(nil), y: T.unsafe(nil), font_size: T.unsafe(nil)); end

  private

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#169
  def add_contour(x, y); end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#434
  def callgsubr; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#222
  def callsubr; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#329
  def cntrmask; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#309
  def endchar; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#234
  def flex; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#287
  def flex1; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#228
  def flex_select; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#253
  def hflex; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#270
  def hflex1; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#412
  def hhcurveto; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#325
  def hintmask; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#186
  def hlineto; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#348
  def hmoveto; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#135
  def hstem; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#321
  def hstemhm; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#462
  def hvcurveto; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#100
  def parse!; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#362
  def rcurveline; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#129
  def read_bytes(length); end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#378
  def rlinecurve; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#178
  def rlineto; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#337
  def rmoveto; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#210
  def rrcurveto; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#429
  def shortint; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#144
  def stem; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#440
  def vhcurveto; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#198
  def vlineto; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#159
  def vmoveto; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#139
  def vstem; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#358
  def vstemhm; end

  # source://ttfunk//lib/ttfunk/table/cff/charstring.rb#396
  def vvcurveto; end
end

# source://ttfunk//lib/ttfunk/table/cff/charstring.rb#7
TTFunk::Table::Cff::Charstring::CODE_MAP = T.let(T.unsafe(nil), Hash)

# source://ttfunk//lib/ttfunk/table/cff/charstring.rb#34
TTFunk::Table::Cff::Charstring::FLEX_CODE_MAP = T.let(T.unsafe(nil), Hash)

# source://ttfunk//lib/ttfunk/table/cff/charstrings_index.rb#6
class TTFunk::Table::Cff::CharstringsIndex < ::TTFunk::Table::Cff::Index
  # @return [CharstringsIndex] a new instance of CharstringsIndex
  #
  # source://ttfunk//lib/ttfunk/table/cff/charstrings_index.rb#9
  def initialize(top_dict, *remaining_args); end

  # source://ttfunk//lib/ttfunk/table/cff/charstrings_index.rb#14
  def [](index); end

  # gets passed a mapping of new => old glyph ids
  #
  # source://ttfunk//lib/ttfunk/table/cff/charstrings_index.rb#21
  def encode(mapping); end

  # Returns the value of attribute top_dict.
  #
  # source://ttfunk//lib/ttfunk/table/cff/charstrings_index.rb#7
  def top_dict; end

  private

  # source://ttfunk//lib/ttfunk/table/cff/charstrings_index.rb#29
  def font_dict_for(index); end
end

# source://ttfunk//lib/ttfunk/table/cff/dict.rb#8
class TTFunk::Table::Cff::Dict < ::TTFunk::SubTable
  include ::Enumerable

  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#30
  def [](operator); end

  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#34
  def each(&block); end

  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#34
  def each_pair(&block); end

  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#40
  def encode; end

  private

  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#236
  def decode_integer(b_zero); end

  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#172
  def decode_operand(b_zero); end

  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#181
  def decode_sci; end

  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#168
  def decode_wide_operator; end

  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#106
  def encode_exponent(exp); end

  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#96
  def encode_float(float); end

  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#71
  def encode_integer(int); end

  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#92
  def encode_integer32(int); end

  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#60
  def encode_operand(operand); end

  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#49
  def encode_operator(operator); end

  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#100
  def encode_sci(sci); end

  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#112
  def encode_significand(sig); end

  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#127
  def pack_decimal_nibbles(nibbles); end

  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#140
  def parse!; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#229
  def valid_exponent?(exponent); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#225
  def valid_significand?(significand); end

  # source://ttfunk//lib/ttfunk/table/cff/dict.rb#216
  def validate_sci!(significand, exponent); end
end

# source://ttfunk//lib/ttfunk/table/cff/dict.rb#9
class TTFunk::Table::Cff::Dict::InvalidOperandError < ::StandardError; end

# maximum number of operands allowed per operator
#
# source://ttfunk//lib/ttfunk/table/cff/dict.rb#22
TTFunk::Table::Cff::Dict::MAX_OPERANDS = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/dict.rb#15
TTFunk::Table::Cff::Dict::OPERAND_BZERO = T.let(T.unsafe(nil), Array)

# for regular single-byte operators
#
# source://ttfunk//lib/ttfunk/table/cff/dict.rb#14
TTFunk::Table::Cff::Dict::OPERATOR_BZERO = T.let(T.unsafe(nil), Range)

# source://ttfunk//lib/ttfunk/table/cff/dict.rb#11
class TTFunk::Table::Cff::Dict::TooManyOperandsError < ::StandardError; end

# source://ttfunk//lib/ttfunk/table/cff/dict.rb#26
TTFunk::Table::Cff::Dict::VALID_SCI_EXPONENT_RE = T.let(T.unsafe(nil), Regexp)

# used to validate operands expressed in scientific notation
#
# source://ttfunk//lib/ttfunk/table/cff/dict.rb#25
TTFunk::Table::Cff::Dict::VALID_SCI_SIGNIFICAND_RE = T.let(T.unsafe(nil), Regexp)

# source://ttfunk//lib/ttfunk/table/cff/dict.rb#19
TTFunk::Table::Cff::Dict::WIDE_OPERATOR_ADJUSTMENT = T.let(T.unsafe(nil), Integer)

# for operators that are two bytes wide
#
# source://ttfunk//lib/ttfunk/table/cff/dict.rb#18
TTFunk::Table::Cff::Dict::WIDE_OPERATOR_BZERO = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/encoding.rb#6
class TTFunk::Table::Cff::Encoding < ::TTFunk::SubTable
  include ::Enumerable

  # @return [Encoding] a new instance of Encoding
  #
  # source://ttfunk//lib/ttfunk/table/cff/encoding.rb#27
  def initialize(top_dict, file, offset_or_id = T.unsafe(nil), length = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/table/cff/encoding.rb#45
  def [](glyph_id); end

  # Returns the value of attribute count.
  #
  # source://ttfunk//lib/ttfunk/table/cff/encoding.rb#25
  def count; end

  # source://ttfunk//lib/ttfunk/table/cff/encoding.rb#38
  def each; end

  # source://ttfunk//lib/ttfunk/table/cff/encoding.rb#65
  def encode(new_to_old, old_to_new); end

  # Returns the value of attribute format.
  #
  # source://ttfunk//lib/ttfunk/table/cff/encoding.rb#25
  def format; end

  # source://ttfunk//lib/ttfunk/table/cff/encoding.rb#52
  def offset; end

  # Returns the value of attribute offset_or_id.
  #
  # source://ttfunk//lib/ttfunk/table/cff/encoding.rb#25
  def offset_or_id; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/cff/encoding.rb#96
  def supplemental?; end

  # Returns the value of attribute top_dict.
  #
  # source://ttfunk//lib/ttfunk/table/cff/encoding.rb#25
  def top_dict; end

  private

  # source://ttfunk//lib/ttfunk/table/cff/encoding.rb#121
  def code_for(glyph_id); end

  # source://ttfunk//lib/ttfunk/table/cff/encoding.rb#177
  def element_format(fmt = T.unsafe(nil)); end

  # @TODO: handle supplemental encoding (necessary?)
  #
  # source://ttfunk//lib/ttfunk/table/cff/encoding.rb#186
  def element_width(fmt = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/table/cff/encoding.rb#103
  def encode_supplemental(_new_to_old, old_to_new); end

  # source://ttfunk//lib/ttfunk/table/cff/encoding.rb#207
  def format_int(sym = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/table/cff/encoding.rb#196
  def format_sym; end

  # source://ttfunk//lib/ttfunk/table/cff/encoding.rb#147
  def parse!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/cff/encoding.rb#15
    def codes_for_encoding_id(encoding_id); end
  end
end

# source://ttfunk//lib/ttfunk/table/cff/encoding.rb#12
TTFunk::Table::Cff::Encoding::DEFAULT_ENCODING_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/encoding.rb#10
TTFunk::Table::Cff::Encoding::EXPERT_ENCODING_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/encoding.rb#9
TTFunk::Table::Cff::Encoding::STANDARD_ENCODING_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/encodings.rb#6
module TTFunk::Table::Cff::Encodings; end

# source://ttfunk//lib/ttfunk/table/cff/encodings/expert.rb#7
TTFunk::Table::Cff::Encodings::EXPERT = T.let(T.unsafe(nil), TTFunk::OneBasedArray)

# source://ttfunk//lib/ttfunk/table/cff/encodings/standard.rb#7
TTFunk::Table::Cff::Encodings::STANDARD = T.let(T.unsafe(nil), TTFunk::OneBasedArray)

# source://ttfunk//lib/ttfunk/table/cff/fd_selector.rb#6
class TTFunk::Table::Cff::FdSelector < ::TTFunk::SubTable
  include ::Enumerable

  # @return [FdSelector] a new instance of FdSelector
  #
  # source://ttfunk//lib/ttfunk/table/cff/fd_selector.rb#17
  def initialize(top_dict, file, offset, length = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/table/cff/fd_selector.rb#22
  def [](glyph_id); end

  # Returns the value of attribute count.
  #
  # source://ttfunk//lib/ttfunk/table/cff/fd_selector.rb#15
  def count; end

  # source://ttfunk//lib/ttfunk/table/cff/fd_selector.rb#48
  def each; end

  # mapping is new -> old glyph ids
  #
  # source://ttfunk//lib/ttfunk/table/cff/fd_selector.rb#55
  def encode(mapping); end

  # Returns the value of attribute entries.
  #
  # source://ttfunk//lib/ttfunk/table/cff/fd_selector.rb#15
  def entries; end

  # Returns the value of attribute n_glyphs.
  #
  # source://ttfunk//lib/ttfunk/table/cff/fd_selector.rb#15
  def n_glyphs; end

  # Returns the value of attribute top_dict.
  #
  # source://ttfunk//lib/ttfunk/table/cff/fd_selector.rb#15
  def top_dict; end

  private

  # source://ttfunk//lib/ttfunk/table/cff/fd_selector.rb#142
  def format_sym; end

  # source://ttfunk//lib/ttfunk/table/cff/fd_selector.rb#105
  def parse!; end

  # source://ttfunk//lib/ttfunk/table/cff/fd_selector.rb#85
  def range_cache; end

  # values is an array of [new_gid, fd_index] pairs
  #
  # source://ttfunk//lib/ttfunk/table/cff/fd_selector.rb#90
  def rangify_gids(values); end
end

# source://ttfunk//lib/ttfunk/table/cff/fd_selector.rb#13
TTFunk::Table::Cff::FdSelector::ARRAY_ENTRY_SIZE = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/fd_selector.rb#9
TTFunk::Table::Cff::FdSelector::ARRAY_FORMAT = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/fd_selector.rb#12
TTFunk::Table::Cff::FdSelector::RANGE_ENTRY_SIZE = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/fd_selector.rb#10
TTFunk::Table::Cff::FdSelector::RANGE_FORMAT = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/font_dict.rb#6
class TTFunk::Table::Cff::FontDict < ::TTFunk::Table::Cff::Dict
  # @return [FontDict] a new instance of FontDict
  #
  # source://ttfunk//lib/ttfunk/table/cff/font_dict.rb#13
  def initialize(top_dict, file, offset, length = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/table/cff/font_dict.rb#18
  def encode(_mapping); end

  # source://ttfunk//lib/ttfunk/table/cff/font_dict.rb#33
  def finalize(new_cff_data, mapping); end

  # source://ttfunk//lib/ttfunk/table/cff/font_dict.rb#50
  def private_dict; end

  # Returns the value of attribute top_dict.
  #
  # source://ttfunk//lib/ttfunk/table/cff/font_dict.rb#11
  def top_dict; end

  private

  # source://ttfunk//lib/ttfunk/table/cff/font_dict.rb#65
  def encode_private; end
end

# source://ttfunk//lib/ttfunk/table/cff/font_dict.rb#8
TTFunk::Table::Cff::FontDict::OPERATORS = T.let(T.unsafe(nil), Hash)

# source://ttfunk//lib/ttfunk/table/cff/font_dict.rb#9
TTFunk::Table::Cff::FontDict::OPERATOR_CODES = T.let(T.unsafe(nil), Hash)

# source://ttfunk//lib/ttfunk/table/cff/font_dict.rb#7
TTFunk::Table::Cff::FontDict::PLACEHOLDER_LENGTH = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/font_index.rb#6
class TTFunk::Table::Cff::FontIndex < ::TTFunk::Table::Cff::Index
  # @return [FontIndex] a new instance of FontIndex
  #
  # source://ttfunk//lib/ttfunk/table/cff/font_index.rb#9
  def initialize(top_dict, file, offset, length = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/table/cff/font_index.rb#14
  def [](index); end

  # source://ttfunk//lib/ttfunk/table/cff/font_index.rb#24
  def finalize(new_cff_data, mapping); end

  # Returns the value of attribute top_dict.
  #
  # source://ttfunk//lib/ttfunk/table/cff/font_index.rb#7
  def top_dict; end
end

# source://ttfunk//lib/ttfunk/table/cff/header.rb#7
class TTFunk::Table::Cff::Header < ::TTFunk::SubTable
  # size of all offsets from beginning of table
  #
  # source://ttfunk//lib/ttfunk/table/cff/header.rb#15
  def absolute_offset_size; end

  # source://ttfunk//lib/ttfunk/table/cff/header.rb#21
  def encode; end

  # size of the header itself
  #
  # source://ttfunk//lib/ttfunk/table/cff/header.rb#12
  def header_size; end

  # source://ttfunk//lib/ttfunk/table/cff/header.rb#17
  def length; end

  # cff format version numbers
  #
  # source://ttfunk//lib/ttfunk/table/cff/header.rb#8
  def major; end

  # Returns the value of attribute minor.
  #
  # source://ttfunk//lib/ttfunk/table/cff/header.rb#9
  def minor; end

  private

  # source://ttfunk//lib/ttfunk/table/cff/header.rb#27
  def parse!; end
end

# source://ttfunk//lib/ttfunk/table/cff/index.rb#6
class TTFunk::Table::Cff::Index < ::TTFunk::SubTable
  include ::Enumerable

  # source://ttfunk//lib/ttfunk/table/cff/index.rb#18
  def [](index); end

  # number of objects in the index
  #
  # source://ttfunk//lib/ttfunk/table/cff/index.rb#10
  def count; end

  # Returns the value of attribute data_start_pos.
  #
  # source://ttfunk//lib/ttfunk/table/cff/index.rb#16
  def data_start_pos; end

  # source://ttfunk//lib/ttfunk/table/cff/index.rb#24
  def each; end

  # source://ttfunk//lib/ttfunk/table/cff/index.rb#30
  def encode; end

  # offset array element size
  #
  # source://ttfunk//lib/ttfunk/table/cff/index.rb#13
  def offset_size; end

  # Returns the value of attribute offsets.
  #
  # source://ttfunk//lib/ttfunk/table/cff/index.rb#15
  def offsets; end

  # Returns the value of attribute raw_data.
  #
  # source://ttfunk//lib/ttfunk/table/cff/index.rb#15
  def raw_data; end

  # Returns the value of attribute raw_offset_length.
  #
  # source://ttfunk//lib/ttfunk/table/cff/index.rb#15
  def raw_offset_length; end

  private

  # source://ttfunk//lib/ttfunk/table/cff/index.rb#70
  def absolute_offsets_for(index); end

  # source://ttfunk//lib/ttfunk/table/cff/index.rb#77
  def encode_offset(offset, offset_size); end

  # source://ttfunk//lib/ttfunk/table/cff/index.rb#66
  def entry_cache; end

  # source://ttfunk//lib/ttfunk/table/cff/index.rb#90
  def parse!; end

  # source://ttfunk//lib/ttfunk/table/cff/index.rb#119
  def unpack_offset(offset_data); end
end

# source://ttfunk//lib/ttfunk/table/cff/one_based_index.rb#8
class TTFunk::Table::Cff::OneBasedIndex
  extend ::Forwardable

  # @return [OneBasedIndex] a new instance of OneBasedIndex
  #
  # source://ttfunk//lib/ttfunk/table/cff/one_based_index.rb#20
  def initialize(*args); end

  # source://ttfunk//lib/ttfunk/table/cff/one_based_index.rb#24
  def [](idx); end

  # Returns the value of attribute base_index.
  #
  # source://ttfunk//lib/ttfunk/table/cff/one_based_index.rb#18
  def base_index; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def count(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def each(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def encode(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def length(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def table_offset(*args, **_arg1, &block); end
end

# source://ttfunk//lib/ttfunk/table/cff/path.rb#6
class TTFunk::Table::Cff::Path
  # @return [Path] a new instance of Path
  #
  # source://ttfunk//lib/ttfunk/table/cff/path.rb#11
  def initialize; end

  # source://ttfunk//lib/ttfunk/table/cff/path.rb#28
  def close_path; end

  # Returns the value of attribute commands.
  #
  # source://ttfunk//lib/ttfunk/table/cff/path.rb#9
  def commands; end

  # source://ttfunk//lib/ttfunk/table/cff/path.rb#24
  def curve_to(x1, y1, x2, y2, x, y); end

  # source://ttfunk//lib/ttfunk/table/cff/path.rb#20
  def line_to(x, y); end

  # source://ttfunk//lib/ttfunk/table/cff/path.rb#16
  def move_to(x, y); end

  # Returns the value of attribute number_of_contours.
  #
  # source://ttfunk//lib/ttfunk/table/cff/path.rb#9
  def number_of_contours; end

  # source://ttfunk//lib/ttfunk/table/cff/path.rb#33
  def render(x: T.unsafe(nil), y: T.unsafe(nil), font_size: T.unsafe(nil), units_per_em: T.unsafe(nil)); end

  private

  # source://ttfunk//lib/ttfunk/table/cff/path.rb#62
  def format_values(command); end
end

# source://ttfunk//lib/ttfunk/table/cff/path.rb#7
TTFunk::Table::Cff::Path::CLOSE_PATH_CMD = T.let(T.unsafe(nil), Array)

# source://ttfunk//lib/ttfunk/table/cff/private_dict.rb#6
class TTFunk::Table::Cff::PrivateDict < ::TTFunk::Table::Cff::Dict
  # source://ttfunk//lib/ttfunk/table/cff/private_dict.rb#56
  def default_width_x; end

  # @TODO: use mapping to determine which subroutines are still used.
  # For now, just encode them all.
  #
  # source://ttfunk//lib/ttfunk/table/cff/private_dict.rb#21
  def encode(_mapping); end

  # source://ttfunk//lib/ttfunk/table/cff/private_dict.rb#36
  def finalize(private_dict_data); end

  # source://ttfunk//lib/ttfunk/table/cff/private_dict.rb#64
  def nominal_width_x; end

  # source://ttfunk//lib/ttfunk/table/cff/private_dict.rb#49
  def subr_index; end

  private

  # source://ttfunk//lib/ttfunk/table/cff/private_dict.rb#74
  def encode_subrs; end
end

# source://ttfunk//lib/ttfunk/table/cff/private_dict.rb#7
TTFunk::Table::Cff::PrivateDict::DEFAULT_WIDTH_X_DEFAULT = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/private_dict.rb#8
TTFunk::Table::Cff::PrivateDict::DEFAULT_WIDTH_X_NOMINAL = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/private_dict.rb#11
TTFunk::Table::Cff::PrivateDict::OPERATORS = T.let(T.unsafe(nil), Hash)

# source://ttfunk//lib/ttfunk/table/cff/private_dict.rb#17
TTFunk::Table::Cff::PrivateDict::OPERATOR_CODES = T.let(T.unsafe(nil), Hash)

# source://ttfunk//lib/ttfunk/table/cff/private_dict.rb#9
TTFunk::Table::Cff::PrivateDict::PLACEHOLDER_LENGTH = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/subr_index.rb#6
class TTFunk::Table::Cff::SubrIndex < ::TTFunk::Table::Cff::Index
  # source://ttfunk//lib/ttfunk/table/cff/subr_index.rb#7
  def bias; end
end

# the extra space is important
#
# source://ttfunk//lib/ttfunk/table/cff.rb#25
TTFunk::Table::Cff::TAG = T.let(T.unsafe(nil), String)

# source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#6
class TTFunk::Table::Cff::TopDict < ::TTFunk::Table::Cff::Dict
  # source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#187
  def cff; end

  # source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#191
  def cff_offset; end

  # source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#119
  def charset; end

  # source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#157
  def charstring_type; end

  # https://www.microsoft.com/typography/otspec/cff.htm
  #
  # "OpenType fonts with TrueType outlines use a glyph index to specify
  # and access glyphs within a font; e.g., to index within the 'loca'
  # table and thereby access glyph data in the 'glyf' table. This concept
  # is retained in OpenType CFF fonts, except that glyph data is accessed
  # through the CharStrings INDEX of the CFF table."
  #
  # source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#148
  def charstrings_index; end

  # source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#31
  def encode(*_arg0); end

  # source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#130
  def encoding; end

  # source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#50
  def finalize(new_cff_data, new_to_old, old_to_new); end

  # source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#169
  def font_dict_selector; end

  # source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#162
  def font_index; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#113
  def is_cid_font?; end

  # source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#176
  def private_dict; end

  # source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#109
  def ros; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#113
  def ros?; end

  private

  # source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#221
  def encode_charstring_type(charstring_type); end

  # source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#197
  def encode_private; end

  # source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#211
  def finalize_subtable(new_cff_data, name, table_data); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#217
  def pointer_operator?(operator); end
end

# source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#7
TTFunk::Table::Cff::TopDict::DEFAULT_CHARSTRING_TYPE = T.let(T.unsafe(nil), Integer)

# all the operators we currently care about
#
# source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#23
TTFunk::Table::Cff::TopDict::OPERATORS = T.let(T.unsafe(nil), Hash)

# source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#29
TTFunk::Table::Cff::TopDict::OPERATOR_CODES = T.let(T.unsafe(nil), Hash)

# source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#9
TTFunk::Table::Cff::TopDict::PLACEHOLDER_LENGTH = T.let(T.unsafe(nil), Integer)

# operators whose values are offsets that point to other parts
# of the file
#
# source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#13
TTFunk::Table::Cff::TopDict::POINTER_OPERATORS = T.let(T.unsafe(nil), Hash)

# source://ttfunk//lib/ttfunk/table/cff/top_dict.rb#8
TTFunk::Table::Cff::TopDict::POINTER_PLACEHOLDER_LENGTH = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/cff/top_index.rb#6
class TTFunk::Table::Cff::TopIndex < ::TTFunk::Table::Cff::Index
  # source://ttfunk//lib/ttfunk/table/cff/top_index.rb#7
  def [](index); end
end

# source://ttfunk//lib/ttfunk/table/cmap.rb#5
class TTFunk::Table::Cmap < ::TTFunk::Table
  # Returns the value of attribute tables.
  #
  # source://ttfunk//lib/ttfunk/table/cmap.rb#7
  def tables; end

  # source://ttfunk//lib/ttfunk/table/cmap.rb#17
  def unicode; end

  # Returns the value of attribute version.
  #
  # source://ttfunk//lib/ttfunk/table/cmap.rb#6
  def version; end

  private

  # source://ttfunk//lib/ttfunk/table/cmap.rb#28
  def parse!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/cmap.rb#9
    def encode(charmap, encoding); end
  end
end

# source://ttfunk//lib/ttfunk/table/cmap/format00.rb#6
module TTFunk::Table::Cmap::Format00
  # source://ttfunk//lib/ttfunk/table/cmap/format00.rb#35
  def [](code); end

  # Returns the value of attribute code_map.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format00.rb#8
  def code_map; end

  # Returns the value of attribute language.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format00.rb#7
  def language; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format00.rb#39
  def supported?; end

  private

  # source://ttfunk//lib/ttfunk/table/cmap/format00.rb#45
  def parse_cmap!; end

  class << self
    # Expects a hash mapping character codes to glyph ids (where the
    # glyph ids are from the original font). Returns a hash including
    # a new map (:charmap) that maps the characters in charmap to a
    # another hash containing both the old (:old) and new (:new) glyph
    # ids. The returned hash also includes a :subtable key, which contains
    # the encoded subtable for the given charmap.
    #
    # source://ttfunk//lib/ttfunk/table/cmap/format00.rb#16
    def encode(charmap); end
  end
end

# source://ttfunk//lib/ttfunk/table/cmap/format04.rb#6
module TTFunk::Table::Cmap::Format04
  # source://ttfunk//lib/ttfunk/table/cmap/format04.rb#95
  def [](code); end

  # Returns the value of attribute code_map.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format04.rb#8
  def code_map; end

  # Returns the value of attribute language.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format04.rb#7
  def language; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format04.rb#99
  def supported?; end

  private

  # source://ttfunk//lib/ttfunk/table/cmap/format04.rb#105
  def parse_cmap!; end

  class << self
    # Expects a hash mapping character codes to glyph ids (where the
    # glyph ids are from the original font). Returns a hash including
    # a new map (:charmap) that maps the characters in charmap to a
    # another hash containing both the old (:old) and new (:new) glyph
    # ids. The returned hash also includes a :subtable key, which contains
    # the encoded subtable for the given charmap.
    #
    # source://ttfunk//lib/ttfunk/table/cmap/format04.rb#16
    def encode(charmap); end
  end
end

# source://ttfunk//lib/ttfunk/table/cmap/format06.rb#6
module TTFunk::Table::Cmap::Format06
  # source://ttfunk//lib/ttfunk/table/cmap/format06.rb#34
  def [](code); end

  # Returns the value of attribute code_map.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format06.rb#8
  def code_map; end

  # Returns the value of attribute language.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format06.rb#7
  def language; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format06.rb#38
  def supported?; end

  private

  # source://ttfunk//lib/ttfunk/table/cmap/format06.rb#44
  def parse_cmap!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/cmap/format06.rb#10
    def encode(charmap); end
  end
end

# source://ttfunk//lib/ttfunk/table/cmap/format10.rb#6
module TTFunk::Table::Cmap::Format10
  # source://ttfunk//lib/ttfunk/table/cmap/format10.rb#35
  def [](code); end

  # Returns the value of attribute code_map.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format10.rb#8
  def code_map; end

  # Returns the value of attribute language.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format10.rb#7
  def language; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format10.rb#39
  def supported?; end

  private

  # source://ttfunk//lib/ttfunk/table/cmap/format10.rb#45
  def parse_cmap!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/cmap/format10.rb#10
    def encode(charmap); end
  end
end

# source://ttfunk//lib/ttfunk/table/cmap/format12.rb#6
module TTFunk::Table::Cmap::Format12
  # source://ttfunk//lib/ttfunk/table/cmap/format12.rb#48
  def [](code); end

  # Returns the value of attribute code_map.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format12.rb#8
  def code_map; end

  # Returns the value of attribute language.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format12.rb#7
  def language; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/cmap/format12.rb#52
  def supported?; end

  private

  # source://ttfunk//lib/ttfunk/table/cmap/format12.rb#58
  def parse_cmap!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/cmap/format12.rb#10
    def encode(charmap); end
  end
end

# source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#8
class TTFunk::Table::Cmap::Subtable
  include ::TTFunk::Reader

  # @return [Subtable] a new instance of Subtable
  #
  # source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#51
  def initialize(file, table_start); end

  # @raise [NotImplementedError]
  #
  # source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#81
  def [](_code); end

  # Returns the value of attribute encoding_id.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#12
  def encoding_id; end

  # Returns the value of attribute format.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#13
  def format; end

  # Returns the value of attribute platform_id.
  #
  # source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#11
  def platform_id; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#77
  def supported?; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#71
  def unicode?; end

  private

  # source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#87
  def parse_cmap!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#23
    def encode(charmap, encoding); end
  end
end

# source://ttfunk//lib/ttfunk/table/cmap/subtable.rb#15
TTFunk::Table::Cmap::Subtable::ENCODING_MAPPINGS = T.let(T.unsafe(nil), Hash)

# source://ttfunk//lib/ttfunk/table/dsig.rb#5
class TTFunk::Table::Dsig < ::TTFunk::Table
  # Returns the value of attribute flags.
  #
  # source://ttfunk//lib/ttfunk/table/dsig.rb#17
  def flags; end

  # Returns the value of attribute signatures.
  #
  # source://ttfunk//lib/ttfunk/table/dsig.rb#17
  def signatures; end

  # source://ttfunk//lib/ttfunk/table/dsig.rb#29
  def tag; end

  # Returns the value of attribute version.
  #
  # source://ttfunk//lib/ttfunk/table/dsig.rb#17
  def version; end

  private

  # source://ttfunk//lib/ttfunk/table/dsig.rb#35
  def parse!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/dsig.rb#21
    def encode(dsig); end
  end
end

# source://ttfunk//lib/ttfunk/table/dsig.rb#6
class TTFunk::Table::Dsig::SignatureRecord
  # @return [SignatureRecord] a new instance of SignatureRecord
  #
  # source://ttfunk//lib/ttfunk/table/dsig.rb#9
  def initialize(format, length, offset, signature); end

  # Returns the value of attribute format.
  #
  # source://ttfunk//lib/ttfunk/table/dsig.rb#7
  def format; end

  # Returns the value of attribute length.
  #
  # source://ttfunk//lib/ttfunk/table/dsig.rb#7
  def length; end

  # Returns the value of attribute offset.
  #
  # source://ttfunk//lib/ttfunk/table/dsig.rb#7
  def offset; end

  # Returns the value of attribute signature.
  #
  # source://ttfunk//lib/ttfunk/table/dsig.rb#7
  def signature; end
end

# source://ttfunk//lib/ttfunk/table/dsig.rb#19
TTFunk::Table::Dsig::TAG = T.let(T.unsafe(nil), String)

# source://ttfunk//lib/ttfunk/table/glyf.rb#15
class TTFunk::Table::Glyf < ::TTFunk::Table
  # source://ttfunk//lib/ttfunk/table/glyf.rb#31
  def for(glyph_id); end

  private

  # source://ttfunk//lib/ttfunk/table/glyf.rb#57
  def parse!; end

  class << self
    # Accepts a hash mapping (old) glyph-ids to glyph objects, and a hash
    # mapping old glyph-ids to new glyph-ids.
    #
    # Returns a hash containing:
    #
    # * :table - a string representing the encoded 'glyf' table containing
    #   the given glyphs.
    # * :offsets - an array of offsets for each glyph
    #
    # source://ttfunk//lib/ttfunk/table/glyf.rb#16
    def encode(glyphs, new_to_old, old_to_new); end
  end
end

# source://ttfunk//lib/ttfunk/table/glyf/compound.rb#8
class TTFunk::Table::Glyf::Compound
  include ::TTFunk::Reader

  # @return [Compound] a new instance of Compound
  #
  # source://ttfunk//lib/ttfunk/table/glyf/compound.rb#25
  def initialize(id, raw); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/glyf/compound.rb#74
  def compound?; end

  # Returns the value of attribute glyph_ids.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/compound.rb#21
  def glyph_ids; end

  # Returns the value of attribute id.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/compound.rb#18
  def id; end

  # Returns the value of attribute number_of_contours.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/compound.rb#19
  def number_of_contours; end

  # Returns the value of attribute raw.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/compound.rb#18
  def raw; end

  # source://ttfunk//lib/ttfunk/table/glyf/compound.rb#78
  def recode(mapping); end

  # Returns the value of attribute x_max.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/compound.rb#20
  def x_max; end

  # Returns the value of attribute x_min.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/compound.rb#20
  def x_min; end

  # Returns the value of attribute y_max.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/compound.rb#20
  def y_max; end

  # Returns the value of attribute y_min.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/compound.rb#20
  def y_min; end
end

# source://ttfunk//lib/ttfunk/table/glyf/compound.rb#11
TTFunk::Table::Glyf::Compound::ARG_1_AND_2_ARE_WORDS = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/glyf/compound.rb#23
class TTFunk::Table::Glyf::Compound::Component < ::Struct
  # Returns the value of attribute arg1
  #
  # @return [Object] the current value of arg1
  def arg1; end

  # Sets the attribute arg1
  #
  # @param value [Object] the value to set the attribute arg1 to.
  # @return [Object] the newly set value
  def arg1=(_); end

  # Returns the value of attribute arg2
  #
  # @return [Object] the current value of arg2
  def arg2; end

  # Sets the attribute arg2
  #
  # @param value [Object] the value to set the attribute arg2 to.
  # @return [Object] the newly set value
  def arg2=(_); end

  # Returns the value of attribute flags
  #
  # @return [Object] the current value of flags
  def flags; end

  # Sets the attribute flags
  #
  # @param value [Object] the value to set the attribute flags to.
  # @return [Object] the newly set value
  def flags=(_); end

  # Returns the value of attribute glyph_index
  #
  # @return [Object] the current value of glyph_index
  def glyph_index; end

  # Sets the attribute glyph_index
  #
  # @param value [Object] the value to set the attribute glyph_index to.
  # @return [Object] the newly set value
  def glyph_index=(_); end

  # Returns the value of attribute transform
  #
  # @return [Object] the current value of transform
  def transform; end

  # Sets the attribute transform
  #
  # @param value [Object] the value to set the attribute transform to.
  # @return [Object] the newly set value
  def transform=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://ttfunk//lib/ttfunk/table/glyf/compound.rb#13
TTFunk::Table::Glyf::Compound::MORE_COMPONENTS = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/glyf/compound.rb#14
TTFunk::Table::Glyf::Compound::WE_HAVE_AN_X_AND_Y_SCALE = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/glyf/compound.rb#12
TTFunk::Table::Glyf::Compound::WE_HAVE_A_SCALE = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/glyf/compound.rb#15
TTFunk::Table::Glyf::Compound::WE_HAVE_A_TWO_BY_TWO = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/glyf/compound.rb#16
TTFunk::Table::Glyf::Compound::WE_HAVE_INSTRUCTIONS = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/glyf/path_based.rb#6
class TTFunk::Table::Glyf::PathBased
  # @return [PathBased] a new instance of PathBased
  #
  # source://ttfunk//lib/ttfunk/table/glyf/path_based.rb#11
  def initialize(path, horizontal_metrics); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/glyf/path_based.rb#41
  def compound?; end

  # Returns the value of attribute horizontal_metrics.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/path_based.rb#7
  def horizontal_metrics; end

  # Returns the value of attribute left_side_bearing.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/path_based.rb#9
  def left_side_bearing; end

  # source://ttfunk//lib/ttfunk/table/glyf/path_based.rb#37
  def number_of_contours; end

  # Returns the value of attribute path.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/path_based.rb#7
  def path; end

  # Returns the value of attribute right_side_bearing.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/path_based.rb#9
  def right_side_bearing; end

  # Returns the value of attribute x_max.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/path_based.rb#8
  def x_max; end

  # Returns the value of attribute x_min.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/path_based.rb#8
  def x_min; end

  # Returns the value of attribute y_max.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/path_based.rb#8
  def y_max; end

  # Returns the value of attribute y_min.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/path_based.rb#8
  def y_min; end
end

# source://ttfunk//lib/ttfunk/table/glyf/simple.rb#8
class TTFunk::Table::Glyf::Simple
  # @return [Simple] a new instance of Simple
  #
  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#15
  def initialize(id, raw); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#30
  def compound?; end

  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#38
  def end_point_of_last_contour; end

  # Returns the value of attribute end_points_of_contours.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#12
  def end_points_of_contours; end

  # Returns the value of attribute id.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#9
  def id; end

  # Returns the value of attribute instruction_length.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#13
  def instruction_length; end

  # Returns the value of attribute instructions.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#13
  def instructions; end

  # Returns the value of attribute number_of_contours.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#10
  def number_of_contours; end

  # Returns the value of attribute raw.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#9
  def raw; end

  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#34
  def recode(_mapping); end

  # Returns the value of attribute x_max.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#11
  def x_max; end

  # Returns the value of attribute x_min.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#11
  def x_min; end

  # Returns the value of attribute y_max.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#11
  def y_max; end

  # Returns the value of attribute y_min.
  #
  # source://ttfunk//lib/ttfunk/table/glyf/simple.rb#11
  def y_min; end
end

# source://ttfunk//lib/ttfunk/table/head.rb#7
class TTFunk::Table::Head < ::TTFunk::Table
  # Returns the value of attribute checksum_adjustment.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#10
  def checksum_adjustment; end

  # Returns the value of attribute created.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#14
  def created; end

  # Returns the value of attribute flags.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#12
  def flags; end

  # Returns the value of attribute font_direction_hint.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#22
  def font_direction_hint; end

  # Returns the value of attribute font_revision.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#9
  def font_revision; end

  # Returns the value of attribute glyph_data_format.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#24
  def glyph_data_format; end

  # Returns the value of attribute index_to_loc_format.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#23
  def index_to_loc_format; end

  # Returns the value of attribute lowest_rec_ppem.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#21
  def lowest_rec_ppem; end

  # Returns the value of attribute mac_style.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#20
  def mac_style; end

  # Returns the value of attribute magic_number.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#11
  def magic_number; end

  # Returns the value of attribute modified.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#15
  def modified; end

  # Returns the value of attribute units_per_em.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#13
  def units_per_em; end

  # Returns the value of attribute version.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#8
  def version; end

  # Returns the value of attribute x_max.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#18
  def x_max; end

  # Returns the value of attribute x_min.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#16
  def x_min; end

  # Returns the value of attribute y_max.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#19
  def y_max; end

  # Returns the value of attribute y_min.
  #
  # source://ttfunk//lib/ttfunk/table/head.rb#17
  def y_min; end

  private

  # source://ttfunk//lib/ttfunk/table/head.rb#71
  def parse!; end

  class << self
    # mapping is new -> old glyph ids
    #
    # source://ttfunk//lib/ttfunk/table/head.rb#28
    def encode(head, loca, mapping); end

    private

    # source://ttfunk//lib/ttfunk/table/head.rb#46
    def min_max_values_for(head, mapping); end
  end
end

# source://ttfunk//lib/ttfunk/table/hhea.rb#7
class TTFunk::Table::Hhea < ::TTFunk::Table
  # Returns the value of attribute advance_width_max.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#12
  def advance_width_max; end

  # Returns the value of attribute ascent.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#9
  def ascent; end

  # Returns the value of attribute caret_offset.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#18
  def caret_offset; end

  # Returns the value of attribute carot_slope_rise.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#16
  def carot_slope_rise; end

  # Returns the value of attribute carot_slope_run.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#17
  def carot_slope_run; end

  # Returns the value of attribute descent.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#10
  def descent; end

  # Returns the value of attribute line_gap.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#11
  def line_gap; end

  # Returns the value of attribute metric_data_format.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#19
  def metric_data_format; end

  # Returns the value of attribute min_left_side_bearing.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#13
  def min_left_side_bearing; end

  # Returns the value of attribute min_right_side_bearing.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#14
  def min_right_side_bearing; end

  # Returns the value of attribute number_of_metrics.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#20
  def number_of_metrics; end

  # Returns the value of attribute version.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#8
  def version; end

  # Returns the value of attribute x_max_extent.
  #
  # source://ttfunk//lib/ttfunk/table/hhea.rb#15
  def x_max_extent; end

  private

  # source://ttfunk//lib/ttfunk/table/hhea.rb#70
  def parse!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/hhea.rb#23
    def encode(hhea, hmtx, original, mapping); end

    private

    # source://ttfunk//lib/ttfunk/table/hhea.rb#37
    def min_max_values_for(original, mapping); end
  end
end

# source://ttfunk//lib/ttfunk/table/hmtx.rb#7
class TTFunk::Table::Hmtx < ::TTFunk::Table
  # source://ttfunk//lib/ttfunk/table/hmtx.rb#27
  def for(glyph_id); end

  # Returns the value of attribute left_side_bearings.
  #
  # source://ttfunk//lib/ttfunk/table/hmtx.rb#9
  def left_side_bearings; end

  # Returns the value of attribute metrics.
  #
  # source://ttfunk//lib/ttfunk/table/hmtx.rb#8
  def metrics; end

  # Returns the value of attribute widths.
  #
  # source://ttfunk//lib/ttfunk/table/hmtx.rb#10
  def widths; end

  private

  # source://ttfunk//lib/ttfunk/table/hmtx.rb#38
  def metrics_cache; end

  # source://ttfunk//lib/ttfunk/table/hmtx.rb#42
  def parse!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/hmtx.rb#12
    def encode(hmtx, mapping); end
  end
end

# source://ttfunk//lib/ttfunk/table/hmtx.rb#25
class TTFunk::Table::Hmtx::HorizontalMetric < ::Struct
  # Returns the value of attribute advance_width
  #
  # @return [Object] the current value of advance_width
  def advance_width; end

  # Sets the attribute advance_width
  #
  # @param value [Object] the value to set the attribute advance_width to.
  # @return [Object] the newly set value
  def advance_width=(_); end

  # Returns the value of attribute left_side_bearing
  #
  # @return [Object] the current value of left_side_bearing
  def left_side_bearing; end

  # Sets the attribute left_side_bearing
  #
  # @param value [Object] the value to set the attribute left_side_bearing to.
  # @return [Object] the newly set value
  def left_side_bearing=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://ttfunk//lib/ttfunk/table/kern.rb#7
class TTFunk::Table::Kern < ::TTFunk::Table
  # Returns the value of attribute tables.
  #
  # source://ttfunk//lib/ttfunk/table/kern.rb#9
  def tables; end

  # Returns the value of attribute version.
  #
  # source://ttfunk//lib/ttfunk/table/kern.rb#8
  def version; end

  private

  # source://ttfunk//lib/ttfunk/table/kern.rb#81
  def add_table(format, attributes = T.unsafe(nil)); end

  # source://ttfunk//lib/ttfunk/table/kern.rb#22
  def parse!; end

  # source://ttfunk//lib/ttfunk/table/kern.rb#35
  def parse_version_0_tables(_num_tables); end

  # source://ttfunk//lib/ttfunk/table/kern.rb#63
  def parse_version_1_tables(num_tables); end

  class << self
    # source://ttfunk//lib/ttfunk/table/kern.rb#11
    def encode(kerning, mapping); end
  end
end

# source://ttfunk//lib/ttfunk/table/kern/format0.rb#8
class TTFunk::Table::Kern::Format0
  include ::TTFunk::Reader

  # @return [Format0] a new instance of Format0
  #
  # source://ttfunk//lib/ttfunk/table/kern/format0.rb#14
  def initialize(attributes = T.unsafe(nil)); end

  # Returns the value of attribute attributes.
  #
  # source://ttfunk//lib/ttfunk/table/kern/format0.rb#11
  def attributes; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/kern/format0.rb#39
  def cross_stream?; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/kern/format0.rb#35
  def horizontal?; end

  # Returns the value of attribute pairs.
  #
  # source://ttfunk//lib/ttfunk/table/kern/format0.rb#12
  def pairs; end

  # source://ttfunk//lib/ttfunk/table/kern/format0.rb#43
  def recode(mapping); end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/kern/format0.rb#31
  def vertical?; end
end

# source://ttfunk//lib/ttfunk/table/loca.rb#7
class TTFunk::Table::Loca < ::TTFunk::Table
  # source://ttfunk//lib/ttfunk/table/loca.rb#31
  def index_of(glyph_id); end

  # Returns the value of attribute offsets.
  #
  # source://ttfunk//lib/ttfunk/table/loca.rb#8
  def offsets; end

  # source://ttfunk//lib/ttfunk/table/loca.rb#35
  def size_of(glyph_id); end

  private

  # source://ttfunk//lib/ttfunk/table/loca.rb#41
  def parse!; end

  class << self
    # Accepts an array of offsets, with each index corresponding to the
    # glyph id with that index.
    #
    # Returns a hash containing:
    #
    # * :table - the string representing the table's contents
    # * :type  - the type of offset (to be encoded in the 'head' table)
    #
    # source://ttfunk//lib/ttfunk/table/loca.rb#17
    def encode(offsets); end
  end
end

# source://ttfunk//lib/ttfunk/table/maxp.rb#7
class TTFunk::Table::Maxp < ::TTFunk::Table
  # Returns the value of attribute max_component_contours.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#13
  def max_component_contours; end

  # Returns the value of attribute max_component_depth.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#22
  def max_component_depth; end

  # Returns the value of attribute max_component_elements.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#21
  def max_component_elements; end

  # Returns the value of attribute max_component_points.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#12
  def max_component_points; end

  # Returns the value of attribute max_contours.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#11
  def max_contours; end

  # Returns the value of attribute max_function_defs.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#17
  def max_function_defs; end

  # Returns the value of attribute max_instruction_defs.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#18
  def max_instruction_defs; end

  # Returns the value of attribute max_points.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#10
  def max_points; end

  # Returns the value of attribute max_size_of_instructions.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#20
  def max_size_of_instructions; end

  # Returns the value of attribute max_stack_elements.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#19
  def max_stack_elements; end

  # Returns the value of attribute max_storage.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#16
  def max_storage; end

  # Returns the value of attribute max_twilight_points.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#15
  def max_twilight_points; end

  # Returns the value of attribute max_zones.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#14
  def max_zones; end

  # Returns the value of attribute num_glyphs.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#9
  def num_glyphs; end

  # Returns the value of attribute version.
  #
  # source://ttfunk//lib/ttfunk/table/maxp.rb#8
  def version; end

  private

  # source://ttfunk//lib/ttfunk/table/maxp.rb#33
  def parse!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/maxp.rb#24
    def encode(maxp, mapping); end
  end
end

# source://ttfunk//lib/ttfunk/table/name.rb#8
class TTFunk::Table::Name < ::TTFunk::Table
  # Returns the value of attribute compatible_full.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#47
  def compatible_full; end

  # source://ttfunk//lib/ttfunk/table/name.rb#31
  def copyright; end

  # Returns the value of attribute description.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#40
  def description; end

  # Returns the value of attribute designer.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#39
  def designer; end

  # Returns the value of attribute designer_url.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#42
  def designer_url; end

  # Returns the value of attribute entries.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#28
  def entries; end

  # Returns the value of attribute font_family.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#32
  def font_family; end

  # Returns the value of attribute font_name.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#35
  def font_name; end

  # Returns the value of attribute font_subfamily.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#33
  def font_subfamily; end

  # source://ttfunk//lib/ttfunk/table/name.rb#43
  def license; end

  # source://ttfunk//lib/ttfunk/table/name.rb#44
  def license_url; end

  # Returns the value of attribute manufacturer.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#38
  def manufacturer; end

  # source://ttfunk//lib/ttfunk/table/name.rb#105
  def postscript_name; end

  # Returns the value of attribute preferred_family.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#45
  def preferred_family; end

  # Returns the value of attribute preferred_subfamily.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#46
  def preferred_subfamily; end

  # Returns the value of attribute sample_text.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#48
  def sample_text; end

  # Returns the value of attribute strings.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#29
  def strings; end

  # Returns the value of attribute trademark.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#37
  def trademark; end

  # Returns the value of attribute unique_subfamily.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#34
  def unique_subfamily; end

  # Returns the value of attribute vendor_url.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#41
  def vendor_url; end

  # Returns the value of attribute version.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#36
  def version; end

  private

  # source://ttfunk//lib/ttfunk/table/name.rb#113
  def parse!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/name.rb#70
    def encode(names, key = T.unsafe(nil)); end
  end
end

# source://ttfunk//lib/ttfunk/table/name.rb#67
TTFunk::Table::Name::COMPATIBLE_FULL_NAME_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/name.rb#50
TTFunk::Table::Name::COPYRIGHT_NAME_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/name.rb#60
TTFunk::Table::Name::DESCRIPTION_NAME_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/name.rb#59
TTFunk::Table::Name::DESIGNER_NAME_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/name.rb#62
TTFunk::Table::Name::DESIGNER_URL_NAME_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/name.rb#51
TTFunk::Table::Name::FONT_FAMILY_NAME_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/name.rb#54
TTFunk::Table::Name::FONT_NAME_NAME_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/name.rb#52
TTFunk::Table::Name::FONT_SUBFAMILY_NAME_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/name.rb#63
TTFunk::Table::Name::LICENSE_NAME_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/name.rb#64
TTFunk::Table::Name::LICENSE_URL_NAME_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/name.rb#58
TTFunk::Table::Name::MANUFACTURER_NAME_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/name.rb#9
class TTFunk::Table::Name::NameString < ::String
  # @return [NameString] a new instance of NameString
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#14
  def initialize(text, platform_id, encoding_id, language_id); end

  # Returns the value of attribute encoding_id.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#11
  def encoding_id; end

  # Returns the value of attribute language_id.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#12
  def language_id; end

  # Returns the value of attribute platform_id.
  #
  # source://ttfunk//lib/ttfunk/table/name.rb#10
  def platform_id; end

  # source://ttfunk//lib/ttfunk/table/name.rb#21
  def strip_extended; end
end

# source://ttfunk//lib/ttfunk/table/name.rb#56
TTFunk::Table::Name::POSTSCRIPT_NAME_NAME_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/name.rb#65
TTFunk::Table::Name::PREFERRED_FAMILY_NAME_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/name.rb#66
TTFunk::Table::Name::PREFERRED_SUBFAMILY_NAME_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/name.rb#68
TTFunk::Table::Name::SAMPLE_TEXT_NAME_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/name.rb#57
TTFunk::Table::Name::TRADEMARK_NAME_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/name.rb#53
TTFunk::Table::Name::UNIQUE_SUBFAMILY_NAME_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/name.rb#61
TTFunk::Table::Name::VENDOR_URL_NAME_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/name.rb#55
TTFunk::Table::Name::VERSION_NAME_ID = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/os2.rb#8
class TTFunk::Table::OS2 < ::TTFunk::Table
  # Returns the value of attribute ascent.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#33
  def ascent; end

  # Returns the value of attribute ave_char_width.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#11
  def ave_char_width; end

  # Returns the value of attribute break_char.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#43
  def break_char; end

  # Returns the value of attribute cap_height.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#41
  def cap_height; end

  # Returns the value of attribute char_range.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#27
  def char_range; end

  # Returns the value of attribute code_page_range.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#38
  def code_page_range; end

  # Returns the value of attribute default_char.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#42
  def default_char; end

  # Returns the value of attribute descent.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#34
  def descent; end

  # Returns the value of attribute family_class.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#25
  def family_class; end

  # Returns the value of attribute first_char_index.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#30
  def first_char_index; end

  # Returns the value of attribute last_char_index.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#31
  def last_char_index; end

  # Returns the value of attribute line_gap.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#35
  def line_gap; end

  # Returns the value of attribute max_context.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#44
  def max_context; end

  # Returns the value of attribute panose.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#26
  def panose; end

  # Returns the value of attribute selection.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#29
  def selection; end

  # source://ttfunk//lib/ttfunk/table/os2.rb#280
  def tag; end

  # Returns the value of attribute type.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#14
  def type; end

  # Returns the value of attribute vendor_id.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#28
  def vendor_id; end

  # Returns the value of attribute version.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#9
  def version; end

  # Returns the value of attribute weight_class.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#12
  def weight_class; end

  # Returns the value of attribute width_class.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#13
  def width_class; end

  # Returns the value of attribute win_ascent.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#36
  def win_ascent; end

  # Returns the value of attribute win_descent.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#37
  def win_descent; end

  # Returns the value of attribute x_height.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#40
  def x_height; end

  # Returns the value of attribute y_strikeout_position.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#24
  def y_strikeout_position; end

  # Returns the value of attribute y_strikeout_size.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#23
  def y_strikeout_size; end

  # Returns the value of attribute y_subscript_x_offset.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#17
  def y_subscript_x_offset; end

  # Returns the value of attribute y_subscript_x_size.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#15
  def y_subscript_x_size; end

  # Returns the value of attribute y_subscript_y_offset.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#18
  def y_subscript_y_offset; end

  # Returns the value of attribute y_subscript_y_size.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#16
  def y_subscript_y_size; end

  # Returns the value of attribute y_superscript_x_offset.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#21
  def y_superscript_x_offset; end

  # Returns the value of attribute y_superscript_x_size.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#19
  def y_superscript_x_size; end

  # Returns the value of attribute y_superscript_y_offset.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#22
  def y_superscript_y_offset; end

  # Returns the value of attribute y_superscript_y_size.
  #
  # source://ttfunk//lib/ttfunk/table/os2.rb#20
  def y_superscript_y_size; end

  private

  # source://ttfunk//lib/ttfunk/table/os2.rb#473
  def parse!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/os2.rb#285
    def encode(os2, subset); end

    private

    # source://ttfunk//lib/ttfunk/table/os2.rb#394
    def avg_char_width_for(os2, subset); end

    # source://ttfunk//lib/ttfunk/table/os2.rb#402
    def avg_ms_symbol_char_width_for(os2, subset); end

    # source://ttfunk//lib/ttfunk/table/os2.rb#420
    def avg_weighted_char_width_for(os2, subset); end

    # source://ttfunk//lib/ttfunk/table/os2.rb#355
    def code_pages_for(subset); end

    # source://ttfunk//lib/ttfunk/table/os2.rb#381
    def group_original_code_points_by_bit(os2); end

    # source://ttfunk//lib/ttfunk/table/os2.rb#363
    def unicode_blocks_for(os2, original_field, subset); end
  end
end

# source://ttfunk//lib/ttfunk/table/os2.rb#258
TTFunk::Table::OS2::CODEPOINT_SPACE = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/os2.rb#46
TTFunk::Table::OS2::CODE_PAGE_BITS = T.let(T.unsafe(nil), Hash)

# source://ttfunk//lib/ttfunk/table/os2.rb#257
TTFunk::Table::OS2::LOWERCASE_COUNT = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/os2.rb#256
TTFunk::Table::OS2::LOWERCASE_END = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/os2.rb#255
TTFunk::Table::OS2::LOWERCASE_START = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/os2.rb#259
TTFunk::Table::OS2::SPACE_GLYPH_MISSING_ERROR = T.let(T.unsafe(nil), String)

# source://ttfunk//lib/ttfunk/table/os2.rb#81
TTFunk::Table::OS2::UNICODE_BLOCKS = T.let(T.unsafe(nil), Hash)

# source://ttfunk//lib/ttfunk/table/os2.rb#253
TTFunk::Table::OS2::UNICODE_MAX = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/os2.rb#254
TTFunk::Table::OS2::UNICODE_RANGES = T.let(T.unsafe(nil), Array)

# source://ttfunk//lib/ttfunk/table/os2.rb#275
TTFunk::Table::OS2::WEIGHT_LOWERCASE = T.let(T.unsafe(nil), Array)

# Used to calculate the xAvgCharWidth field.
# From https://docs.microsoft.com/en-us/typography/opentype/spec/os2:
#
# "When first defined, the specification was biased toward Basic Latin
# characters, and it was thought that the xAvgCharWidth value could be
# used to estimate the average length of lines of text. A formula for
# calculating xAvgCharWidth was provided using frequency-of-use
# weighting factors for lowercase letters a - z."
#
# The array below contains 26 weight values which correspond to the
# 26 letters in the Latin alphabet. Each weight is the relative
# frequency of that letter in the English language.
#
# source://ttfunk//lib/ttfunk/table/os2.rb#274
TTFunk::Table::OS2::WEIGHT_SPACE = T.let(T.unsafe(nil), Integer)

# source://ttfunk//lib/ttfunk/table/post.rb#7
class TTFunk::Table::Post < ::TTFunk::Table
  # Returns the value of attribute fixed_pitch.
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#12
  def fixed_pitch; end

  # @return [Boolean]
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#26
  def fixed_pitch?; end

  # Returns the value of attribute format.
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#8
  def format; end

  # source://ttfunk//lib/ttfunk/table/post.rb#30
  def glyph_for(_code); end

  # Returns the value of attribute italic_angle.
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#9
  def italic_angle; end

  # Returns the value of attribute max_mem_type1.
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#16
  def max_mem_type1; end

  # Returns the value of attribute max_mem_type42.
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#14
  def max_mem_type42; end

  # Returns the value of attribute min_mem_type1.
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#15
  def min_mem_type1; end

  # Returns the value of attribute min_mem_type42.
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#13
  def min_mem_type42; end

  # source://ttfunk//lib/ttfunk/table/post.rb#34
  def recode(mapping); end

  # Returns the value of attribute subtable.
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#18
  def subtable; end

  # Returns the value of attribute underline_position.
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#10
  def underline_position; end

  # Returns the value of attribute underline_thickness.
  #
  # source://ttfunk//lib/ttfunk/table/post.rb#11
  def underline_thickness; end

  private

  # source://ttfunk//lib/ttfunk/table/post.rb#64
  def parse!; end

  # source://ttfunk//lib/ttfunk/table/post.rb#87
  def parse_format!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/post.rb#20
    def encode(post, mapping); end
  end
end

# source://ttfunk//lib/ttfunk/table/post/format10.rb#6
module TTFunk::Table::Post::Format10
  # source://ttfunk//lib/ttfunk/table/post/format10.rb#39
  def glyph_for(code); end

  private

  # source://ttfunk//lib/ttfunk/table/post/format10.rb#45
  def parse_format!; end
end

# source://ttfunk//lib/ttfunk/table/post/format10.rb#7
TTFunk::Table::Post::Format10::POSTSCRIPT_GLYPHS = T.let(T.unsafe(nil), Array)

# source://ttfunk//lib/ttfunk/table/post/format20.rb#9
module TTFunk::Table::Post::Format20
  include ::TTFunk::Table::Post::Format10

  # source://ttfunk//lib/ttfunk/table/post/format20.rb#12
  def glyph_for(code); end

  private

  # source://ttfunk//lib/ttfunk/table/post/format20.rb#25
  def parse_format!; end
end

# source://ttfunk//lib/ttfunk/table/post/format30.rb#6
module TTFunk::Table::Post::Format30
  # source://ttfunk//lib/ttfunk/table/post/format30.rb#7
  def glyph_for(_code); end

  private

  # source://ttfunk//lib/ttfunk/table/post/format30.rb#13
  def parse_format!; end
end

# source://ttfunk//lib/ttfunk/table/post/format40.rb#6
module TTFunk::Table::Post::Format40
  # source://ttfunk//lib/ttfunk/table/post/format40.rb#7
  def glyph_for(code); end

  private

  # source://ttfunk//lib/ttfunk/table/post/format40.rb#13
  def parse_format!; end
end

# source://ttfunk//lib/ttfunk/table/sbix.rb#7
class TTFunk::Table::Sbix < ::TTFunk::Table
  # source://ttfunk//lib/ttfunk/table/sbix.rb#36
  def all_bitmap_data_for(glyph_id); end

  # source://ttfunk//lib/ttfunk/table/sbix.rb#15
  def bitmap_data_for(glyph_id, strike_index); end

  # Returns the value of attribute flags.
  #
  # source://ttfunk//lib/ttfunk/table/sbix.rb#9
  def flags; end

  # Returns the value of attribute num_strikes.
  #
  # source://ttfunk//lib/ttfunk/table/sbix.rb#10
  def num_strikes; end

  # Returns the value of attribute strikes.
  #
  # source://ttfunk//lib/ttfunk/table/sbix.rb#11
  def strikes; end

  # Returns the value of attribute version.
  #
  # source://ttfunk//lib/ttfunk/table/sbix.rb#8
  def version; end

  private

  # source://ttfunk//lib/ttfunk/table/sbix.rb#44
  def parse!; end
end

# source://ttfunk//lib/ttfunk/table/sbix.rb#13
class TTFunk::Table::Sbix::BitmapData < ::Struct
  # Returns the value of attribute data
  #
  # @return [Object] the current value of data
  def data; end

  # Sets the attribute data
  #
  # @param value [Object] the value to set the attribute data to.
  # @return [Object] the newly set value
  def data=(_); end

  # Returns the value of attribute ppem
  #
  # @return [Object] the current value of ppem
  def ppem; end

  # Sets the attribute ppem
  #
  # @param value [Object] the value to set the attribute ppem to.
  # @return [Object] the newly set value
  def ppem=(_); end

  # Returns the value of attribute resolution
  #
  # @return [Object] the current value of resolution
  def resolution; end

  # Sets the attribute resolution
  #
  # @param value [Object] the value to set the attribute resolution to.
  # @return [Object] the newly set value
  def resolution=(_); end

  # Returns the value of attribute type
  #
  # @return [Object] the current value of type
  def type; end

  # Sets the attribute type
  #
  # @param value [Object] the value to set the attribute type to.
  # @return [Object] the newly set value
  def type=(_); end

  # Returns the value of attribute x
  #
  # @return [Object] the current value of x
  def x; end

  # Sets the attribute x
  #
  # @param value [Object] the value to set the attribute x to.
  # @return [Object] the newly set value
  def x=(_); end

  # Returns the value of attribute y
  #
  # @return [Object] the current value of y
  def y; end

  # Sets the attribute y
  #
  # @param value [Object] the value to set the attribute y to.
  # @return [Object] the newly set value
  def y=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://ttfunk//lib/ttfunk/table/vorg.rb#7
class TTFunk::Table::Vorg < ::TTFunk::Table
  # Returns the value of attribute count.
  #
  # source://ttfunk//lib/ttfunk/table/vorg.rb#11
  def count; end

  # Returns the value of attribute default_vert_origin_y.
  #
  # source://ttfunk//lib/ttfunk/table/vorg.rb#11
  def default_vert_origin_y; end

  # source://ttfunk//lib/ttfunk/table/vorg.rb#28
  def for(glyph_id); end

  # Returns the value of attribute major_version.
  #
  # source://ttfunk//lib/ttfunk/table/vorg.rb#10
  def major_version; end

  # Returns the value of attribute minor_version.
  #
  # source://ttfunk//lib/ttfunk/table/vorg.rb#10
  def minor_version; end

  # source://ttfunk//lib/ttfunk/table/vorg.rb#36
  def origins; end

  # source://ttfunk//lib/ttfunk/table/vorg.rb#32
  def tag; end

  private

  # source://ttfunk//lib/ttfunk/table/vorg.rb#42
  def parse!; end

  class << self
    # source://ttfunk//lib/ttfunk/table/vorg.rb#13
    def encode(vorg); end
  end
end

# source://ttfunk//lib/ttfunk/table/vorg.rb#8
TTFunk::Table::Vorg::TAG = T.let(T.unsafe(nil), String)

# source://ttfunk//lib/ttfunk/encoded_string.rb#6
class TTFunk::UnresolvedPlaceholderError < ::StandardError; end
