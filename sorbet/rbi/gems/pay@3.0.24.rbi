# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pay` gem.
# Please instead update this file by running `bin/tapioca gem pay`.

# A subscription has moved from the Active status to the Past Due status. This will only be triggered when the initial transaction in a billing cycle is declined. Once the status moves to past due, it will not be triggered again in that billing cycle.
#
# source://pay//lib/pay/version.rb#1
module Pay
  # source://pay//lib/pay.rb#32
  def application_name; end

  # source://pay//lib/pay.rb#32
  def application_name=(val); end

  # source://pay//lib/pay.rb#42
  def automount_routes; end

  # source://pay//lib/pay.rb#42
  def automount_routes=(val); end

  # source://pay//lib/pay.rb#26
  def braintree_gateway; end

  # source://pay//lib/pay.rb#26
  def braintree_gateway=(val); end

  # source://pay//lib/pay.rb#33
  def business_address; end

  # source://pay//lib/pay.rb#33
  def business_address=(val); end

  # source://pay//lib/pay.rb#35
  def business_logo; end

  # source://pay//lib/pay.rb#35
  def business_logo=(val); end

  # source://pay//lib/pay.rb#34
  def business_name; end

  # source://pay//lib/pay.rb#34
  def business_name=(val); end

  # source://pay//lib/pay.rb#48
  def default_plan_name; end

  # source://pay//lib/pay.rb#48
  def default_plan_name=(val); end

  # source://pay//lib/pay.rb#45
  def default_product_name; end

  # source://pay//lib/pay.rb#45
  def default_product_name=(val); end

  # source://pay//lib/pay.rb#28
  def model_parent_class; end

  # source://pay//lib/pay.rb#28
  def model_parent_class=(val); end

  # source://pay//lib/pay.rb#51
  def routes_path; end

  # source://pay//lib/pay.rb#51
  def routes_path=(val); end

  # source://pay//lib/pay.rb#39
  def send_emails; end

  # source://pay//lib/pay.rb#39
  def send_emails=(val); end

  # source://pay//lib/pay.rb#36
  def support_email; end

  # source://pay//lib/pay.rb#36
  def support_email=(val); end

  class << self
    # source://pay//lib/pay.rb#32
    def application_name; end

    # source://pay//lib/pay.rb#32
    def application_name=(val); end

    # source://pay//lib/pay.rb#42
    def automount_routes; end

    # source://pay//lib/pay.rb#42
    def automount_routes=(val); end

    # source://pay//lib/pay.rb#26
    def braintree_gateway; end

    # source://pay//lib/pay.rb#26
    def braintree_gateway=(val); end

    # source://pay//lib/pay.rb#33
    def business_address; end

    # source://pay//lib/pay.rb#33
    def business_address=(val); end

    # source://pay//lib/pay.rb#35
    def business_logo; end

    # source://pay//lib/pay.rb#35
    def business_logo=(val); end

    # source://pay//lib/pay.rb#34
    def business_name; end

    # source://pay//lib/pay.rb#34
    def business_name=(val); end

    # source://pay//lib/pay.rb#48
    def default_plan_name; end

    # source://pay//lib/pay.rb#48
    def default_plan_name=(val); end

    # source://pay//lib/pay.rb#45
    def default_product_name; end

    # source://pay//lib/pay.rb#45
    def default_product_name=(val); end

    # source://pay//lib/pay.rb#28
    def model_parent_class; end

    # source://pay//lib/pay.rb#28
    def model_parent_class=(val); end

    # source://pay//lib/pay.rb#51
    def routes_path; end

    # source://pay//lib/pay.rb#51
    def routes_path=(val); end

    # source://pay//lib/pay.rb#39
    def send_emails; end

    # source://pay//lib/pay.rb#39
    def send_emails=(val); end

    # @yield [_self]
    # @yieldparam _self [Pay] the object that the method was called on
    #
    # source://pay//lib/pay.rb#54
    def setup; end

    # source://pay//lib/pay.rb#36
    def support_email; end

    # source://pay//lib/pay.rb#36
    def support_email=(val); end
  end
end

# source://pay//lib/pay/errors.rb#14
class Pay::ActionRequired < ::Pay::PaymentError
  # source://pay//lib/pay/errors.rb#15
  def message; end
end

# source://pay//lib/pay/adapter.rb#2
module Pay::Adapter
  extend ::ActiveSupport::Concern

  class << self
    # source://pay//lib/pay/adapter.rb#5
    def current_adapter; end

    # source://pay//lib/pay/adapter.rb#13
    def json_column_type; end
  end
end

class Pay::ApplicationController < ::ActionController::Base
  private

  # source://actionview/7.0.6/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end

  class << self
    # source://activesupport/7.0.6/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.6/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

module Pay::ApplicationController::HelperMethods
  include ::ActionText::ContentHelper
  include ::ActionText::TagHelper
  include ::Turbo::DriveHelper
  include ::Turbo::FramesHelper
  include ::Turbo::IncludesHelper
  include ::Turbo::StreamsHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::Turbo::Streams::ActionHelper
  include ::ActionController::Base::HelperMethods
  include ::Pay::ApplicationHelper
end

module Pay::ApplicationHelper; end
class Pay::ApplicationJob < ::ActiveJob::Base; end

class Pay::ApplicationMailer < ::ActionMailer::Base
  private

  # source://actionview/7.0.6/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://actionview/7.0.6/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.6/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionmailer/7.0.6/lib/action_mailer/base.rb#490
    def default_params; end
  end
end

# Adds Pay methods to ActiveRecord models
#
# source://pay//lib/pay/attributes.rb#4
module Pay::Attributes
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Pay::Attributes::ClassMethods
end

# source://pay//lib/pay/attributes.rb#0
module Pay::Attributes::ClassMethods
  # source://pay//lib/pay/attributes.rb#64
  def pay_customer; end

  # source://pay//lib/pay/attributes.rb#69
  def pay_merchant; end
end

# source://pay//lib/pay/attributes.rb#7
module Pay::Attributes::CustomerExtension
  extend ::ActiveSupport::Concern

  # source://pay//lib/pay/attributes.rb#38
  def cancel_active_pay_subscriptions!; end

  # Changes a user's payment processor
  #
  # This has several effects:
  # - Finds or creates a Pay::Customer for the process and marks it as default
  # - Removes the default flag from all other Pay::Customers
  # - Removes the default flag from all Pay::PaymentMethods
  #
  # @raise [Pay::Error]
  #
  # source://pay//lib/pay/attributes.rb#25
  def set_payment_processor(processor_name, allow_fake: T.unsafe(nil), **attributes); end
end

# source://pay//lib/pay/attributes.rb#43
module Pay::Attributes::MerchantExtension
  extend ::ActiveSupport::Concern

  # source://pay//lib/pay/attributes.rb#51
  def set_merchant_processor(processor_name, **attributes); end
end

# source://pay//lib/pay.rb#22
module Pay::Billable; end

# source://pay//lib/pay/billable/sync_customer.rb#3
module Pay::Billable::SyncCustomer
  extend ::ActiveSupport::Concern

  # @return [Boolean]
  #
  # source://pay//lib/pay/billable/sync_customer.rb#14
  def pay_should_sync_customer?; end

  private

  # source://pay//lib/pay/billable/sync_customer.rb#20
  def enqeue_sync_email_job; end
end

# source://pay//lib/pay/braintree.rb#2
module Pay::Braintree
  extend ::Pay::Env

  class << self
    # source://pay//lib/pay/braintree.rb#49
    def configure_webhooks; end

    # source://pay//lib/pay/braintree.rb#45
    def environment; end

    # source://pay//lib/pay/braintree.rb#41
    def merchant_id; end

    # source://pay//lib/pay/braintree.rb#37
    def private_key; end

    # source://pay//lib/pay/braintree.rb#33
    def public_key; end

    # source://pay//lib/pay/braintree.rb#22
    def setup; end
  end
end

# source://pay//lib/pay/braintree/authorization_error.rb#3
class Pay::Braintree::AuthorizationError < ::Pay::Braintree::Error
  # source://pay//lib/pay/braintree/authorization_error.rb#4
  def message; end
end

# source://pay//lib/pay/braintree/billable.rb#3
class Pay::Braintree::Billable
  # @return [Billable] a new instance of Billable
  #
  # source://pay//lib/pay/braintree/billable.rb#14
  def initialize(pay_customer); end

  # source://pay//lib/pay/braintree/billable.rb#109
  def add_payment_method(token, default: T.unsafe(nil)); end

  # source://pay//lib/pay/braintree/billable.rb#228
  def card_details_for_braintree_transaction(transaction); end

  # source://pay//lib/pay/braintree/billable.rb#58
  def charge(amount, options = T.unsafe(nil)); end

  # Retrieve the Braintree::Customer object
  #
  # - If no processor_id is present, creates a Customer.
  # - When 'payment_method_token' is present, it will also set the default payment method
  #
  # source://pay//lib/pay/braintree/billable.rb#22
  def customer; end

  # source://pay//lib/pay/braintree/billable.rb#6
  def customer_name(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/braintree/billable.rb#6
  def email(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/braintree/billable.rb#171
  def gateway; end

  # Returns the value of attribute pay_customer.
  #
  # source://pay//lib/pay/braintree/billable.rb#4
  def pay_customer; end

  # source://pay//lib/pay/braintree/billable.rb#6
  def payment_method_token(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/braintree/billable.rb#6
  def payment_method_token?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/braintree/billable.rb#6
  def processor_id(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/braintree/billable.rb#6
  def processor_id?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/braintree/billable.rb#148
  def processor_subscription(subscription_id, options = T.unsafe(nil)); end

  # source://pay//lib/pay/braintree/billable.rb#175
  def save_payment_method(payment_method, default:); end

  # source://pay//lib/pay/braintree/billable.rb#152
  def save_transaction(transaction); end

  # source://pay//lib/pay/braintree/billable.rb#76
  def subscribe(name: T.unsafe(nil), plan: T.unsafe(nil), **options); end

  # source://pay//lib/pay/braintree/billable.rb#142
  def trial_end_date(subscription); end

  # Syncs name and email to Braintree::Customer
  #
  # source://pay//lib/pay/braintree/billable.rb#52
  def update_customer!; end

  # source://pay//lib/pay/braintree/billable.rb#138
  def update_email!; end
end

# source://pay//lib/pay/braintree/charge.rb#3
class Pay::Braintree::Charge
  # @return [Charge] a new instance of Charge
  #
  # source://pay//lib/pay/braintree/charge.rb#8
  def initialize(pay_charge); end

  # source://pay//lib/pay/braintree/charge.rb#12
  def charge; end

  # Returns the value of attribute pay_charge.
  #
  # source://pay//lib/pay/braintree/charge.rb#4
  def pay_charge; end

  # source://pay//lib/pay/braintree/charge.rb#6
  def processor_id(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/braintree/charge.rb#18
  def refund!(amount_to_refund); end
end

# source://pay//lib/pay/braintree/error.rb#5
class Pay::Braintree::Error < ::Pay::Error
  # @return [Error] a new instance of Error
  #
  # source://pay//lib/pay/braintree/error.rb#9
  def initialize(result); end

  # source://pay//lib/pay/braintree/error.rb#18
  def cause; end

  # For any manually raised Braintree error results (for failure responses)
  # we can raise this exception manually but treat it as if we wrapped an exception
  #
  # source://pay//lib/pay/braintree/error.rb#7
  def result; end
end

# source://pay//lib/pay/braintree/payment_method.rb#3
class Pay::Braintree::PaymentMethod
  # @return [PaymentMethod] a new instance of PaymentMethod
  #
  # source://pay//lib/pay/braintree/payment_method.rb#17
  def initialize(pay_payment_method); end

  # source://pay//lib/pay/braintree/payment_method.rb#6
  def customer(*_arg0, **_arg1, &_arg2); end

  # Remove payment method
  #
  # @raise [Pay::Braintree::Error]
  #
  # source://pay//lib/pay/braintree/payment_method.rb#29
  def detach; end

  # Sets payment method as default on Stripe
  #
  # @raise [Pay::Braintree::Error]
  #
  # source://pay//lib/pay/braintree/payment_method.rb#22
  def make_default!; end

  # Returns the value of attribute pay_payment_method.
  #
  # source://pay//lib/pay/braintree/payment_method.rb#4
  def pay_payment_method; end

  # source://pay//lib/pay/braintree/payment_method.rb#6
  def processor_id(*_arg0, **_arg1, &_arg2); end

  private

  # source://pay//lib/pay/braintree/payment_method.rb#37
  def gateway; end

  class << self
    # source://pay//lib/pay/braintree/payment_method.rb#8
    def sync(id, object: T.unsafe(nil), try: T.unsafe(nil), retries: T.unsafe(nil)); end
  end
end

# source://pay//lib/pay/braintree/subscription.rb#3
class Pay::Braintree::Subscription
  # @return [Subscription] a new instance of Subscription
  #
  # source://pay//lib/pay/braintree/subscription.rb#22
  def initialize(pay_subscription); end

  # source://pay//lib/pay/braintree/subscription.rb#6
  def active?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/braintree/subscription.rb#30
  def cancel; end

  # source://pay//lib/pay/braintree/subscription.rb#46
  def cancel_now!; end

  # source://pay//lib/pay/braintree/subscription.rb#6
  def canceled?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/braintree/subscription.rb#6
  def customer(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/braintree/subscription.rb#6
  def ends_at(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/braintree/subscription.rb#6
  def name(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://pay//lib/pay/braintree/subscription.rb#53
  def on_grace_period?; end

  # source://pay//lib/pay/braintree/subscription.rb#6
  def on_trial?(*_arg0, **_arg1, &_arg2); end

  # @raise [NotImplementedError]
  #
  # source://pay//lib/pay/braintree/subscription.rb#61
  def pause; end

  # @return [Boolean]
  #
  # source://pay//lib/pay/braintree/subscription.rb#57
  def paused?; end

  # Returns the value of attribute pay_subscription.
  #
  # source://pay//lib/pay/braintree/subscription.rb#4
  def pay_subscription; end

  # source://pay//lib/pay/braintree/subscription.rb#6
  def processor_id(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/braintree/subscription.rb#6
  def processor_plan(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/braintree/subscription.rb#6
  def processor_subscription(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/braintree/subscription.rb#6
  def prorate(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/braintree/subscription.rb#6
  def prorate?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/braintree/subscription.rb#6
  def quantity(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/braintree/subscription.rb#6
  def quantity?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/braintree/subscription.rb#65
  def resume; end

  # source://pay//lib/pay/braintree/subscription.rb#26
  def subscription(**options); end

  # source://pay//lib/pay/braintree/subscription.rb#94
  def swap(plan); end

  # source://pay//lib/pay/braintree/subscription.rb#6
  def trial_ends_at(*_arg0, **_arg1, &_arg2); end

  private

  # source://pay//lib/pay/braintree/subscription.rb#150
  def discount_for_switching_to_monthly(current_plan, plan); end

  # source://pay//lib/pay/braintree/subscription.rb#163
  def discount_for_switching_to_yearly; end

  # source://pay//lib/pay/braintree/subscription.rb#140
  def find_braintree_plan(id); end

  # source://pay//lib/pay/braintree/subscription.rb#132
  def gateway; end

  # source://pay//lib/pay/braintree/subscription.rb#158
  def money_remaining_on_yearly_plan(current_plan); end

  # source://pay//lib/pay/braintree/subscription.rb#178
  def swap_across_frequencies(plan); end

  # Helper methods for swapping plans
  #
  # @return [Boolean]
  #
  # source://pay//lib/pay/braintree/subscription.rb#146
  def switching_to_monthly_plan?(current_plan, plan); end

  # @return [Boolean]
  #
  # source://pay//lib/pay/braintree/subscription.rb#136
  def would_change_billing_frequency?(plan); end
end

# source://pay//lib/pay/braintree.rb#10
module Pay::Braintree::Webhooks; end

# source://pay//lib/pay/braintree/webhooks/subscription_canceled.rb#6
class Pay::Braintree::Webhooks::SubscriptionCanceled
  # source://pay//lib/pay/braintree/webhooks/subscription_canceled.rb#7
  def call(event); end
end

# source://pay//lib/pay/braintree/webhooks/subscription_charged_successfully.rb#6
class Pay::Braintree::Webhooks::SubscriptionChargedSuccessfully
  # source://pay//lib/pay/braintree/webhooks/subscription_charged_successfully.rb#7
  def call(event); end
end

# source://pay//lib/pay/braintree/webhooks/subscription_charged_unsuccessfully.rb#6
class Pay::Braintree::Webhooks::SubscriptionChargedUnsuccessfully
  # source://pay//lib/pay/braintree/webhooks/subscription_charged_unsuccessfully.rb#7
  def call(event); end
end

# source://pay//lib/pay/braintree/webhooks/subscription_expired.rb#6
class Pay::Braintree::Webhooks::SubscriptionExpired
  # source://pay//lib/pay/braintree/webhooks/subscription_expired.rb#7
  def call(event); end
end

# source://pay//lib/pay/braintree/webhooks/subscription_trial_ended.rb#6
class Pay::Braintree::Webhooks::SubscriptionTrialEnded
  # source://pay//lib/pay/braintree/webhooks/subscription_trial_ended.rb#7
  def call(event); end
end

# source://pay//lib/pay/braintree/webhooks/subscription_went_active.rb#6
class Pay::Braintree::Webhooks::SubscriptionWentActive
  # source://pay//lib/pay/braintree/webhooks/subscription_went_active.rb#7
  def call(event); end
end

# source://pay//lib/pay/braintree/webhooks/subscription_went_past_due.rb#6
class Pay::Braintree::Webhooks::SubscriptionWentPastDue
  # source://pay//lib/pay/braintree/webhooks/subscription_went_past_due.rb#7
  def call(event); end
end

# source://pay//lib/pay/currency.rb#2
class Pay::Currency
  include ::ActionView::Helpers::NumberHelper

  # @return [Currency] a new instance of Currency
  #
  # source://pay//lib/pay/currency.rb#20
  def initialize(iso_code); end

  # Returns the value of attribute attributes.
  #
  # source://pay//lib/pay/currency.rb#5
  def attributes; end

  # source://pay//lib/pay/currency.rb#54
  def delimiter; end

  # source://pay//lib/pay/currency.rb#58
  def format; end

  # source://pay//lib/pay/currency.rb#24
  def format_amount(amount, **options); end

  # Returns the precision to display
  #
  # If 1, returns 0
  # If 100, returns 2
  # If 1000, returns 3
  #
  # source://pay//lib/pay/currency.rb#42
  def precision; end

  # source://pay//lib/pay/currency.rb#50
  def separator; end

  # source://pay//lib/pay/currency.rb#66
  def subunit; end

  # @return [Boolean]
  #
  # source://pay//lib/pay/currency.rb#62
  def subunit?; end

  # source://pay//lib/pay/currency.rb#70
  def subunit_to_unit; end

  # source://pay//lib/pay/currency.rb#46
  def unit; end

  class << self
    # source://pay//lib/pay/currency.rb#7
    def all; end

    # Takes an amount (in cents) and currency and returns the formatted version for the currency
    #
    # source://pay//lib/pay/currency.rb#15
    def format(amount, currency:, **options); end
  end
end

class Pay::CustomerSyncJob < ::Pay::ApplicationJob
  def perform(pay_customer_id); end

  class << self
    # source://activejob/7.0.6/lib/active_job/queue_name.rb#55
    def queue_name; end
  end
end

# source://pay//lib/pay/engine.rb#4
class Pay::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.0.6/lib/active_support/callbacks.rb#68
    def __callbacks; end
  end
end

# source://pay//lib/pay/env.rb#2
module Pay::Env
  private

  # source://pay//lib/pay/env.rb#38
  def credentials; end

  # source://pay//lib/pay/env.rb#30
  def env; end

  # Search for environment variables
  #
  # We must handle a lot of different cases, including the new Rails 6
  # environment separated credentials files which have no nesting for
  # the current environment.
  #
  # 1. Check environment variable
  # 2. Check environment scoped credentials, then secrets
  # 3. Check unscoped credentials, then secrets
  #
  # source://pay//lib/pay/env.rb#14
  def find_value_by_name(scope, name); end

  # source://pay//lib/pay/env.rb#34
  def secrets; end
end

# https://avdi.codes/exception-causes-in-ruby-2-1/
#
# source://pay//lib/pay/errors.rb#3
class Pay::Error < ::StandardError; end

# source://pay//lib/pay/fake_processor.rb#2
module Pay::FakeProcessor; end

# source://pay//lib/pay/fake_processor/billable.rb#3
class Pay::FakeProcessor::Billable
  # @return [Billable] a new instance of Billable
  #
  # source://pay//lib/pay/fake_processor/billable.rb#13
  def initialize(pay_customer); end

  # source://pay//lib/pay/fake_processor/billable.rb#62
  def add_payment_method(payment_method_id, default: T.unsafe(nil)); end

  # source://pay//lib/pay/fake_processor/billable.rb#6
  def card_token(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/fake_processor/billable.rb#26
  def charge(amount, options = T.unsafe(nil)); end

  # source://pay//lib/pay/fake_processor/billable.rb#17
  def customer; end

  # source://pay//lib/pay/fake_processor/billable.rb#6
  def customer_name(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/fake_processor/billable.rb#6
  def email(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute pay_customer.
  #
  # source://pay//lib/pay/fake_processor/billable.rb#4
  def pay_customer; end

  # source://pay//lib/pay/fake_processor/billable.rb#6
  def processor_id(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/fake_processor/billable.rb#6
  def processor_id?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/fake_processor/billable.rb#86
  def processor_subscription(subscription_id, options = T.unsafe(nil)); end

  # source://pay//lib/pay/fake_processor/billable.rb#44
  def subscribe(name: T.unsafe(nil), plan: T.unsafe(nil), **options); end

  # source://pay//lib/pay/fake_processor/billable.rb#90
  def trial_end_date(subscription); end

  # source://pay//lib/pay/fake_processor/billable.rb#22
  def update_customer!; end

  # source://pay//lib/pay/fake_processor/billable.rb#82
  def update_email!; end
end

# source://pay//lib/pay/fake_processor/charge.rb#3
class Pay::FakeProcessor::Charge
  # @return [Charge] a new instance of Charge
  #
  # source://pay//lib/pay/fake_processor/charge.rb#8
  def initialize(pay_charge); end

  # source://pay//lib/pay/fake_processor/charge.rb#12
  def charge; end

  # source://pay//lib/pay/fake_processor/charge.rb#6
  def owner(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute pay_charge.
  #
  # source://pay//lib/pay/fake_processor/charge.rb#4
  def pay_charge; end

  # source://pay//lib/pay/fake_processor/charge.rb#6
  def processor_id(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/fake_processor/charge.rb#16
  def refund!(amount_to_refund); end
end

# source://pay//lib/pay/fake_processor/error.rb#3
class Pay::FakeProcessor::Error < ::Pay::Error; end

# source://pay//lib/pay/fake_processor/payment_method.rb#3
class Pay::FakeProcessor::PaymentMethod
  # @return [PaymentMethod] a new instance of PaymentMethod
  #
  # source://pay//lib/pay/fake_processor/payment_method.rb#8
  def initialize(pay_payment_method); end

  # source://pay//lib/pay/fake_processor/payment_method.rb#6
  def customer(*_arg0, **_arg1, &_arg2); end

  # Remove payment method
  #
  # source://pay//lib/pay/fake_processor/payment_method.rb#17
  def detach; end

  # Sets payment method as default on Stripe
  #
  # source://pay//lib/pay/fake_processor/payment_method.rb#13
  def make_default!; end

  # Returns the value of attribute pay_payment_method.
  #
  # source://pay//lib/pay/fake_processor/payment_method.rb#4
  def pay_payment_method; end

  # source://pay//lib/pay/fake_processor/payment_method.rb#6
  def processor_id(*_arg0, **_arg1, &_arg2); end
end

# source://pay//lib/pay/fake_processor/subscription.rb#3
class Pay::FakeProcessor::Subscription
  # @return [Subscription] a new instance of Subscription
  #
  # source://pay//lib/pay/fake_processor/subscription.rb#18
  def initialize(pay_subscription); end

  # With trial, sets end to trial end (mimicing Stripe)
  # Without trial, sets can ends_at to end of month
  #
  # source://pay//lib/pay/fake_processor/subscription.rb#28
  def cancel; end

  # source://pay//lib/pay/fake_processor/subscription.rb#36
  def cancel_now!; end

  # source://pay//lib/pay/fake_processor/subscription.rb#6
  def canceled?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/fake_processor/subscription.rb#61
  def change_quantity(quantity); end

  # source://pay//lib/pay/fake_processor/subscription.rb#6
  def ends_at(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://pay//lib/pay/fake_processor/subscription.rb#40
  def on_grace_period?; end

  # source://pay//lib/pay/fake_processor/subscription.rb#6
  def on_trial?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/fake_processor/subscription.rb#6
  def owner(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/fake_processor/subscription.rb#48
  def pause; end

  # @return [Boolean]
  #
  # source://pay//lib/pay/fake_processor/subscription.rb#44
  def paused?; end

  # Returns the value of attribute pay_subscription.
  #
  # source://pay//lib/pay/fake_processor/subscription.rb#4
  def pay_subscription; end

  # source://pay//lib/pay/fake_processor/subscription.rb#6
  def processor_id(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/fake_processor/subscription.rb#6
  def processor_plan(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/fake_processor/subscription.rb#6
  def processor_subscription(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/fake_processor/subscription.rb#6
  def prorate(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/fake_processor/subscription.rb#6
  def quantity(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/fake_processor/subscription.rb#6
  def quantity?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/fake_processor/subscription.rb#52
  def resume; end

  # source://pay//lib/pay/fake_processor/subscription.rb#22
  def subscription(**options); end

  # source://pay//lib/pay/fake_processor/subscription.rb#58
  def swap(plan); end
end

# source://pay//lib/pay/errors.rb#20
class Pay::InvalidPaymentMethod < ::Pay::PaymentError
  # source://pay//lib/pay/errors.rb#21
  def message; end
end

# source://pay//lib/pay/nano_id.rb#2
module Pay::NanoId
  class << self
    # source://pay//lib/pay/nano_id.rb#7
    def generate(size: T.unsafe(nil)); end
  end
end

# Generates unique IDs - faster than UUID
#
# source://pay//lib/pay/nano_id.rb#4
Pay::NanoId::ALPHABET = T.let(T.unsafe(nil), String)

# source://pay//lib/pay/nano_id.rb#5
Pay::NanoId::ALPHABET_SIZE = T.let(T.unsafe(nil), Integer)

# source://pay//lib/pay/paddle.rb#2
module Pay::Paddle
  extend ::Pay::Env

  class << self
    # source://pay//lib/pay/paddle.rb#58
    def configure_webhooks; end

    # source://pay//lib/pay/paddle.rb#36
    def environment; end

    # source://pay//lib/pay/paddle.rb#52
    def owner_from_passthrough(passthrough); end

    # source://pay//lib/pay/paddle.rb#48
    def parse_passthrough(passthrough); end

    # source://pay//lib/pay/paddle.rb#44
    def passthrough(owner:, **options); end

    # source://pay//lib/pay/paddle.rb#40
    def public_key_base64; end

    # source://pay//lib/pay/paddle.rb#20
    def setup; end

    # source://pay//lib/pay/paddle.rb#32
    def vendor_auth_code; end

    # source://pay//lib/pay/paddle.rb#28
    def vendor_id; end
  end
end

# source://pay//lib/pay/paddle/billable.rb#3
class Pay::Paddle::Billable
  # @return [Billable] a new instance of Billable
  #
  # source://pay//lib/pay/paddle/billable.rb#13
  def initialize(pay_customer); end

  # source://pay//lib/pay/paddle/billable.rb#52
  def add_payment_method(token, default: T.unsafe(nil)); end

  # source://pay//lib/pay/paddle/billable.rb#6
  def card_token(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/paddle/billable.rb#25
  def charge(amount, options = T.unsafe(nil)); end

  # source://pay//lib/pay/paddle/billable.rb#17
  def customer; end

  # source://pay//lib/pay/paddle/billable.rb#6
  def customer_name(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/paddle/billable.rb#6
  def email(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute pay_customer.
  #
  # source://pay//lib/pay/paddle/billable.rb#4
  def pay_customer; end

  # source://pay//lib/pay/paddle/billable.rb#6
  def processor_id(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/paddle/billable.rb#6
  def processor_id?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/paddle/billable.rb#65
  def processor_subscription(subscription_id, options = T.unsafe(nil)); end

  # source://pay//lib/pay/paddle/billable.rb#48
  def subscribe(name: T.unsafe(nil), plan: T.unsafe(nil), **options); end

  # source://pay//lib/pay/paddle/billable.rb#60
  def trial_end_date(subscription); end

  # source://pay//lib/pay/paddle/billable.rb#21
  def update_customer!; end

  # source://pay//lib/pay/paddle/billable.rb#56
  def update_email!; end
end

# source://pay//lib/pay/paddle/charge.rb#3
class Pay::Paddle::Charge
  # @return [Charge] a new instance of Charge
  #
  # source://pay//lib/pay/paddle/charge.rb#8
  def initialize(pay_charge); end

  # source://pay//lib/pay/paddle/charge.rb#12
  def charge; end

  # source://pay//lib/pay/paddle/charge.rb#6
  def customer(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute pay_charge.
  #
  # source://pay//lib/pay/paddle/charge.rb#4
  def pay_charge; end

  # source://pay//lib/pay/paddle/charge.rb#6
  def processor_id(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/paddle/charge.rb#21
  def refund!(amount_to_refund); end
end

# source://pay//lib/pay/paddle/error.rb#3
class Pay::Paddle::Error < ::Pay::Error
  # source://pay//lib/pay/paddle/error.rb#4
  def message(*_arg0, **_arg1, &_arg2); end
end

# source://pay//lib/pay/paddle/payment_method.rb#3
class Pay::Paddle::PaymentMethod
  # @return [PaymentMethod] a new instance of PaymentMethod
  #
  # source://pay//lib/pay/paddle/payment_method.rb#47
  def initialize(pay_payment_method); end

  # source://pay//lib/pay/paddle/payment_method.rb#6
  def customer(*_arg0, **_arg1, &_arg2); end

  # Remove payment method
  #
  # source://pay//lib/pay/paddle/payment_method.rb#56
  def detach; end

  # Sets payment method as default
  #
  # source://pay//lib/pay/paddle/payment_method.rb#52
  def make_default!; end

  # Returns the value of attribute pay_payment_method.
  #
  # source://pay//lib/pay/paddle/payment_method.rb#4
  def pay_payment_method; end

  # source://pay//lib/pay/paddle/payment_method.rb#6
  def processor_id(*_arg0, **_arg1, &_arg2); end

  class << self
    # source://pay//lib/pay/paddle/payment_method.rb#24
    def payment_method_details_for(subscription_id:); end

    # Paddle doesn't provide PaymentMethod IDs, so we have to lookup via the Customer
    #
    # source://pay//lib/pay/paddle/payment_method.rb#9
    def sync(pay_customer:, attributes: T.unsafe(nil)); end
  end
end

# source://pay//lib/pay/paddle/subscription.rb#3
class Pay::Paddle::Subscription
  # @return [Subscription] a new instance of Subscription
  #
  # source://pay//lib/pay/paddle/subscription.rb#66
  def initialize(pay_subscription); end

  # source://pay//lib/pay/paddle/subscription.rb#6
  def active?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/paddle/subscription.rb#77
  def cancel; end

  # source://pay//lib/pay/paddle/subscription.rb#95
  def cancel_now!; end

  # source://pay//lib/pay/paddle/subscription.rb#6
  def canceled?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/paddle/subscription.rb#6
  def ends_at(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/paddle/subscription.rb#6
  def name(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://pay//lib/pay/paddle/subscription.rb#105
  def on_grace_period?; end

  # source://pay//lib/pay/paddle/subscription.rb#6
  def on_trial?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/paddle/subscription.rb#6
  def owner(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/paddle/subscription.rb#6
  def paddle_paused_from(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/paddle/subscription.rb#113
  def pause; end

  # @return [Boolean]
  #
  # source://pay//lib/pay/paddle/subscription.rb#109
  def paused?; end

  # Returns the value of attribute pay_subscription.
  #
  # source://pay//lib/pay/paddle/subscription.rb#4
  def pay_subscription; end

  # source://pay//lib/pay/paddle/subscription.rb#6
  def processor_id(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/paddle/subscription.rb#6
  def processor_plan(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/paddle/subscription.rb#6
  def processor_subscription(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/paddle/subscription.rb#6
  def prorate(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/paddle/subscription.rb#6
  def prorate?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/paddle/subscription.rb#6
  def quantity(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/paddle/subscription.rb#6
  def quantity?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/paddle/subscription.rb#121
  def resume; end

  # source://pay//lib/pay/paddle/subscription.rb#70
  def subscription(**options); end

  # source://pay//lib/pay/paddle/subscription.rb#133
  def swap(plan); end

  # source://pay//lib/pay/paddle/subscription.rb#6
  def trial_ends_at(*_arg0, **_arg1, &_arg2); end

  class << self
    # source://pay//lib/pay/paddle/subscription.rb#23
    def sync(subscription_id, object: T.unsafe(nil), name: T.unsafe(nil)); end
  end
end

# source://pay//lib/pay/paddle.rb#9
module Pay::Paddle::Webhooks; end

# source://pay//lib/pay/paddle/webhooks/signature_verifier.rb#8
class Pay::Paddle::Webhooks::SignatureVerifier
  # @return [SignatureVerifier] a new instance of SignatureVerifier
  #
  # source://pay//lib/pay/paddle/webhooks/signature_verifier.rb#9
  def initialize(data); end

  # source://pay//lib/pay/paddle/webhooks/signature_verifier.rb#14
  def verify; end

  private

  # https://github.com/jqr/php-serialize/blob/master/lib/php_serialize.rb
  #
  # Returns a string representing the argument in a form PHP.unserialize
  # and PHP's unserialize() should both be able to load.
  #
  #   string = PHP.serialize(mixed var[, bool assoc])
  #
  # Array, Hash, Fixnum, Float, True/FalseClass, NilClass, String and Struct
  # are supported; as are objects which support the to_assoc method, which
  # returns an array of the form [['attr_name', 'value']..].  Anything else
  # will raise a TypeError.
  #
  # If 'assoc' is specified, Array's who's first element is a two value
  # array will be assumed to be an associative array, and will be serialized
  # as a PHP associative array rather than a multidimensional array.
  #
  # source://pay//lib/pay/paddle/webhooks/signature_verifier.rb#59
  def serialize(var, assoc = T.unsafe(nil)); end
end

# source://pay//lib/pay/paddle/webhooks/subscription_cancelled.rb#4
class Pay::Paddle::Webhooks::SubscriptionCancelled
  # source://pay//lib/pay/paddle/webhooks/subscription_cancelled.rb#5
  def call(event); end
end

# source://pay//lib/pay/paddle/webhooks/subscription_created.rb#4
class Pay::Paddle::Webhooks::SubscriptionCreated
  # source://pay//lib/pay/paddle/webhooks/subscription_created.rb#5
  def call(event); end
end

# source://pay//lib/pay/paddle/webhooks/subscription_payment_refunded.rb#4
class Pay::Paddle::Webhooks::SubscriptionPaymentRefunded
  # source://pay//lib/pay/paddle/webhooks/subscription_payment_refunded.rb#5
  def call(event); end
end

# source://pay//lib/pay/paddle/webhooks/subscription_payment_succeeded.rb#4
class Pay::Paddle::Webhooks::SubscriptionPaymentSucceeded
  # source://pay//lib/pay/paddle/webhooks/subscription_payment_succeeded.rb#5
  def call(event); end

  # source://pay//lib/pay/paddle/webhooks/subscription_payment_succeeded.rb#24
  def create_charge(pay_customer, event); end

  # source://pay//lib/pay/paddle/webhooks/subscription_payment_succeeded.rb#45
  def notify_user(pay_charge); end
end

# source://pay//lib/pay/paddle/webhooks/subscription_updated.rb#4
class Pay::Paddle::Webhooks::SubscriptionUpdated
  # source://pay//lib/pay/paddle/webhooks/subscription_updated.rb#5
  def call(event); end
end

# source://pay//lib/pay/payment.rb#2
class Pay::Payment
  # @return [Payment] a new instance of Payment
  #
  # source://pay//lib/pay/payment.rb#12
  def initialize(intent); end

  # source://pay//lib/pay/payment.rb#5
  def amount(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/payment.rb#44
  def amount_with_currency; end

  # @return [Boolean]
  #
  # source://pay//lib/pay/payment.rb#24
  def canceled?; end

  # @return [Boolean]
  #
  # source://pay//lib/pay/payment.rb#28
  def cancelled?; end

  # source://pay//lib/pay/payment.rb#5
  def client_secret(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/payment.rb#5
  def confirm(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/payment.rb#5
  def currency(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/payment.rb#5
  def customer(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/payment.rb#5
  def id(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute intent.
  #
  # source://pay//lib/pay/payment.rb#3
  def intent; end

  # @return [Boolean]
  #
  # source://pay//lib/pay/payment.rb#36
  def payment_intent?; end

  # @return [Boolean]
  #
  # source://pay//lib/pay/payment.rb#20
  def requires_action?; end

  # @return [Boolean]
  #
  # source://pay//lib/pay/payment.rb#16
  def requires_payment_method?; end

  # @return [Boolean]
  #
  # source://pay//lib/pay/payment.rb#40
  def setup_intent?; end

  # source://pay//lib/pay/payment.rb#5
  def status(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://pay//lib/pay/payment.rb#32
  def succeeded?; end

  # source://pay//lib/pay/payment.rb#48
  def validate; end

  class << self
    # source://pay//lib/pay/payment.rb#7
    def from_id(id); end
  end
end

# source://pay//lib/pay/errors.rb#6
class Pay::PaymentError < ::StandardError
  # @return [PaymentError] a new instance of PaymentError
  #
  # source://pay//lib/pay/errors.rb#9
  def initialize(payment); end

  # Returns the value of attribute payment.
  #
  # source://pay//lib/pay/errors.rb#7
  def payment; end
end

class Pay::PaymentsController < ::Pay::ApplicationController
  def show; end

  private

  # source://actionview/7.0.6/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end

  class << self
    # source://actionview/7.0.6/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.6/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionpack/7.0.6/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

# source://pay//lib/pay/receipts.rb#2
module Pay::Receipts
  # source://pay//lib/pay/receipts.rb#7
  def filename; end

  # source://pay//lib/pay/receipts.rb#46
  def invoice; end

  # source://pay//lib/pay/receipts.rb#42
  def invoice_filename; end

  # source://pay//lib/pay/receipts.rb#50
  def invoice_pdf(**options); end

  # source://pay//lib/pay/receipts.rb#83
  def line_items; end

  # source://pay//lib/pay/receipts.rb#3
  def product; end

  # source://pay//lib/pay/receipts.rb#12
  def receipt; end

  # source://pay//lib/pay/receipts.rb#7
  def receipt_filename; end

  # source://pay//lib/pay/receipts.rb#16
  def receipt_pdf(**options); end
end

# source://pay//lib/pay/stripe.rb#2
module Pay::Stripe
  extend ::Pay::Env

  class << self
    # source://pay//lib/pay/stripe.rb#53
    def configure_webhooks; end

    # source://pay//lib/pay/stripe.rb#45
    def private_key; end

    # source://pay//lib/pay/stripe.rb#41
    def public_key; end

    # source://pay//lib/pay/stripe.rb#31
    def setup; end

    # source://pay//lib/pay/stripe.rb#49
    def signing_secret; end
  end
end

# source://pay//lib/pay/stripe/billable.rb#3
class Pay::Stripe::Billable
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor

  # @return [Billable] a new instance of Billable
  #
  # source://pay//lib/pay/stripe/billable.rb#21
  def initialize(pay_customer); end

  # source://pay//lib/pay/stripe/billable.rb#105
  def add_payment_method(payment_method_id, default: T.unsafe(nil)); end

  # source://pay//lib/pay/stripe/billable.rb#233
  def billing_portal(**options); end

  # source://pay//lib/pay/stripe/billable.rb#53
  def charge(amount, options = T.unsafe(nil)); end

  # https://stripe.com/docs/api/checkout/sessions/create
  #
  # checkout(mode: "payment")
  # checkout(mode: "setup")
  # checkout(mode: "subscription")
  #
  # checkout(line_items: "price_12345", quantity: 2)
  # checkout(line_items: [{ price: "price_123" }, { price: "price_456" }])
  # checkout(line_items: "price_12345", allow_promotion_codes: true)
  #
  # source://pay//lib/pay/stripe/billable.rb#183
  def checkout(**options); end

  # https://stripe.com/docs/api/checkout/sessions/create
  #
  # checkout_charge(amount: 15_00, name: "T-shirt", quantity: 2)
  #
  # source://pay//lib/pay/stripe/billable.rb#217
  def checkout_charge(amount:, name:, quantity: T.unsafe(nil), **options); end

  # source://pay//lib/pay/stripe/billable.rb#154
  def create_setup_intent; end

  # source://pay//lib/pay/stripe/billable.rb#25
  def customer; end

  # source://pay//lib/pay/stripe/billable.rb#8
  def customer_name(*_arg0, **_arg1, &_arg2); end

  # source://actionpack/7.0.6/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options; end

  # source://actionpack/7.0.6/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options=(_arg0); end

  # source://actionpack/7.0.6/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options?; end

  # source://pay//lib/pay/stripe/billable.rb#8
  def email(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/stripe/billable.rb#145
  def invoice!(options = T.unsafe(nil)); end

  # Returns the value of attribute pay_customer.
  #
  # source://pay//lib/pay/stripe/billable.rb#6
  def pay_customer; end

  # source://pay//lib/pay/stripe/billable.rb#8
  def payment_method_token(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/stripe/billable.rb#8
  def payment_method_token?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/stripe/billable.rb#8
  def processor_id(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/stripe/billable.rb#8
  def processor_id?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/stripe/billable.rb#141
  def processor_subscription(subscription_id, options = T.unsafe(nil)); end

  # Save the Stripe::PaymentMethod to the database
  #
  # source://pay//lib/pay/stripe/billable.rb#123
  def save_payment_method(payment_method, default:); end

  # source://pay//lib/pay/stripe/billable.rb#8
  def stripe_account(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/stripe/billable.rb#75
  def subscribe(name: T.unsafe(nil), plan: T.unsafe(nil), **options); end

  # Syncs a customer's subscriptions from Stripe to the database
  #
  # source://pay//lib/pay/stripe/billable.rb#164
  def sync_subscriptions; end

  # source://pay//lib/pay/stripe/billable.rb#158
  def trial_end_date(stripe_sub); end

  # source://pay//lib/pay/stripe/billable.rb#150
  def upcoming_invoice; end

  # Syncs name and email to Stripe::Customer
  #
  # source://pay//lib/pay/stripe/billable.rb#48
  def update_customer!; end

  # source://pay//lib/pay/stripe/billable.rb#137
  def update_email!; end

  private

  # Includes the `session_id` param for Stripe Checkout with existing params (and makes sure the curly braces aren't escaped)
  #
  # source://pay//lib/pay/stripe/billable.rb#250
  def merge_session_id_param(url); end

  # Options for Stripe requests
  #
  # source://pay//lib/pay/stripe/billable.rb#245
  def stripe_options; end

  class << self
    # source://actionpack/7.0.6/lib/action_dispatch/routing/route_set.rb#564
    def _routes; end

    # source://pay//lib/pay/stripe/billable.rb#17
    def default_url_options; end

    # source://actionpack/7.0.6/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options=(value); end

    # source://actionpack/7.0.6/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options?; end
  end
end

# source://pay//lib/pay/stripe/charge.rb#3
class Pay::Stripe::Charge
  # @return [Charge] a new instance of Charge
  #
  # source://pay//lib/pay/stripe/charge.rb#57
  def initialize(pay_charge); end

  # source://pay//lib/pay/stripe/charge.rb#61
  def charge; end

  # Returns the value of attribute pay_charge.
  #
  # source://pay//lib/pay/stripe/charge.rb#4
  def pay_charge; end

  # source://pay//lib/pay/stripe/charge.rb#6
  def processor_id(*_arg0, **_arg1, &_arg2); end

  # https://stripe.com/docs/api/refunds/create
  #
  # refund!
  # refund!(5_00)
  # refund!(5_00, refund_application_fee: true)
  #
  # source://pay//lib/pay/stripe/charge.rb#72
  def refund!(amount_to_refund, **options); end

  # source://pay//lib/pay/stripe/charge.rb#6
  def stripe_account(*_arg0, **_arg1, &_arg2); end

  private

  # Options for Stripe requests
  #
  # source://pay//lib/pay/stripe/charge.rb#82
  def stripe_options; end

  class << self
    # source://pay//lib/pay/stripe/charge.rb#8
    def sync(charge_id, object: T.unsafe(nil), stripe_account: T.unsafe(nil), try: T.unsafe(nil), retries: T.unsafe(nil)); end
  end
end

# source://pay//lib/pay/stripe/error.rb#3
class Pay::Stripe::Error < ::Pay::Error
  # source://pay//lib/pay/stripe/error.rb#4
  def message(*_arg0, **_arg1, &_arg2); end
end

# source://pay//lib/pay/stripe/merchant.rb#3
class Pay::Stripe::Merchant
  # @return [Merchant] a new instance of Merchant
  #
  # source://pay//lib/pay/stripe/merchant.rb#9
  def initialize(pay_merchant); end

  # source://pay//lib/pay/stripe/merchant.rb#29
  def account; end

  # source://pay//lib/pay/stripe/merchant.rb#35
  def account_link(refresh_url:, return_url:, type: T.unsafe(nil), **options); end

  # source://pay//lib/pay/stripe/merchant.rb#13
  def create_account(**options); end

  # A single-use login link for Express accounts to access their Stripe dashboard
  #
  # source://pay//lib/pay/stripe/merchant.rb#47
  def login_link(**options); end

  # Returns the value of attribute pay_merchant.
  #
  # source://pay//lib/pay/stripe/merchant.rb#4
  def pay_merchant; end

  # source://pay//lib/pay/stripe/merchant.rb#6
  def processor_id(*_arg0, **_arg1, &_arg2); end

  # Transfer money from the platform to this connected account
  # https://stripe.com/docs/connect/charges-transfers#transfer-availability
  #
  # source://pay//lib/pay/stripe/merchant.rb#55
  def transfer(amount:, currency: T.unsafe(nil), **options); end
end

# source://pay//lib/pay/stripe/payment_method.rb#3
class Pay::Stripe::PaymentMethod
  # @return [PaymentMethod] a new instance of PaymentMethod
  #
  # source://pay//lib/pay/stripe/payment_method.rb#8
  def initialize(pay_payment_method); end

  # source://pay//lib/pay/stripe/payment_method.rb#6
  def customer(*_arg0, **_arg1, &_arg2); end

  # Remove payment method
  #
  # source://pay//lib/pay/stripe/payment_method.rb#49
  def detach; end

  # Sets payment method as default
  #
  # source://pay//lib/pay/stripe/payment_method.rb#44
  def make_default!; end

  # Returns the value of attribute pay_payment_method.
  #
  # source://pay//lib/pay/stripe/payment_method.rb#4
  def pay_payment_method; end

  # source://pay//lib/pay/stripe/payment_method.rb#6
  def processor_id(*_arg0, **_arg1, &_arg2); end

  private

  # Options for Stripe requests
  #
  # source://pay//lib/pay/stripe/payment_method.rb#56
  def stripe_options; end

  class << self
    # Extracts payment method details from a Stripe::PaymentMethod object
    #
    # source://pay//lib/pay/stripe/payment_method.rb#30
    def extract_attributes(payment_method); end

    # source://pay//lib/pay/stripe/payment_method.rb#12
    def sync(id, object: T.unsafe(nil), stripe_account: T.unsafe(nil), try: T.unsafe(nil), retries: T.unsafe(nil)); end
  end
end

# source://pay//lib/pay/stripe/subscription.rb#3
class Pay::Stripe::Subscription
  # @return [Subscription] a new instance of Subscription
  #
  # source://pay//lib/pay/stripe/subscription.rb#74
  def initialize(pay_subscription); end

  # source://pay//lib/pay/stripe/subscription.rb#6
  def active?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/stripe/subscription.rb#84
  def cancel; end

  # source://pay//lib/pay/stripe/subscription.rb#91
  def cancel_now!; end

  # source://pay//lib/pay/stripe/subscription.rb#6
  def canceled?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/stripe/subscription.rb#98
  def change_quantity(quantity); end

  # source://pay//lib/pay/stripe/subscription.rb#6
  def ends_at(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/stripe/subscription.rb#6
  def name(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://pay//lib/pay/stripe/subscription.rb#104
  def on_grace_period?; end

  # source://pay//lib/pay/stripe/subscription.rb#6
  def on_trial?(*_arg0, **_arg1, &_arg2); end

  # @raise [NotImplementedError]
  #
  # source://pay//lib/pay/stripe/subscription.rb#112
  def pause; end

  # @return [Boolean]
  #
  # source://pay//lib/pay/stripe/subscription.rb#108
  def paused?; end

  # Returns the value of attribute pay_subscription.
  #
  # source://pay//lib/pay/stripe/subscription.rb#4
  def pay_subscription; end

  # source://pay//lib/pay/stripe/subscription.rb#6
  def processor_id(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/stripe/subscription.rb#6
  def processor_plan(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/stripe/subscription.rb#6
  def processor_subscription(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/stripe/subscription.rb#6
  def prorate(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/stripe/subscription.rb#6
  def prorate?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/stripe/subscription.rb#6
  def quantity(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/stripe/subscription.rb#6
  def quantity?(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/stripe/subscription.rb#116
  def resume; end

  # source://pay//lib/pay/stripe/subscription.rb#6
  def stripe_account(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/stripe/subscription.rb#78
  def subscription(**options); end

  # source://pay//lib/pay/stripe/subscription.rb#134
  def swap(plan); end

  # source://pay//lib/pay/stripe/subscription.rb#6
  def trial_ends_at(*_arg0, **_arg1, &_arg2); end

  private

  # Options for Stripe requests
  #
  # source://pay//lib/pay/stripe/subscription.rb#155
  def stripe_options; end

  class << self
    # source://pay//lib/pay/stripe/subscription.rb#22
    def sync(subscription_id, object: T.unsafe(nil), name: T.unsafe(nil), stripe_account: T.unsafe(nil), try: T.unsafe(nil), retries: T.unsafe(nil)); end
  end
end

# source://pay//lib/pay/stripe.rb#10
module Pay::Stripe::Webhooks; end

# source://pay//lib/pay/stripe/webhooks/account_updated.rb#4
class Pay::Stripe::Webhooks::AccountUpdated
  # source://pay//lib/pay/stripe/webhooks/account_updated.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/charge_refunded.rb#4
class Pay::Stripe::Webhooks::ChargeRefunded
  # source://pay//lib/pay/stripe/webhooks/charge_refunded.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/charge_succeeded.rb#4
class Pay::Stripe::Webhooks::ChargeSucceeded
  # source://pay//lib/pay/stripe/webhooks/charge_succeeded.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/checkout_session_async_payment_succeeded.rb#4
class Pay::Stripe::Webhooks::CheckoutSessionAsyncPaymentSucceeded
  # source://pay//lib/pay/stripe/webhooks/checkout_session_async_payment_succeeded.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/checkout_session_completed.rb#4
class Pay::Stripe::Webhooks::CheckoutSessionCompleted
  # source://pay//lib/pay/stripe/webhooks/checkout_session_completed.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/customer_deleted.rb#4
class Pay::Stripe::Webhooks::CustomerDeleted
  # source://pay//lib/pay/stripe/webhooks/customer_deleted.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/customer_updated.rb#4
class Pay::Stripe::Webhooks::CustomerUpdated
  # source://pay//lib/pay/stripe/webhooks/customer_updated.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/payment_action_required.rb#4
class Pay::Stripe::Webhooks::PaymentActionRequired
  # source://pay//lib/pay/stripe/webhooks/payment_action_required.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/payment_intent_succeeded.rb#4
class Pay::Stripe::Webhooks::PaymentIntentSucceeded
  # This webhook does NOT send notifications because stripe sends both
  # `charge.succeeded` and `payment_intent.succeeded` events.
  #
  # We use `charge.succeeded` as the single place to send notifications
  #
  # source://pay//lib/pay/stripe/webhooks/payment_intent_succeeded.rb#10
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/payment_method_attached.rb#4
class Pay::Stripe::Webhooks::PaymentMethodAttached
  # source://pay//lib/pay/stripe/webhooks/payment_method_attached.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/payment_method_detached.rb#4
class Pay::Stripe::Webhooks::PaymentMethodDetached
  # source://pay//lib/pay/stripe/webhooks/payment_method_detached.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/payment_method_updated.rb#4
class Pay::Stripe::Webhooks::PaymentMethodUpdated
  # source://pay//lib/pay/stripe/webhooks/payment_method_updated.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/subscription_created.rb#4
class Pay::Stripe::Webhooks::SubscriptionCreated
  # source://pay//lib/pay/stripe/webhooks/subscription_created.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/subscription_deleted.rb#4
class Pay::Stripe::Webhooks::SubscriptionDeleted
  # source://pay//lib/pay/stripe/webhooks/subscription_deleted.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/subscription_renewing.rb#4
class Pay::Stripe::Webhooks::SubscriptionRenewing
  # Handles `invoice.upcoming` webhook from Stripe
  # Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your subscriptions settings. Note: The received Invoice object will not have an invoice ID.
  #
  # source://pay//lib/pay/stripe/webhooks/subscription_renewing.rb#8
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/subscription_updated.rb#4
class Pay::Stripe::Webhooks::SubscriptionUpdated
  # source://pay//lib/pay/stripe/webhooks/subscription_updated.rb#5
  def call(event); end
end

class Pay::UserMailer < ::Pay::ApplicationMailer
  def payment_action_required; end
  def receipt; end
  def refund; end
  def subscription_renewing; end

  private

  # source://actionview/7.0.6/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def to; end
end

# source://pay//lib/pay/version.rb#2
Pay::VERSION = T.let(T.unsafe(nil), String)

# source://pay//lib/pay/webhooks.rb#2
module Pay::Webhooks
  class << self
    # source://pay//lib/pay/webhooks.rb#7
    def configure(*_arg0, **_arg1, &_arg2); end

    # source://pay//lib/pay/webhooks.rb#9
    def delegator; end

    # source://pay//lib/pay/webhooks.rb#7
    def instrument(*_arg0, **_arg1, &_arg2); end
  end
end

class Pay::Webhooks::BraintreeController < ::Pay::ApplicationController
  def create; end

  private

  # source://actionview/7.0.6/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end
  def queue_event(event); end
  def verified_event; end

  class << self
    # source://activesupport/7.0.6/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.6/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

# source://pay//lib/pay/webhooks/delegator.rb#3
class Pay::Webhooks::Delegator
  # @return [Delegator] a new instance of Delegator
  #
  # source://pay//lib/pay/webhooks/delegator.rb#6
  def initialize; end

  # Listen to all events
  #
  # source://pay//lib/pay/webhooks/delegator.rb#23
  def all(callable = T.unsafe(nil), &block); end

  # Returns the value of attribute backend.
  #
  # source://pay//lib/pay/webhooks/delegator.rb#4
  def backend; end

  # Configure DSL
  #
  # @raise [ArgumentError]
  #
  # source://pay//lib/pay/webhooks/delegator.rb#11
  def configure(&block); end

  # Called to process an event
  #
  # source://pay//lib/pay/webhooks/delegator.rb#34
  def instrument(event:, type:); end

  # @return [Boolean]
  #
  # source://pay//lib/pay/webhooks/delegator.rb#38
  def listening?(type); end

  # Subscribe to specific events
  #
  # source://pay//lib/pay/webhooks/delegator.rb#17
  def subscribe(name, callable = T.unsafe(nil), &block); end

  # Unsubscribe
  #
  # source://pay//lib/pay/webhooks/delegator.rb#29
  def unsubscribe(name); end

  private

  # source://pay//lib/pay/webhooks/delegator.rb#60
  def name_with_namespace(name, delimiter: T.unsafe(nil)); end

  # source://pay//lib/pay/webhooks/delegator.rb#56
  def to_regexp(name); end
end

# Strips down to event data only
#
# source://pay//lib/pay/webhooks/delegator.rb#43
class Pay::Webhooks::Delegator::NotificationAdapter
  # @return [NotificationAdapter] a new instance of NotificationAdapter
  #
  # source://pay//lib/pay/webhooks/delegator.rb#44
  def initialize(subscriber); end

  # source://pay//lib/pay/webhooks/delegator.rb#48
  def call(*args); end
end

class Pay::Webhooks::PaddleController < ::Pay::ApplicationController
  def create; end

  private

  # source://actionview/7.0.6/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end
  def queue_event(event); end
  def verified_event; end
  def verify_params; end

  class << self
    # source://activesupport/7.0.6/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.6/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

# source://pay//lib/pay/webhooks/process_job.rb#3
class Pay::Webhooks::ProcessJob < ::Pay::ApplicationJob
  # source://pay//lib/pay/webhooks/process_job.rb#4
  def perform(pay_webhook); end
end

class Pay::Webhooks::StripeController < ::Pay::ApplicationController
  def create; end

  private

  # source://actionview/7.0.6/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end
  def log_error(e); end
  def queue_event(event); end
  def secrets(payload, signature); end
  def verified_event; end

  class << self
    # source://activesupport/7.0.6/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.6/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end
