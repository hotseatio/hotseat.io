# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mr_loga_loga` gem.
# Please instead update this file by running `bin/tapioca gem mr_loga_loga`.

# ## Description
#
# The MrLogaLoga module provides additional logging functionality when included in your classes.
#
# source://mr_loga_loga//lib/mr_loga_loga/version.rb#3
module MrLogaLoga
  include ::MrLogaLoga::InstanceMethods

  class << self
    # Create a new configuration object
    #
    # @return [Configuration] a new configuration
    #
    # source://mr_loga_loga//lib/mr_loga_loga.rb#28
    def configuration; end

    # @yield [configuration]
    #
    # source://mr_loga_loga//lib/mr_loga_loga.rb#32
    def configure; end

    # @private
    #
    # source://mr_loga_loga//lib/mr_loga_loga.rb#20
    def included(base); end
  end
end

# == Description
#
# The configuration class for MrLogaLoga
#
# == Usage
#
#   MrLogaLoga.configure do |configuration|
#     configuration.logger = ...
#   end
#
# source://mr_loga_loga//lib/mr_loga_loga/configuration.rb#13
class MrLogaLoga::Configuration
  # Initialize the configuration by setting configuration default values
  #
  # @return [Configuration] a new instance of Configuration
  #
  # source://mr_loga_loga//lib/mr_loga_loga/configuration.rb#17
  def initialize(**kwargs); end

  # Returns the value of attribute logger.
  #
  # source://mr_loga_loga//lib/mr_loga_loga/configuration.rb#14
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://mr_loga_loga//lib/mr_loga_loga/configuration.rb#14
  def logger=(_arg0); end

  # Reset the configuration to default values
  #
  # source://mr_loga_loga//lib/mr_loga_loga/configuration.rb#23
  def reset; end
end

# == Description
#
# This class provides a fluent interface to attach contextual information to log messages.
#
# source://mr_loga_loga//lib/mr_loga_loga/context.rb#9
class MrLogaLoga::Context
  # @return [Context] a new instance of Context
  #
  # source://mr_loga_loga//lib/mr_loga_loga/context.rb#10
  def initialize(logger, context = T.unsafe(nil)); end

  # Log a message with the current context
  #
  # @param context [Hash] the new context
  # @return [Context] a new context object
  # @yield the new context
  #
  # source://mr_loga_loga//lib/mr_loga_loga/context.rb#31
  def add(severity, message = T.unsafe(nil), context = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # Add a new context to the log message
  #
  # @param context [Hash] the new context
  # @return [Context] a new context object
  # @yield the new context
  #
  # source://mr_loga_loga//lib/mr_loga_loga/context.rb#20
  def context(context = T.unsafe(nil), &block); end

  # source://mr_loga_loga//lib/mr_loga_loga/context.rb#45
  def debug(message = T.unsafe(nil), context = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # source://mr_loga_loga//lib/mr_loga_loga/context.rb#45
  def error(message = T.unsafe(nil), context = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # source://mr_loga_loga//lib/mr_loga_loga/context.rb#45
  def fatal(message = T.unsafe(nil), context = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # source://mr_loga_loga//lib/mr_loga_loga/context.rb#45
  def info(message = T.unsafe(nil), context = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # Log a message with the current context
  #
  # @param context [Hash] the new context
  # @return [Context] a new context object
  # @yield the new context
  #
  # source://mr_loga_loga//lib/mr_loga_loga/context.rb#31
  def log(severity, message = T.unsafe(nil), context = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # source://mr_loga_loga//lib/mr_loga_loga/context.rb#57
  def method_missing(symbol, *args, &block); end

  # source://mr_loga_loga//lib/mr_loga_loga/context.rb#45
  def unknown(message = T.unsafe(nil), context = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # source://mr_loga_loga//lib/mr_loga_loga/context.rb#45
  def warn(message = T.unsafe(nil), context = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  private

  # source://mr_loga_loga//lib/mr_loga_loga/context.rb#85
  def merge_blocks(original, new); end

  # source://mr_loga_loga//lib/mr_loga_loga/context.rb#77
  def merge_context(original, new); end

  # @return [Boolean]
  #
  # source://mr_loga_loga//lib/mr_loga_loga/context.rb#63
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end

  # source://mr_loga_loga//lib/mr_loga_loga/context.rb#69
  def unwrap(args); end
end

# source://mr_loga_loga//lib/mr_loga_loga.rb#18
class MrLogaLoga::Error < ::StandardError; end

# source://mr_loga_loga//lib/mr_loga_loga/formatters/key_value.rb#4
module MrLogaLoga::Formatters; end

# == Description
#
# A simple Json formatter for MrLogaLoga.
#
# == Format
#
# The json formatter renders messages into a single-line json. Context keys are embedded on the top level.
#
# Log Format:
#
#   { "severity": "Severity", .. "message": "Message", "key1": "Key1" }
#
# source://mr_loga_loga//lib/mr_loga_loga/formatters/json.rb#25
class MrLogaLoga::Formatters::Json < ::Logger::Formatter
  # Render a log message in JSON
  #
  # @param severity [String] The message severity
  # @param datetime [DateTime] The message date time
  # @param progname [DateTime] The program name
  # @param message [Object] The log message, which may not be a string
  # @param context [Hash] The log message context
  # @return [String] the formatted log message
  #
  # source://mr_loga_loga//lib/mr_loga_loga/formatters/json.rb#26
  def call(severity, datetime, progname, message, context); end
end

# == Description
#
# A simple key value formatter that extends the standard formatter by rendering additional contextual information.
#
# == Format
#
# The key-value formatter renders messages into the following format:
#
# Log format:
#
#   SeverityID, [DateTime #pid] SeverityLabel -- ProgName: message key1=value1 key2=value2
#
# source://mr_loga_loga//lib/mr_loga_loga/formatters/key_value.rb#26
class MrLogaLoga::Formatters::KeyValue < ::Logger::Formatter
  # Render a log message
  #
  # @param severity [String] The message severity
  # @param datetime [DateTime] The message date time
  # @param progname [DateTime] The program name
  # @param message [String] The log message
  # @param context [Hash] The log message context
  # @return [String] the formatted log message
  #
  # source://mr_loga_loga//lib/mr_loga_loga/formatters/key_value.rb#27
  def call(severity, datetime, progname, message, context = T.unsafe(nil)); end
end

# == Description
#
# Instance methods to be attached when including the main module.
#
# @api private
#
# source://mr_loga_loga//lib/mr_loga_loga/instance_methods.rb#9
module MrLogaLoga::InstanceMethods
  # @api private
  #
  # source://mr_loga_loga//lib/mr_loga_loga/instance_methods.rb#10
  def loga_context; end

  # Define the underlying logger to be used. Overwrite this to use a specific logger instance
  #
  # @api private
  #
  # source://mr_loga_loga//lib/mr_loga_loga/instance_methods.rb#24
  def loga_loga; end

  # A shorthand method to use in your classes
  #
  # @api private
  #
  # source://mr_loga_loga//lib/mr_loga_loga/instance_methods.rb#15
  def logger; end
end

# A structured log message containing the actual message and context
#
# @private
#
# source://mr_loga_loga//lib/mr_loga_loga/log_message.rb#7
class MrLogaLoga::LogMessage < ::Struct
  # Returns the value of attribute context
  #
  # @return [Object] the current value of context
  def context; end

  # Sets the attribute context
  #
  # @param value [Object] the value to set the attribute context to.
  # @return [Object] the newly set value
  def context=(_); end

  # Format the log message. This is a fallback for logger exctending MrLogaLoga who do not know how to format
  # LogMessage themselves.
  #
  # source://mr_loga_loga//lib/mr_loga_loga/log_message.rb#10
  def inspect; end

  # Returns the value of attribute msg
  #
  # @return [Object] the current value of msg
  def msg; end

  # Sets the attribute msg
  #
  # @param value [Object] the value to set the attribute msg to.
  # @return [Object] the newly set value
  def msg=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# == Description
#
# This class extends the default Ruby Logger to allow users to attach contextual information to log messages.
#
# === Example
#
# This creates a Logger that outputs to the standard output stream, with a
# level of +WARN+:
#
#   require 'mr_loga_loga'
#
#   logger = MrLogaLoga::Logger.new(STDOUT)
#   logger.level = Logger::WARN
#
#   logger.debug("Default")
#   logger.context(user: 1).debug('with context')
#
# source://mr_loga_loga//lib/mr_loga_loga/logger.rb#23
class MrLogaLoga::Logger < ::Logger
  # @return [Logger] a new instance of Logger
  #
  # source://mr_loga_loga//lib/mr_loga_loga/logger.rb#26
  def initialize(*args, **kwargs); end

  # Adds a new log message with the given severity
  #
  # source://mr_loga_loga//lib/mr_loga_loga/logger.rb#38
  def add(severity, message = T.unsafe(nil), context = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # Generates a new context
  #
  # source://mr_loga_loga//lib/mr_loga_loga/logger.rb#32
  def context(context = T.unsafe(nil), &block); end

  # source://mr_loga_loga//lib/mr_loga_loga/logger.rb#61
  def debug(message = T.unsafe(nil), context = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # source://mr_loga_loga//lib/mr_loga_loga/logger.rb#61
  def error(message = T.unsafe(nil), context = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # source://mr_loga_loga//lib/mr_loga_loga/logger.rb#61
  def fatal(message = T.unsafe(nil), context = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # source://mr_loga_loga//lib/mr_loga_loga/logger.rb#61
  def info(message = T.unsafe(nil), context = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # Adds a new log message with the given severity
  #
  # source://mr_loga_loga//lib/mr_loga_loga/logger.rb#38
  def log(severity, message = T.unsafe(nil), context = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # @return [Boolean]
  #
  # source://mr_loga_loga//lib/mr_loga_loga/logger.rb#79
  def log?(severity); end

  # source://mr_loga_loga//lib/mr_loga_loga/logger.rb#70
  def method_missing(symbol, *args, &block); end

  # source://logger/1.5.0/logger.rb#459
  def super_add(severity, message = T.unsafe(nil), progname = T.unsafe(nil)); end

  # source://mr_loga_loga//lib/mr_loga_loga/logger.rb#61
  def unknown(message = T.unsafe(nil), context = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # source://mr_loga_loga//lib/mr_loga_loga/logger.rb#61
  def warn(message = T.unsafe(nil), context = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # Write the actual log data
  #
  # This method needs to be used rather than add as various gems (Rails, Sidekiq) patch loggers to overwrite add. The
  # patches' signatures do not match our add method, so we use this method to do the actual logging in helper methods
  # like debug, info etc.
  #
  # source://mr_loga_loga//lib/mr_loga_loga/logger.rb#48
  def write(severity, *args, &block); end

  private

  # source://mr_loga_loga//lib/mr_loga_loga/logger.rb#93
  def format_message(severity, datetime, progname, message); end

  # @return [Boolean]
  #
  # source://mr_loga_loga//lib/mr_loga_loga/logger.rb#75
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end

  # source://mr_loga_loga//lib/mr_loga_loga/logger.rb#85
  def unwrap(args); end
end

# == Description
#
# This class separates message and contextual data from args
#
# source://mr_loga_loga//lib/mr_loga_loga/logger_data.rb#9
class MrLogaLoga::LoggerData
  class << self
    # source://mr_loga_loga//lib/mr_loga_loga/logger_data.rb#11
    def build(*args, &block); end

    private

    # source://mr_loga_loga//lib/mr_loga_loga/logger_data.rb#25
    def as_hash(data); end
  end
end

# source://mr_loga_loga//lib/mr_loga_loga/version.rb#4
MrLogaLoga::VERSION = T.let(T.unsafe(nil), String)
