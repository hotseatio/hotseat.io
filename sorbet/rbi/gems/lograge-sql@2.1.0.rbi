# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `lograge-sql` gem.
# Please instead update this file by running `bin/tapioca gem lograge-sql`.

# Main Lograge module
#
# source://lograge-sql//lib/lograge/sql/version.rb#3
module Lograge
  # source://lograge/0.12.0/lib/lograge.rb#27
  def application; end

  # source://lograge/0.12.0/lib/lograge.rb#27
  def application=(val); end

  # source://lograge/0.12.0/lib/lograge.rb#49
  def before_format=(val); end

  # source://lograge/0.12.0/lib/lograge.rb#35
  def custom_options=(val); end

  # source://lograge/0.12.0/lib/lograge.rb#106
  def formatter; end

  # source://lograge/0.12.0/lib/lograge.rb#106
  def formatter=(val); end

  # source://lograge/0.12.0/lib/lograge.rb#27
  def ignore_tests=(val); end

  # source://lograge/0.12.0/lib/lograge.rb#98
  def log_level; end

  # source://lograge/0.12.0/lib/lograge.rb#98
  def log_level=(val); end

  # source://lograge/0.12.0/lib/lograge.rb#27
  def logger; end

  # source://lograge/0.12.0/lib/lograge.rb#27
  def logger=(val); end

  private

  # source://lograge/0.12.0/lib/lograge.rb#156
  def attach_to_action_cable; end

  # source://lograge/0.12.0/lib/lograge.rb#152
  def attach_to_action_controller; end

  # source://lograge/0.12.0/lib/lograge.rb#52
  def before_format(data, payload); end

  # source://lograge/0.12.0/lib/lograge.rb#77
  def controller_field(params); end

  # source://lograge/0.12.0/lib/lograge.rb#38
  def custom_options(event); end

  # source://lograge/0.12.0/lib/lograge.rb#192
  def disable_rack_cache_verbose_output; end

  # source://lograge/0.12.0/lib/lograge.rb#175
  def extend_base_class(klass); end

  # source://lograge/0.12.0/lib/lograge.rb#85
  def ignore(test); end

  # source://lograge/0.12.0/lib/lograge.rb#93
  def ignore?(event); end

  # source://lograge/0.12.0/lib/lograge.rb#70
  def ignore_actions(actions); end

  # source://lograge/0.12.0/lib/lograge.rb#89
  def ignore_nothing; end

  # source://lograge/0.12.0/lib/lograge.rb#81
  def ignore_tests; end

  # source://lograge/0.12.0/lib/lograge.rb#196
  def keep_original_rails_log; end

  # source://lograge/0.12.0/lib/lograge.rb#223
  def lograge_config; end

  # source://lograge/0.12.0/lib/lograge.rb#206
  def rack_cache_hashlike?(app); end

  # source://lograge/0.12.0/lib/lograge.rb#108
  def remove_existing_log_subscriptions; end

  # source://lograge/0.12.0/lib/lograge.rb#148
  def set_formatter; end

  # source://lograge/0.12.0/lib/lograge.rb#143
  def set_ignores; end

  # source://lograge/0.12.0/lib/lograge.rb#185
  def set_lograge_log_options; end

  # source://lograge/0.12.0/lib/lograge.rb#128
  def setup(app); end

  # source://lograge/0.12.0/lib/lograge.rb#163
  def setup_custom_payload; end

  # source://lograge/0.12.0/lib/lograge.rb#213
  def support_deprecated_config; end

  # source://lograge/0.12.0/lib/lograge.rb#119
  def unsubscribe(component, subscriber); end

  class << self
    # source://lograge/0.12.0/lib/lograge.rb#27
    def application; end

    # source://lograge/0.12.0/lib/lograge.rb#27
    def application=(val); end

    # source://lograge/0.12.0/lib/lograge.rb#156
    def attach_to_action_cable; end

    # source://lograge/0.12.0/lib/lograge.rb#152
    def attach_to_action_controller; end

    # source://lograge/0.12.0/lib/lograge.rb#52
    def before_format(data, payload); end

    # source://lograge/0.12.0/lib/lograge.rb#49
    def before_format=(val); end

    # source://lograge/0.12.0/lib/lograge.rb#77
    def controller_field(params); end

    # source://lograge/0.12.0/lib/lograge.rb#38
    def custom_options(event); end

    # source://lograge/0.12.0/lib/lograge.rb#35
    def custom_options=(val); end

    # source://lograge/0.12.0/lib/lograge.rb#192
    def disable_rack_cache_verbose_output; end

    # source://lograge/0.12.0/lib/lograge.rb#175
    def extend_base_class(klass); end

    # source://lograge/0.12.0/lib/lograge.rb#106
    def formatter; end

    # source://lograge/0.12.0/lib/lograge.rb#106
    def formatter=(val); end

    # source://lograge/0.12.0/lib/lograge.rb#85
    def ignore(test); end

    # source://lograge/0.12.0/lib/lograge.rb#93
    def ignore?(event); end

    # source://lograge/0.12.0/lib/lograge.rb#70
    def ignore_actions(actions); end

    # source://lograge/0.12.0/lib/lograge.rb#89
    def ignore_nothing; end

    # source://lograge/0.12.0/lib/lograge.rb#81
    def ignore_tests; end

    # source://lograge/0.12.0/lib/lograge.rb#27
    def ignore_tests=(val); end

    # source://lograge/0.12.0/lib/lograge.rb#196
    def keep_original_rails_log; end

    # source://lograge/0.12.0/lib/lograge.rb#98
    def log_level; end

    # source://lograge/0.12.0/lib/lograge.rb#98
    def log_level=(val); end

    # source://lograge/0.12.0/lib/lograge.rb#27
    def logger; end

    # source://lograge/0.12.0/lib/lograge.rb#27
    def logger=(val); end

    # source://lograge/0.12.0/lib/lograge.rb#223
    def lograge_config; end

    # source://lograge/0.12.0/lib/lograge.rb#108
    def remove_existing_log_subscriptions; end

    # source://lograge/0.12.0/lib/lograge.rb#148
    def set_formatter; end

    # source://lograge/0.12.0/lib/lograge.rb#143
    def set_ignores; end

    # source://lograge/0.12.0/lib/lograge.rb#185
    def set_lograge_log_options; end

    # source://lograge/0.12.0/lib/lograge.rb#128
    def setup(app); end

    # source://lograge/0.12.0/lib/lograge.rb#163
    def setup_custom_payload; end

    # source://lograge/0.12.0/lib/lograge.rb#213
    def support_deprecated_config; end

    # source://lograge/0.12.0/lib/lograge.rb#119
    def unsubscribe(component, subscriber); end

    private

    # source://lograge/0.12.0/lib/lograge.rb#206
    def rack_cache_hashlike?(app); end
  end
end

# Main gem module
#
# source://lograge-sql//lib/lograge/sql/version.rb#4
module Lograge::Sql
  class << self
    # Extract information from SQL event
    #
    # source://lograge-sql//lib/lograge/sql.rb#13
    def extract_event; end

    # Extract information from SQL event
    #
    # source://lograge-sql//lib/lograge/sql.rb#13
    def extract_event=(_arg0); end

    # Format SQL log
    #
    # source://lograge-sql//lib/lograge/sql.rb#11
    def formatter; end

    # Format SQL log
    #
    # source://lograge-sql//lib/lograge/sql.rb#11
    def formatter=(_arg0); end

    # Filter SQL events by duration
    #
    # source://lograge-sql//lib/lograge/sql.rb#15
    def min_duration_ms; end

    # Filter SQL events by duration
    #
    # source://lograge-sql//lib/lograge/sql.rb#15
    def min_duration_ms=(_arg0); end

    # Initialise configuration with fallback to default values
    #
    # source://lograge-sql//lib/lograge/sql.rb#18
    def setup(config); end

    # Gets the store, preferring RequestStore if the gem is found.
    #
    # @return [Hash, Thread] the RequestStore or the current Thread.
    #
    # source://lograge-sql//lib/lograge/sql.rb#33
    def store; end

    private

    # By default, only extract values required for the default_formatter and
    # already convert to a string
    #
    # source://lograge-sql//lib/lograge/sql.rb#48
    def default_extract_event; end

    # By default, the output is a concatenated string of all extracted events
    #
    # source://lograge-sql//lib/lograge/sql.rb#40
    def default_formatter; end

    # source://lograge-sql//lib/lograge/sql.rb#54
    def unsubscribe_log_subscribers; end
  end
end

# Railtie to automatically setup in Rails
#
# source://lograge-sql//lib/lograge/sql/railtie.rb#10
class Lograge::Sql::Railtie < ::Rails::Railtie; end

# Gem version
#
# source://lograge-sql//lib/lograge/sql/version.rb#6
Lograge::Sql::VERSION = T.let(T.unsafe(nil), String)
