# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `simplecov-cobertura` gem.
# Please instead update this file by running `bin/tapioca gem simplecov-cobertura`.

# Code coverage for ruby. Please check out README for a full introduction.
#
# source://simplecov-cobertura-2.1.0/lib/simplecov-cobertura/version.rb:1
module SimpleCov
  class << self
    # source://simplecov-0.21.2/lib/simplecov.rb:174
    def at_exit_behavior; end

    # Clear out the previously cached .result. Primarily useful in testing
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:170
    def clear_result; end

    # Collate a series of SimpleCov result files into a single SimpleCov output.
    #
    # You can optionally specify configuration with a block:
    #   SimpleCov.collate Dir["simplecov-resultset-*/.resultset.json"]
    #    OR
    #   SimpleCov.collate Dir["simplecov-resultset-*/.resultset.json"], 'rails' # using rails profile
    #    OR
    #   SimpleCov.collate Dir["simplecov-resultset-*/.resultset.json"] do
    #     add_filter 'test'
    #   end
    #    OR
    #   SimpleCov.collate Dir["simplecov-resultset-*/.resultset.json"], 'rails' do
    #     add_filter 'test'
    #   end
    #
    # Please check out the RDoc for SimpleCov::Configuration to find about
    # available config options, or checkout the README for more in-depth
    # information about coverage collation
    #
    # By default `collate` ignores the merge_timeout so all results of all files specified will be
    # merged together. If you want to honor the merge_timeout then provide the keyword argument
    # `ignore_timeout: false`.
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:86
    def collate(result_filenames, profile = T.unsafe(nil), ignore_timeout: T.unsafe(nil), &block); end

    # Thinking: Move this behavior earlier so if there was an error we do nothing?
    #
    # @api private
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:223
    def exit_and_report_previous_error(exit_status); end

    # Returns the exit status from the exit exception
    #
    # @api private
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:200
    def exit_status_from_exception; end

    # Basically, should we take care of at_exit behavior or something else?
    # Used by the minitest plugin. See lib/minitest/simplecov_plugin.rb
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:28
    def external_at_exit; end

    # Basically, should we take care of at_exit behavior or something else?
    # Used by the minitest plugin. See lib/minitest/simplecov_plugin.rb
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:28
    def external_at_exit=(_arg0); end

    # Basically, should we take care of at_exit behavior or something else?
    # Used by the minitest plugin. See lib/minitest/simplecov_plugin.rb
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:28
    def external_at_exit?; end

    # Applies the configured filters to the given array of SimpleCov::SourceFile items
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:131
    def filtered(files); end

    # @api private
    # @return [Boolean]
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:268
    def final_result_process?; end

    # Applies the configured groups to the given array of SimpleCov::SourceFile items
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:142
    def grouped(files); end

    # source://simplecov-0.21.2/lib/simplecov.rb:162
    def load_adapter(name); end

    # Applies the profile of given name on SimpleCov configuration
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:158
    def load_profile(name); end

    # Returns the value of attribute pid.
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:24
    def pid; end

    # Sets the attribute pid
    #
    # @param value the value to set the attribute pid to.
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:24
    def pid=(_arg0); end

    # @api private
    # @return [Boolean]
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:213
    def previous_error?(error_exit_status); end

    # Usage:
    #   exit_status = SimpleCov.process_result(SimpleCov.result, exit_status)
    #
    # @api private
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:248
    def process_result(result); end

    # source://simplecov-0.21.2/lib/simplecov.rb:233
    def process_results_and_report_error; end

    # @api private
    # @return [Boolean]
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:229
    def ready_to_process_results?; end

    # Returns the result for the current coverage run, merging it across test suites
    # from cache using SimpleCov::ResultMerger if use_merging is activated (default)
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:101
    def result; end

    # Returns nil if the result has not been computed
    # Otherwise, returns the result
    #
    # @return [Boolean]
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:124
    def result?; end

    # source://simplecov-0.21.2/lib/simplecov.rb:256
    def result_exit_status(result); end

    # Rounding down to be extra strict, see #679
    #
    # @api private
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:296
    def round_coverage(coverage); end

    # Called from at_exit block
    #
    # @api private
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:186
    def run_exit_tasks!; end

    # Returns the value of attribute running.
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:24
    def running; end

    # Sets the attribute running
    #
    # @param value the value to set the attribute running to.
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:24
    def running=(_arg0); end

    # Sets up SimpleCov to run against your project.
    # You can optionally specify a profile to use as well as configuration with a block:
    #   SimpleCov.start
    #    OR
    #   SimpleCov.start 'rails' # using rails profile
    #    OR
    #   SimpleCov.start do
    #     add_filter 'test'
    #   end
    #     OR
    #   SimpleCov.start 'rails' do
    #     add_filter 'test'
    #   end
    #
    # Please check out the RDoc for SimpleCov::Configuration to find about available config options
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:48
    def start(profile = T.unsafe(nil), &block); end

    # @api private
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:276
    def wait_for_other_processes; end

    # @api private
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:285
    def write_last_run(result); end

    private

    # Unite the result so it wouldn't matter what coverage type was called
    #
    # @return [Hash]
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:397
    def adapt_coverage_result; end

    # Finds files that were to be tracked but were not loaded and initializes
    # the line-by-line coverage to zero (if relevant) or nil (comments / whitespace etc).
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:369
    def add_not_loaded_files(result); end

    # source://simplecov-0.21.2/lib/simplecov.rb:302
    def initial_setup(profile, &block); end

    # source://simplecov-0.21.2/lib/simplecov.rb:361
    def lookup_corresponding_ruby_coverage_name(criterion); end

    # parallel_tests isn't always available, see: https://github.com/grosser/parallel_tests/issues/772
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:423
    def make_parallel_tests_available; end

    # @return [Boolean]
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:432
    def probably_running_parallel_tests?; end

    # Call steps that handle process coverage result
    #
    # @return [Hash]
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:386
    def process_coverage_result; end

    # Filter coverage result
    # The result before filter also has result of coverage for files
    # are not related to the project like loaded gems coverage.
    #
    # @return [Hash]
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:408
    def remove_useless_results; end

    # Initialize result with files that are not included by coverage
    # and added inside the config block
    #
    # @return [Hash]
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:418
    def result_with_not_loaded_files; end

    # Trigger Coverage.start depends on given config coverage_criterion
    #
    # With Positive branch it supports all coverage measurement types
    # With Negative branch it supports only line coverage measurement type
    #
    # source://simplecov-0.21.2/lib/simplecov.rb:314
    def start_coverage_measurement; end

    # source://simplecov-0.21.2/lib/simplecov.rb:349
    def start_coverage_with_criteria; end
  end
end

# TODO: Documentation on how to build your own formatters
#
# source://simplecov-cobertura-2.1.0/lib/simplecov-cobertura/version.rb:2
module SimpleCov::Formatter
  class << self
    # source://simplecov-0.21.2/lib/simplecov/default_formatter.rb:7
    def from_env(env); end
  end
end

# source://simplecov-cobertura-2.1.0/lib/simplecov-cobertura/version.rb:3
class SimpleCov::Formatter::CoberturaFormatter
  # @return [CoberturaFormatter] a new instance of CoberturaFormatter
  #
  # source://simplecov-cobertura-2.1.0/lib/simplecov-cobertura.rb:15
  def initialize(result_file_name: T.unsafe(nil)); end

  # source://simplecov-cobertura-2.1.0/lib/simplecov-cobertura.rb:19
  def format(result); end

  private

  # source://simplecov-cobertura-2.1.0/lib/simplecov-cobertura.rb:151
  def coverage_output(result); end

  # source://simplecov-cobertura-2.1.0/lib/simplecov-cobertura.rb:166
  def extract_rate(percent); end

  # source://simplecov-cobertura-2.1.0/lib/simplecov-cobertura.rb:170
  def project_root; end

  # source://simplecov-cobertura-2.1.0/lib/simplecov-cobertura.rb:162
  def resolve_filename(filename); end

  # source://simplecov-cobertura-2.1.0/lib/simplecov-cobertura.rb:36
  def result_to_xml(result); end

  # source://simplecov-cobertura-2.1.0/lib/simplecov-cobertura.rb:134
  def set_branch_attributes(line, file_line, branched_lines, branched_lines_covered); end

  # source://simplecov-cobertura-2.1.0/lib/simplecov-cobertura.rb:115
  def set_class_attributes(class_, file); end

  # source://simplecov-cobertura-2.1.0/lib/simplecov-cobertura.rb:86
  def set_coverage_attributes(coverage, result); end

  # source://simplecov-cobertura-2.1.0/lib/simplecov-cobertura.rb:129
  def set_line_attributes(line, file_line); end

  # source://simplecov-cobertura-2.1.0/lib/simplecov-cobertura.rb:103
  def set_package_attributes(package, name, result); end

  # source://simplecov-cobertura-2.1.0/lib/simplecov-cobertura.rb:144
  def set_xml_head(lines = T.unsafe(nil)); end
end

# source://simplecov-cobertura-2.1.0/lib/simplecov-cobertura.rb:13
SimpleCov::Formatter::CoberturaFormatter::DTD_URL = T.let(T.unsafe(nil), String)

# source://simplecov-cobertura-2.1.0/lib/simplecov-cobertura.rb:12
SimpleCov::Formatter::CoberturaFormatter::RESULT_FILE_NAME = T.let(T.unsafe(nil), String)

# source://simplecov-cobertura-2.1.0/lib/simplecov-cobertura/version.rb:4
SimpleCov::Formatter::CoberturaFormatter::VERSION = T.let(T.unsafe(nil), String)

# source://simplecov-0.21.2/lib/simplecov/version.rb:4
SimpleCov::VERSION = T.let(T.unsafe(nil), String)
