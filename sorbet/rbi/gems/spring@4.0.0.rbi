# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `spring` gem.
# Please instead update this file by running `bin/tapioca gem spring`.

# Some parts adapted from
# https://golang.org/src/pkg/json/decode.go and
# https://golang.org/src/pkg/utf8/utf8.go
module Spring
  class << self
    def after_fork(&block); end
    def after_fork_callbacks; end

    # Returns the value of attribute application_root.
    def application_root; end

    # Sets the attribute application_root
    #
    # @param value the value to set the attribute application_root to.
    def application_root=(_arg0); end

    def application_root_path; end
    def command(name); end

    # @return [Boolean]
    def command?(name); end

    # Returns the value of attribute commands.
    def commands; end

    def gemfile; end
    def gemfile_lock; end
    def project_root_path; end

    # Returns the value of attribute quiet.
    def quiet; end

    # Sets the attribute quiet
    #
    # @param value the value to set the attribute quiet to.
    def quiet=(_arg0); end

    def register_command(name, command = T.unsafe(nil)); end
    def verify_environment; end
    def watch(*items); end

    # Returns the value of attribute watch_interval.
    def watch_interval; end

    # Sets the attribute watch_interval
    #
    # @param value the value to set the attribute watch_interval to.
    def watch_interval=(_arg0); end

    # Returns the value of attribute watch_method.
    def watch_method; end

    def watch_method=(method); end
    def watcher; end

    # Sets the attribute watcher
    #
    # @param value the value to set the attribute watcher to.
    def watcher=(_arg0); end

    private

    def find_project_root(current_dir); end
  end
end

class Spring::ClientError < ::StandardError; end
class Spring::CommandNotFound < ::Spring::ClientError; end

class Spring::CommandWrapper
  # @return [CommandWrapper] a new instance of CommandWrapper
  def initialize(name, command = T.unsafe(nil)); end

  def binstub; end
  def binstub_name; end
  def call; end

  # Returns the value of attribute command.
  def command; end

  def description; end
  def env(args); end
  def exec; end
  def exec_name; end
  def gem_name; end

  # Returns the value of attribute name.
  def name; end

  def setup; end

  # @return [Boolean]
  def setup?; end
end

module Spring::Commands; end

class Spring::Commands::Rails
  def call; end
  def description; end
end

class Spring::Commands::RailsConsole < ::Spring::Commands::Rails
  def command_name; end
  def env(args); end
end

class Spring::Commands::RailsDestroy < ::Spring::Commands::Rails
  def command_name; end
end

class Spring::Commands::RailsGenerate < ::Spring::Commands::Rails
  def command_name; end
end

class Spring::Commands::RailsRunner < ::Spring::Commands::Rails
  def call; end
  def command_name; end
  def env(args); end
  def extract_environment(args); end
end

class Spring::Commands::RailsTest < ::Spring::Commands::Rails
  def command_name; end
  def env(args); end
end

class Spring::Commands::Rake
  def env(args); end

  class << self
    # Returns the value of attribute environment_matchers.
    def environment_matchers; end

    # Sets the attribute environment_matchers
    #
    # @param value the value to set the attribute environment_matchers to.
    def environment_matchers=(_arg0); end
  end
end

class Spring::MissingApplication < ::Spring::ClientError
  # @return [MissingApplication] a new instance of MissingApplication
  def initialize(project_root); end

  def message; end

  # Returns the value of attribute project_root.
  def project_root; end
end

class Spring::UnknownProject < ::StandardError
  # @return [UnknownProject] a new instance of UnknownProject
  def initialize(current_dir); end

  # Returns the value of attribute current_dir.
  def current_dir; end

  def message; end
end

module Spring::Watcher; end

# A user of a watcher can use IO.select to wait for changes:
#
#   watcher = MyWatcher.new(root, latency)
#   IO.select([watcher]) # watcher is running in background
#   watcher.stale? # => true
class Spring::Watcher::Abstract
  include ::Mutex_m

  # @return [Abstract] a new instance of Abstract
  def initialize(root, latency); end

  def add(*items); end
  def debug; end

  # Returns the value of attribute directories.
  def directories; end

  # Returns the value of attribute files.
  def files; end

  # Returns the value of attribute latency.
  def latency; end

  def lock; end
  def locked?; end
  def mark_stale; end
  def on_debug(&block); end
  def on_stale(&block); end
  def restart; end

  # Returns the value of attribute root.
  def root; end

  # @return [Boolean]
  def stale?; end

  # @raise [NotImplementedError]
  def start; end

  # @raise [NotImplementedError]
  def stop; end

  # @raise [NotImplementedError]
  def subjects_changed; end

  def synchronize(&block); end
  def try_lock; end
  def unlock; end
end

class Spring::Watcher::Polling < ::Spring::Watcher::Abstract
  # @return [Polling] a new instance of Polling
  def initialize(root, latency); end

  def add(*_arg0); end
  def check_stale; end

  # Returns the value of attribute mtime.
  def mtime; end

  # @return [Boolean]
  def running?; end

  def start; end
  def stop; end
  def subjects_changed; end

  private

  def compute_mtime; end
  def expanded_files; end
end
