# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `noticed` gem.
# Please instead update this file by running `bin/tapioca gem noticed`.

# source://noticed//lib/noticed/version.rb#1
module Noticed
  include ::ActiveSupport::Deprecation::DeprecatedConstantAccessor

  # source://noticed//lib/noticed.rb#42
  def parent_class; end

  # source://noticed//lib/noticed.rb#42
  def parent_class=(val); end

  class << self
    # source://noticed//lib/noticed.rb#7
    def deprecator; end

    # source://noticed//lib/noticed.rb#42
    def parent_class; end

    # source://noticed//lib/noticed.rb#42
    def parent_class=(val); end

    # source://railties/7.0.8/lib/rails/engine.rb#405
    def railtie_helpers_paths; end

    # source://railties/7.0.8/lib/rails/engine.rb#394
    def railtie_namespace; end

    # source://railties/7.0.8/lib/rails/engine.rb#409
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://railties/7.0.8/lib/rails/engine.rb#397
    def table_name_prefix; end

    # source://railties/7.0.8/lib/rails/engine.rb#401
    def use_relative_model_naming?; end
  end
end

# source://noticed//lib/noticed/api_client.rb#4
module Noticed::ApiClient
  extend ::ActiveSupport::Concern

  # Helper method for making POST requests from delivery methods
  #
  # Usage:
  #   post_request("http://example.com", basic_auth: {user:, pass:}, headers: {}, json: {}, form: {})
  #
  # @raise [ResponseUnsuccessful]
  #
  # source://noticed//lib/noticed/api_client.rb#12
  def post_request(url, args = T.unsafe(nil)); end
end

class Noticed::ApplicationJob < ::ActiveJob::Base
  class << self
    # source://activesupport/7.0.8/lib/active_support/rescuable.rb#13
    def rescue_handlers; end
  end
end

class Noticed::ApplicationRecord < ::ActiveRecord::Base
  include ::Noticed::ApplicationRecord::GeneratedAttributeMethods
  include ::Noticed::ApplicationRecord::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  extend ::Kaminari::ConfigurationMethods::ClassMethods

  class << self
    # source://activemodel/7.0.8/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/7.0.8/lib/active_record/enum.rb#116
    def defined_enums; end

    # source://kaminari-activerecord/1.2.2/lib/kaminari/activerecord/active_record_model_extension.rb#15
    def page(num = T.unsafe(nil)); end

    # source://activerecord/7.0.8/lib/active_record/model_schema.rb#152
    def table_name_prefix; end
  end
end

module Noticed::ApplicationRecord::GeneratedAssociationMethods; end
module Noticed::ApplicationRecord::GeneratedAttributeMethods; end

# source://noticed//lib/noticed/bulk_delivery_method.rb#2
class Noticed::BulkDeliveryMethod < ::Noticed::ApplicationJob
  include ::Noticed::ApiClient
  include ::Noticed::RequiredOptions
  extend ::Noticed::RequiredOptions::ClassMethods

  # Returns the value of attribute config.
  #
  # source://noticed//lib/noticed/bulk_delivery_method.rb#8
  def config; end

  # @raise [NotImplementedError]
  #
  # source://noticed//lib/noticed/bulk_delivery_method.rb#20
  def deliver; end

  # source://noticed//lib/noticed/bulk_delivery_method.rb#29
  def evaluate_option(name); end

  # Returns the value of attribute event.
  #
  # source://noticed//lib/noticed/bulk_delivery_method.rb#8
  def event; end

  # source://noticed//lib/noticed/bulk_delivery_method.rb#24
  def fetch_constant(name); end

  # source://noticed//lib/noticed/bulk_delivery_method.rb#6
  def logger; end

  # source://noticed//lib/noticed/bulk_delivery_method.rb#6
  def logger=(_arg0); end

  # source://noticed//lib/noticed/bulk_delivery_method.rb#6
  def logger?; end

  # source://noticed//lib/noticed/bulk_delivery_method.rb#10
  def perform(delivery_method_name, event); end

  # source://noticed//lib/noticed/required_options.rb#6
  def required_option_names; end

  # source://noticed//lib/noticed/required_options.rb#6
  def required_option_names?; end

  class << self
    # source://noticed//lib/noticed/bulk_delivery_method.rb#6
    def logger; end

    # source://noticed//lib/noticed/bulk_delivery_method.rb#6
    def logger=(value); end

    # source://noticed//lib/noticed/bulk_delivery_method.rb#6
    def logger?; end

    # source://noticed//lib/noticed/required_options.rb#6
    def required_option_names; end

    # source://noticed//lib/noticed/required_options.rb#6
    def required_option_names=(value); end

    # source://noticed//lib/noticed/required_options.rb#6
    def required_option_names?; end
  end
end

# source://noticed//lib/noticed.rb#20
module Noticed::BulkDeliveryMethods; end

# source://noticed//lib/noticed/bulk_delivery_methods/discord.rb#3
class Noticed::BulkDeliveryMethods::Discord < ::Noticed::BulkDeliveryMethod
  # source://noticed//lib/noticed/bulk_delivery_methods/discord.rb#6
  def deliver; end

  class << self
    # source://noticed//lib/noticed/required_options.rb#6
    def required_option_names; end
  end
end

# source://noticed//lib/noticed/bulk_delivery_methods/slack.rb#3
class Noticed::BulkDeliveryMethods::Slack < ::Noticed::BulkDeliveryMethod
  # source://noticed//lib/noticed/bulk_delivery_methods/slack.rb#8
  def deliver; end

  # source://noticed//lib/noticed/bulk_delivery_methods/slack.rb#12
  def url; end

  class << self
    # source://noticed//lib/noticed/required_options.rb#6
    def required_option_names; end
  end
end

# source://noticed//lib/noticed/bulk_delivery_methods/slack.rb#4
Noticed::BulkDeliveryMethods::Slack::DEFAULT_URL = T.let(T.unsafe(nil), String)

# source://noticed//lib/noticed/bulk_delivery_methods/webhook.rb#3
class Noticed::BulkDeliveryMethods::Webhook < ::Noticed::BulkDeliveryMethod
  # source://noticed//lib/noticed/bulk_delivery_methods/webhook.rb#6
  def deliver; end

  class << self
    # source://noticed//lib/noticed/required_options.rb#6
    def required_option_names; end
  end
end

# source://noticed//lib/noticed/coder.rb#4
class Noticed::Coder
  class << self
    # source://noticed//lib/noticed/coder.rb#12
    def dump(data); end

    # source://noticed//lib/noticed/coder.rb#5
    def load(data); end
  end
end

module Noticed::Deliverable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Noticed::Deliverable::ClassMethods

  def deliver(recipients = T.unsafe(nil), options = T.unsafe(nil)); end
  def recipient_attributes_for(recipient); end
  def validate!; end
  def validate_delivery_methods!; end
  def validate_params!; end

  module GeneratedClassMethods
    def bulk_delivery_methods; end
    def bulk_delivery_methods=(value); end
    def bulk_delivery_methods?; end
    def delivery_methods; end
    def delivery_methods=(value); end
    def delivery_methods?; end
    def required_param_names; end
    def required_param_names=(value); end
    def required_param_names?; end
  end

  module GeneratedInstanceMethods
    def bulk_delivery_methods; end
    def bulk_delivery_methods?; end
    def delivery_methods; end
    def delivery_methods?; end
    def required_param_names; end
    def required_param_names?; end
  end
end

module Noticed::Deliverable::ClassMethods
  def bulk_deliver_by(name, options = T.unsafe(nil)); end
  def deliver(recipients = T.unsafe(nil), options = T.unsafe(nil)); end
  def deliver_by(name, options = T.unsafe(nil)); end
  def inherited(base); end
  def required_param(*names); end
  def required_params(*names); end
  def with(params); end
end

class Noticed::Deliverable::DeliverBy
  def initialize(name, config, bulk: T.unsafe(nil)); end

  def bulk; end
  def config; end
  def constant; end
  def evaluate_option(name, context); end
  def name; end
  def perform_later(event_or_notification, options = T.unsafe(nil)); end
  def validate!; end
end

# source://noticed//lib/noticed/delivery_method.rb#2
class Noticed::DeliveryMethod < ::Noticed::ApplicationJob
  include ::Noticed::ApiClient
  include ::Noticed::RequiredOptions
  extend ::Noticed::RequiredOptions::ClassMethods
  extend ::ActiveModel::Callbacks

  # source://activesupport/7.0.8/lib/active_support/callbacks.rb#940
  def _deliver_callbacks; end

  # source://activesupport/7.0.8/lib/active_support/callbacks.rb#928
  def _run_deliver_callbacks(&block); end

  # Returns the value of attribute config.
  #
  # source://noticed//lib/noticed/delivery_method.rb#11
  def config; end

  # @raise [NotImplementedError]
  #
  # source://noticed//lib/noticed/delivery_method.rb#30
  def deliver; end

  # source://noticed//lib/noticed/delivery_method.rb#39
  def evaluate_option(name); end

  # Returns the value of attribute event.
  #
  # source://noticed//lib/noticed/delivery_method.rb#11
  def event; end

  # source://noticed//lib/noticed/delivery_method.rb#34
  def fetch_constant(name); end

  # source://noticed//lib/noticed/delivery_method.rb#9
  def logger; end

  # source://noticed//lib/noticed/delivery_method.rb#9
  def logger=(_arg0); end

  # source://noticed//lib/noticed/delivery_method.rb#9
  def logger?; end

  # Returns the value of attribute notification.
  #
  # source://noticed//lib/noticed/delivery_method.rb#11
  def notification; end

  # source://noticed//lib/noticed/delivery_method.rb#13
  def params(*_arg0, **_arg1, &_arg2); end

  # source://noticed//lib/noticed/delivery_method.rb#15
  def perform(delivery_method_name, notification, overrides: T.unsafe(nil)); end

  # source://noticed//lib/noticed/delivery_method.rb#12
  def recipient(*_arg0, **_arg1, &_arg2); end

  # source://noticed//lib/noticed/delivery_method.rb#13
  def record(*_arg0, **_arg1, &_arg2); end

  # source://noticed//lib/noticed/required_options.rb#6
  def required_option_names; end

  # source://noticed//lib/noticed/required_options.rb#6
  def required_option_names?; end

  class << self
    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#932
    def _deliver_callbacks; end

    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#936
    def _deliver_callbacks=(value); end

    # source://activemodel/7.0.8/lib/active_model/callbacks.rb#144
    def after_deliver(*args, **options, &block); end

    # source://activemodel/7.0.8/lib/active_model/callbacks.rb#137
    def around_deliver(*args, **options, &block); end

    # source://activemodel/7.0.8/lib/active_model/callbacks.rb#130
    def before_deliver(*args, **options, &block); end

    # source://noticed//lib/noticed/delivery_method.rb#9
    def logger; end

    # source://noticed//lib/noticed/delivery_method.rb#9
    def logger=(value); end

    # source://noticed//lib/noticed/delivery_method.rb#9
    def logger?; end

    # source://noticed//lib/noticed/required_options.rb#6
    def required_option_names; end

    # source://noticed//lib/noticed/required_options.rb#6
    def required_option_names=(value); end

    # source://noticed//lib/noticed/required_options.rb#6
    def required_option_names?; end
  end
end

# source://noticed//lib/noticed.rb#26
module Noticed::DeliveryMethods
  include ::ActiveSupport::Deprecation::DeprecatedConstantAccessor
end

# source://noticed//lib/noticed/delivery_methods/action_cable.rb#3
class Noticed::DeliveryMethods::ActionCable < ::Noticed::DeliveryMethod
  # source://noticed//lib/noticed/delivery_methods/action_cable.rb#6
  def deliver; end

  class << self
    # source://noticed//lib/noticed/required_options.rb#6
    def required_option_names; end
  end
end

# source://noticed//lib/noticed/delivery_methods/email.rb#3
class Noticed::DeliveryMethods::Email < ::Noticed::DeliveryMethod
  # source://noticed//lib/noticed/delivery_methods/email.rb#6
  def deliver; end

  # source://noticed//lib/noticed/delivery_methods/email.rb#14
  def params; end

  class << self
    # source://noticed//lib/noticed/required_options.rb#6
    def required_option_names; end
  end
end

# source://noticed//lib/noticed/delivery_methods/microsoft_teams.rb#3
class Noticed::DeliveryMethods::MicrosoftTeams < ::Noticed::DeliveryMethod
  # source://noticed//lib/noticed/delivery_methods/microsoft_teams.rb#6
  def deliver; end

  # source://noticed//lib/noticed/delivery_methods/microsoft_teams.rb#10
  def url; end

  class << self
    # source://noticed//lib/noticed/required_options.rb#6
    def required_option_names; end
  end
end

# source://noticed//lib/noticed/delivery_methods/slack.rb#3
class Noticed::DeliveryMethods::Slack < ::Noticed::DeliveryMethod
  # source://noticed//lib/noticed/delivery_methods/slack.rb#8
  def deliver; end

  # source://noticed//lib/noticed/delivery_methods/slack.rb#12
  def url; end

  class << self
    # source://noticed//lib/noticed/required_options.rb#6
    def required_option_names; end
  end
end

# source://noticed//lib/noticed/delivery_methods/slack.rb#4
Noticed::DeliveryMethods::Slack::DEFAULT_URL = T.let(T.unsafe(nil), String)

# source://noticed//lib/noticed/delivery_methods/test.rb#3
class Noticed::DeliveryMethods::Test < ::Noticed::DeliveryMethod
  # source://noticed//lib/noticed/delivery_methods/test.rb#6
  def deliver; end

  # source://noticed//lib/noticed/delivery_methods/test.rb#4
  def delivered; end

  # source://noticed//lib/noticed/delivery_methods/test.rb#4
  def delivered=(_arg0); end

  # source://noticed//lib/noticed/delivery_methods/test.rb#4
  def delivered?; end

  class << self
    # source://noticed//lib/noticed/delivery_methods/test.rb#4
    def delivered; end

    # source://noticed//lib/noticed/delivery_methods/test.rb#4
    def delivered=(value); end

    # source://noticed//lib/noticed/delivery_methods/test.rb#4
    def delivered?; end

    # source://noticed//lib/noticed/required_options.rb#6
    def required_option_names; end
  end
end

# source://noticed//lib/noticed/delivery_methods/twilio_messaging.rb#3
class Noticed::DeliveryMethods::TwilioMessaging < ::Noticed::DeliveryMethod
  # source://noticed//lib/noticed/delivery_methods/twilio_messaging.rb#20
  def account_sid; end

  # source://noticed//lib/noticed/delivery_methods/twilio_messaging.rb#24
  def auth_token; end

  # source://noticed//lib/noticed/delivery_methods/twilio_messaging.rb#32
  def credentials; end

  # source://noticed//lib/noticed/delivery_methods/twilio_messaging.rb#4
  def deliver; end

  # source://noticed//lib/noticed/delivery_methods/twilio_messaging.rb#8
  def json; end

  # source://noticed//lib/noticed/delivery_methods/twilio_messaging.rb#28
  def phone_number; end

  # source://noticed//lib/noticed/delivery_methods/twilio_messaging.rb#16
  def url; end

  class << self
    # source://noticed//lib/noticed/required_options.rb#6
    def required_option_names; end
  end
end

# source://noticed//lib/noticed/delivery_methods/vonage_sms.rb#3
class Noticed::DeliveryMethods::VonageSms < ::Noticed::DeliveryMethod
  # @raise [ResponseUnsuccessful]
  #
  # source://noticed//lib/noticed/delivery_methods/vonage_sms.rb#8
  def deliver; end

  # source://noticed//lib/noticed/delivery_methods/vonage_sms.rb#15
  def url; end

  class << self
    # source://noticed//lib/noticed/required_options.rb#6
    def required_option_names; end
  end
end

# source://noticed//lib/noticed/delivery_methods/vonage_sms.rb#4
Noticed::DeliveryMethods::VonageSms::DEFAULT_URL = T.let(T.unsafe(nil), String)

# source://noticed//lib/noticed/delivery_methods/webhook.rb#3
class Noticed::DeliveryMethods::Webhook < ::Noticed::DeliveryMethod
  # source://noticed//lib/noticed/delivery_methods/webhook.rb#6
  def deliver; end

  class << self
    # source://noticed//lib/noticed/required_options.rb#6
    def required_option_names; end
  end
end

# source://noticed//lib/noticed/engine.rb#2
class Noticed::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
    def __callbacks; end
  end
end

class Noticed::Event < ::Noticed::ApplicationRecord
  include ::Noticed::Event::GeneratedAttributeMethods
  include ::Noticed::Event::GeneratedAssociationMethods
  include ::Noticed::Deliverable
  include ::Noticed::NotificationMethods
  include ::Noticed::Translation
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor
  extend ::Noticed::Deliverable::ClassMethods
  extend ::Noticed::NotificationMethods::ClassMethods

  # source://activerecord/7.0.8/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_notifications(*args); end

  # source://activerecord/7.0.8/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_record(*args); end

  def bulk_delivery_methods; end
  def bulk_delivery_methods?; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options=(_arg0); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options?; end

  def delivery_methods; end
  def delivery_methods?; end
  def required_param_names; end
  def required_param_names?; end

  # source://activerecord/7.0.8/lib/active_record/autosave_association.rb#160
  def validate_associated_records_for_notifications(*args); end

  class << self
    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activerecord/7.0.8/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#564
    def _routes; end

    # source://activemodel/7.0.8/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/7.0.8/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads; end

    def bulk_delivery_methods; end
    def bulk_delivery_methods=(value); end
    def bulk_delivery_methods?; end

    # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options; end

    # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options=(value); end

    # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options?; end

    # source://activerecord/7.0.8/lib/active_record/enum.rb#116
    def defined_enums; end

    def delivery_methods; end
    def delivery_methods=(value); end
    def delivery_methods?; end

    # source://activerecord/7.0.8/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options; end

    # source://activerecord/7.0.8/lib/active_record/scoping/named.rb#174
    def newest_first(*args, **_arg1); end

    def required_param_names; end
    def required_param_names=(value); end
    def required_param_names?; end
  end
end

module Noticed::Event::GeneratedAssociationMethods
  # source://activerecord/7.0.8/lib/active_record/associations/builder/collection_association.rb#62
  def notification_ids; end

  # source://activerecord/7.0.8/lib/active_record/associations/builder/collection_association.rb#72
  def notification_ids=(ids); end

  # source://activerecord/7.0.8/lib/active_record/associations/builder/association.rb#103
  def notifications; end

  # source://activerecord/7.0.8/lib/active_record/associations/builder/association.rb#111
  def notifications=(value); end

  # source://activerecord/7.0.8/lib/active_record/nested_attributes.rb#371
  def notifications_attributes=(attributes); end

  # source://activerecord/7.0.8/lib/active_record/associations/builder/association.rb#103
  def record; end

  # source://activerecord/7.0.8/lib/active_record/associations/builder/association.rb#111
  def record=(value); end

  # source://activerecord/7.0.8/lib/active_record/associations/builder/belongs_to.rb#132
  def record_changed?; end

  # source://activerecord/7.0.8/lib/active_record/associations/builder/belongs_to.rb#136
  def record_previously_changed?; end

  # source://activerecord/7.0.8/lib/active_record/associations/builder/singular_association.rb#19
  def reload_record; end
end

module Noticed::Event::GeneratedAttributeMethods; end

class Noticed::EventJob < ::Noticed::ApplicationJob
  def perform(event); end

  class << self
    # source://activejob/7.0.8/lib/active_job/queue_name.rb#55
    def queue_name; end
  end
end

class Noticed::Notification < ::Noticed::ApplicationRecord
  include ::Noticed::Notification::GeneratedAttributeMethods
  include ::Noticed::Notification::GeneratedAssociationMethods
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor
  include ::Noticed::Readable
  include ::Noticed::Translation
  extend ::Noticed::Readable::ClassMethods

  # source://activerecord/7.0.8/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_event(*args); end

  # source://activerecord/7.0.8/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_recipient(*args); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options; end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options=(_arg0); end

  # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options?; end

  def params(*_arg0, **_arg1, &_arg2); end
  def record(*_arg0, **_arg1, &_arg2); end

  class << self
    # source://activesupport/7.0.8/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activerecord/7.0.8/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://actionpack/7.0.8/lib/action_dispatch/routing/route_set.rb#564
    def _routes; end

    # source://activemodel/7.0.8/lib/active_model/validations.rb#52
    def _validators; end

    # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options; end

    # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options=(value); end

    # source://actionpack/7.0.8/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options?; end

    # source://activerecord/7.0.8/lib/active_record/enum.rb#116
    def defined_enums; end

    # source://activerecord/7.0.8/lib/active_record/scoping/named.rb#174
    def newest_first(*args, **_arg1); end

    # source://activerecord/7.0.8/lib/active_record/scoping/named.rb#174
    def read(*args, **_arg1); end

    # source://activerecord/7.0.8/lib/active_record/scoping/named.rb#174
    def seen(*args, **_arg1); end

    # source://activerecord/7.0.8/lib/active_record/scoping/named.rb#174
    def unread(*args, **_arg1); end

    # source://activerecord/7.0.8/lib/active_record/scoping/named.rb#174
    def unseen(*args, **_arg1); end
  end
end

module Noticed::Notification::GeneratedAssociationMethods
  # source://activerecord/7.0.8/lib/active_record/associations/builder/singular_association.rb#28
  def build_event(*args, &block); end

  # source://activerecord/7.0.8/lib/active_record/associations/builder/singular_association.rb#32
  def create_event(*args, &block); end

  # source://activerecord/7.0.8/lib/active_record/associations/builder/singular_association.rb#36
  def create_event!(*args, &block); end

  # source://activerecord/7.0.8/lib/active_record/associations/builder/association.rb#103
  def event; end

  # source://activerecord/7.0.8/lib/active_record/associations/builder/association.rb#111
  def event=(value); end

  # source://activerecord/7.0.8/lib/active_record/associations/builder/belongs_to.rb#132
  def event_changed?; end

  # source://activerecord/7.0.8/lib/active_record/associations/builder/belongs_to.rb#136
  def event_previously_changed?; end

  # source://activerecord/7.0.8/lib/active_record/associations/builder/association.rb#103
  def recipient; end

  # source://activerecord/7.0.8/lib/active_record/associations/builder/association.rb#111
  def recipient=(value); end

  # source://activerecord/7.0.8/lib/active_record/associations/builder/belongs_to.rb#132
  def recipient_changed?; end

  # source://activerecord/7.0.8/lib/active_record/associations/builder/belongs_to.rb#136
  def recipient_previously_changed?; end

  # source://activerecord/7.0.8/lib/active_record/associations/builder/singular_association.rb#19
  def reload_event; end

  # source://activerecord/7.0.8/lib/active_record/associations/builder/singular_association.rb#19
  def reload_recipient; end
end

module Noticed::Notification::GeneratedAttributeMethods; end

module Noticed::NotificationMethods
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Noticed::NotificationMethods::ClassMethods
end

module Noticed::NotificationMethods::ClassMethods
  def inherited(notifier); end
  def notification_methods(&block); end
end

module Noticed::Readable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Noticed::Readable::ClassMethods

  def mark_as_read; end
  def mark_as_read!; end
  def mark_as_seen; end
  def mark_as_seen!; end
  def mark_as_unread; end
  def mark_as_unread!; end
  def mark_as_unseen; end
  def mark_as_unseen!; end
  def read?; end
  def seen?; end
  def unread?; end
  def unseen?; end
end

module Noticed::Readable::ClassMethods
  def mark_as_read; end
  def mark_as_seen; end
  def mark_as_unread; end
  def mark_as_unseen; end
end

# source://noticed//lib/noticed/required_options.rb#2
module Noticed::RequiredOptions
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Noticed::RequiredOptions::ClassMethods

  module GeneratedClassMethods
    def required_option_names; end
    def required_option_names=(value); end
    def required_option_names?; end
  end

  module GeneratedInstanceMethods
    def required_option_names; end
    def required_option_names?; end
  end
end

# source://noticed//lib/noticed/required_options.rb#0
module Noticed::RequiredOptions::ClassMethods
  # source://noticed//lib/noticed/required_options.rb#10
  def inherited(base); end

  # source://noticed//lib/noticed/required_options.rb#15
  def required_option(*names); end

  # source://noticed//lib/noticed/required_options.rb#15
  def required_options(*names); end
end

# source://noticed//lib/noticed.rb#48
class Noticed::ResponseUnsuccessful < ::StandardError
  # @return [ResponseUnsuccessful] a new instance of ResponseUnsuccessful
  #
  # source://noticed//lib/noticed.rb#51
  def initialize(response, url, args); end

  # Returns the value of attribute response.
  #
  # source://noticed//lib/noticed.rb#49
  def response; end
end

# source://noticed//lib/noticed/translation.rb#2
module Noticed::Translation
  extend ::ActiveSupport::Concern

  # source://noticed//lib/noticed/translation.rb#10
  def class_scope; end

  # Returns the +i18n_scope+ for the class. Overwrite if you want custom lookup.
  #
  # source://noticed//lib/noticed/translation.rb#6
  def i18n_scope; end

  # source://noticed//lib/noticed/translation.rb#23
  def scope_translation_key(key); end

  # source://noticed//lib/noticed/translation.rb#14
  def t(key, **options); end

  # source://noticed//lib/noticed/translation.rb#14
  def translate(key, **options); end
end

# source://noticed//lib/noticed/version.rb#2
Noticed::VERSION = T.let(T.unsafe(nil), String)

# source://noticed//lib/noticed.rb#45
class Noticed::ValidationError < ::StandardError; end
