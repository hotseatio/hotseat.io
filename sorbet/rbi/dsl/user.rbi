# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `User`.
# Please instead update this file by running `bin/tapioca dsl User`.

class User
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::User]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::User)) }
    def fifth; end

    sig { returns(::User) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::User)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::User) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::User).void)
      ).returns(T.nilable(T::Enumerator[::User]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::User]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::User]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::User)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::User) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::User) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::User) }
    def first!; end

    sig { returns(T.nilable(::User)) }
    def forty_two; end

    sig { returns(::User) }
    def forty_two!; end

    sig { returns(T.nilable(::User)) }
    def fourth; end

    sig { returns(::User) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::User) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::User)) }
    def second; end

    sig { returns(::User) }
    def second!; end

    sig { returns(T.nilable(::User)) }
    def second_to_last; end

    sig { returns(::User) }
    def second_to_last!; end

    sig { returns(::User) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::User) }
    def take!; end

    sig { returns(T.nilable(::User)) }
    def third; end

    sig { returns(::User) }
    def third!; end

    sig { returns(T.nilable(::User)) }
    def third_to_last; end

    sig { returns(::User) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Pay::Customer) }
    def build_payment_processor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_referred_by(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def charge_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def charge_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :charges, through: :pay_customers`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Pay::Charge::PrivateCollectionProxy) }
    def charges; end

    sig { params(value: T::Enumerable[::Pay::Charge]).void }
    def charges=(value); end

    sig { returns(T::Array[T.untyped]) }
    def course_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def course_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :courses, through: :sections`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Course::PrivateCollectionProxy) }
    def courses; end

    sig { params(value: T::Enumerable[::Course]).void }
    def courses=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Pay::Customer) }
    def create_payment_processor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Pay::Customer) }
    def create_payment_processor!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_referred_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_referred_by!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def mailkick_subscription_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def mailkick_subscription_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :mailkick_subscriptions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Mailkick::Subscription::PrivateCollectionProxy) }
    def mailkick_subscriptions; end

    sig { params(value: T::Enumerable[::Mailkick::Subscription]).void }
    def mailkick_subscriptions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def notification_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def notification_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :notifications`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Notification::PrivateCollectionProxy) }
    def notifications; end

    sig { params(value: T::Enumerable[::Notification]).void }
    def notifications=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pay_customer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pay_customer_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :pay_customers`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Pay::Customer::PrivateCollectionProxy) }
    def pay_customers; end

    sig { params(value: T::Enumerable[::Pay::Customer]).void }
    def pay_customers=(value); end

    sig { returns(T.nilable(::Pay::Customer)) }
    def payment_processor; end

    sig { params(value: T.nilable(::Pay::Customer)).void }
    def payment_processor=(value); end

    sig { returns(T.nilable(::User)) }
    def referred_by; end

    sig { params(value: T.nilable(::User)).void }
    def referred_by=(value); end

    sig { returns(T::Array[T.untyped]) }
    def referred_user_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def referred_user_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :referred_users`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def referred_users; end

    sig { params(value: T::Enumerable[::User]).void }
    def referred_users=(value); end

    sig { returns(T::Array[T.untyped]) }
    def relationship_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def relationship_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :relationships`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Relationship::PrivateCollectionProxy) }
    def relationships; end

    sig { params(value: T::Enumerable[::Relationship]).void }
    def relationships=(value); end

    sig { returns(T.nilable(::Pay::Customer)) }
    def reload_payment_processor; end

    sig { returns(T.nilable(::User)) }
    def reload_referred_by; end

    sig { returns(T::Array[T.untyped]) }
    def review_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def review_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :reviews, through: :relationships`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Review::PrivateCollectionProxy) }
    def reviews; end

    sig { params(value: T::Enumerable[::Review]).void }
    def reviews=(value); end

    sig { returns(T::Array[T.untyped]) }
    def section_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def section_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :sections, through: :relationships`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Section::PrivateCollectionProxy) }
    def sections; end

    sig { params(value: T::Enumerable[::Section]).void }
    def sections=(value); end

    sig { returns(T::Array[T.untyped]) }
    def subscription_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def subscription_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :subscriptions, through: :pay_customers`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Pay::Subscription::PrivateCollectionProxy) }
    def subscriptions; end

    sig { params(value: T::Enumerable[::Pay::Subscription]).void }
    def subscriptions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def webpush_device_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def webpush_device_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :webpush_devices`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::WebpushDevice::PrivateCollectionProxy) }
    def webpush_devices; end

    sig { params(value: T::Enumerable[::WebpushDevice]).void }
    def webpush_devices=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def subscribed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T::Boolean) }
    def admin; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def admin=(value); end

    sig { returns(T::Boolean) }
    def admin?; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_before_last_save; end

    sig { returns(T.untyped) }
    def admin_before_type_cast; end

    sig { returns(T::Boolean) }
    def admin_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def admin_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def admin_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def admin_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def admin_previous_change; end

    sig { returns(T::Boolean) }
    def admin_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_was; end

    sig { void }
    def admin_will_change!; end

    sig { returns(T::Boolean) }
    def beta_tester; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def beta_tester=(value); end

    sig { returns(T::Boolean) }
    def beta_tester?; end

    sig { returns(T.nilable(T::Boolean)) }
    def beta_tester_before_last_save; end

    sig { returns(T.untyped) }
    def beta_tester_before_type_cast; end

    sig { returns(T::Boolean) }
    def beta_tester_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def beta_tester_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def beta_tester_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def beta_tester_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def beta_tester_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def beta_tester_previous_change; end

    sig { returns(T::Boolean) }
    def beta_tester_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def beta_tester_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def beta_tester_was; end

    sig { void }
    def beta_tester_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at=(value); end

    sig { returns(T::Boolean) }
    def current_sign_in_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at_before_last_save; end

    sig { returns(T.untyped) }
    def current_sign_in_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def current_sign_in_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_sign_in_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_sign_in_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def current_sign_in_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_sign_in_at_previous_change; end

    sig { returns(T::Boolean) }
    def current_sign_in_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at_was; end

    sig { void }
    def current_sign_in_at_will_change!; end

    sig { returns(T.untyped) }
    def current_sign_in_ip; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def current_sign_in_ip=(value); end

    sig { returns(T::Boolean) }
    def current_sign_in_ip?; end

    sig { returns(T.untyped) }
    def current_sign_in_ip_before_last_save; end

    sig { returns(T.untyped) }
    def current_sign_in_ip_before_type_cast; end

    sig { returns(T::Boolean) }
    def current_sign_in_ip_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def current_sign_in_ip_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def current_sign_in_ip_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def current_sign_in_ip_changed?; end

    sig { returns(T.untyped) }
    def current_sign_in_ip_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def current_sign_in_ip_previous_change; end

    sig { returns(T::Boolean) }
    def current_sign_in_ip_previously_changed?; end

    sig { returns(T.untyped) }
    def current_sign_in_ip_previously_was; end

    sig { returns(T.untyped) }
    def current_sign_in_ip_was; end

    sig { void }
    def current_sign_in_ip_will_change!; end

    sig { returns(::String) }
    def email; end

    sig { params(value: ::String).returns(::String) }
    def email=(value); end

    sig { returns(T::Boolean) }
    def email?; end

    sig { returns(T.nilable(::String)) }
    def email_before_last_save; end

    sig { returns(T.untyped) }
    def email_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def email_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def email_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def email_changed?; end

    sig { returns(T.nilable(::String)) }
    def email_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def email_previous_change; end

    sig { returns(T::Boolean) }
    def email_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def email_was; end

    sig { void }
    def email_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at=(value); end

    sig { returns(T::Boolean) }
    def last_sign_in_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at_before_last_save; end

    sig { returns(T.untyped) }
    def last_sign_in_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_sign_in_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_sign_in_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_sign_in_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def last_sign_in_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_sign_in_at_previous_change; end

    sig { returns(T::Boolean) }
    def last_sign_in_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at_was; end

    sig { void }
    def last_sign_in_at_will_change!; end

    sig { returns(T.untyped) }
    def last_sign_in_ip; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def last_sign_in_ip=(value); end

    sig { returns(T::Boolean) }
    def last_sign_in_ip?; end

    sig { returns(T.untyped) }
    def last_sign_in_ip_before_last_save; end

    sig { returns(T.untyped) }
    def last_sign_in_ip_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_sign_in_ip_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def last_sign_in_ip_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def last_sign_in_ip_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def last_sign_in_ip_changed?; end

    sig { returns(T.untyped) }
    def last_sign_in_ip_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def last_sign_in_ip_previous_change; end

    sig { returns(T::Boolean) }
    def last_sign_in_ip_previously_changed?; end

    sig { returns(T.untyped) }
    def last_sign_in_ip_previously_was; end

    sig { returns(T.untyped) }
    def last_sign_in_ip_was; end

    sig { void }
    def last_sign_in_ip_will_change!; end

    sig { returns(::String) }
    def name; end

    sig { params(value: ::String).returns(::String) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def name_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_previous_change; end

    sig { returns(T::Boolean) }
    def name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(::Integer) }
    def notification_token_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def notification_token_count=(value); end

    sig { returns(T::Boolean) }
    def notification_token_count?; end

    sig { returns(T.nilable(::Integer)) }
    def notification_token_count_before_last_save; end

    sig { returns(T.untyped) }
    def notification_token_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def notification_token_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def notification_token_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def notification_token_count_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def notification_token_count_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def notification_token_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def notification_token_count_previous_change; end

    sig { returns(T::Boolean) }
    def notification_token_count_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def notification_token_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def notification_token_count_was; end

    sig { void }
    def notification_token_count_will_change!; end

    sig { returns(T.nilable(::String)) }
    def phone; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def phone=(value); end

    sig { returns(T::Boolean) }
    def phone?; end

    sig { returns(T.nilable(::String)) }
    def phone_before_last_save; end

    sig { returns(T.untyped) }
    def phone_before_type_cast; end

    sig { returns(T::Boolean) }
    def phone_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def phone_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def phone_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def phone_changed?; end

    sig { returns(T.nilable(::String)) }
    def phone_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def phone_previous_change; end

    sig { returns(T::Boolean) }
    def phone_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def phone_previously_was; end

    sig { returns(T.nilable(::String)) }
    def phone_verification_otp_secret; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def phone_verification_otp_secret=(value); end

    sig { returns(T::Boolean) }
    def phone_verification_otp_secret?; end

    sig { returns(T.nilable(::String)) }
    def phone_verification_otp_secret_before_last_save; end

    sig { returns(T.untyped) }
    def phone_verification_otp_secret_before_type_cast; end

    sig { returns(T::Boolean) }
    def phone_verification_otp_secret_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def phone_verification_otp_secret_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def phone_verification_otp_secret_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def phone_verification_otp_secret_changed?; end

    sig { returns(T.nilable(::String)) }
    def phone_verification_otp_secret_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def phone_verification_otp_secret_previous_change; end

    sig { returns(T::Boolean) }
    def phone_verification_otp_secret_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def phone_verification_otp_secret_previously_was; end

    sig { returns(T.nilable(::String)) }
    def phone_verification_otp_secret_was; end

    sig { void }
    def phone_verification_otp_secret_will_change!; end

    sig { returns(T.nilable(::String)) }
    def phone_was; end

    sig { void }
    def phone_will_change!; end

    sig { returns(T.nilable(::String)) }
    def provider; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def provider=(value); end

    sig { returns(T::Boolean) }
    def provider?; end

    sig { returns(T.nilable(::String)) }
    def provider_before_last_save; end

    sig { returns(T.untyped) }
    def provider_before_type_cast; end

    sig { returns(T::Boolean) }
    def provider_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def provider_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def provider_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def provider_changed?; end

    sig { returns(T.nilable(::String)) }
    def provider_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def provider_previous_change; end

    sig { returns(T::Boolean) }
    def provider_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def provider_previously_was; end

    sig { returns(T.nilable(::String)) }
    def provider_was; end

    sig { void }
    def provider_will_change!; end

    sig { returns(::String) }
    def referral_code; end

    sig { params(value: ::String).returns(::String) }
    def referral_code=(value); end

    sig { returns(T::Boolean) }
    def referral_code?; end

    sig { returns(T.nilable(::String)) }
    def referral_code_before_last_save; end

    sig { returns(T.untyped) }
    def referral_code_before_type_cast; end

    sig { returns(T::Boolean) }
    def referral_code_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def referral_code_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def referral_code_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def referral_code_changed?; end

    sig { returns(T.nilable(::String)) }
    def referral_code_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def referral_code_previous_change; end

    sig { returns(T::Boolean) }
    def referral_code_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def referral_code_previously_was; end

    sig { returns(T.nilable(::String)) }
    def referral_code_was; end

    sig { void }
    def referral_code_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def referral_completed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def referral_completed_at=(value); end

    sig { returns(T::Boolean) }
    def referral_completed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def referral_completed_at_before_last_save; end

    sig { returns(T.untyped) }
    def referral_completed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def referral_completed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def referral_completed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def referral_completed_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def referral_completed_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def referral_completed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def referral_completed_at_previous_change; end

    sig { returns(T::Boolean) }
    def referral_completed_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def referral_completed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def referral_completed_at_was; end

    sig { void }
    def referral_completed_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def referred_by_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def referred_by_id=(value); end

    sig { returns(T::Boolean) }
    def referred_by_id?; end

    sig { returns(T.nilable(::Integer)) }
    def referred_by_id_before_last_save; end

    sig { returns(T.untyped) }
    def referred_by_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def referred_by_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def referred_by_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def referred_by_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def referred_by_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def referred_by_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def referred_by_id_previous_change; end

    sig { returns(T::Boolean) }
    def referred_by_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def referred_by_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def referred_by_id_was; end

    sig { void }
    def referred_by_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at=(value); end

    sig { returns(T::Boolean) }
    def remember_created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at_before_last_save; end

    sig { returns(T.untyped) }
    def remember_created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def remember_created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def remember_created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_created_at_previous_change; end

    sig { returns(T::Boolean) }
    def remember_created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at_was; end

    sig { void }
    def remember_created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def remember_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def remember_token=(value); end

    sig { returns(T::Boolean) }
    def remember_token?; end

    sig { returns(T.nilable(::String)) }
    def remember_token_before_last_save; end

    sig { returns(T.untyped) }
    def remember_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def remember_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remember_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remember_token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def remember_token_changed?; end

    sig { returns(T.nilable(::String)) }
    def remember_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remember_token_previous_change; end

    sig { returns(T::Boolean) }
    def remember_token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def remember_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def remember_token_was; end

    sig { void }
    def remember_token_will_change!; end

    sig { void }
    def restore_admin!; end

    sig { void }
    def restore_beta_tester!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_current_sign_in_at!; end

    sig { void }
    def restore_current_sign_in_ip!; end

    sig { void }
    def restore_email!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_last_sign_in_at!; end

    sig { void }
    def restore_last_sign_in_ip!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_notification_token_count!; end

    sig { void }
    def restore_phone!; end

    sig { void }
    def restore_phone_verification_otp_secret!; end

    sig { void }
    def restore_provider!; end

    sig { void }
    def restore_referral_code!; end

    sig { void }
    def restore_referral_completed_at!; end

    sig { void }
    def restore_referred_by_id!; end

    sig { void }
    def restore_remember_created_at!; end

    sig { void }
    def restore_remember_token!; end

    sig { void }
    def restore_sign_in_count!; end

    sig { void }
    def restore_uid!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_admin; end

    sig { returns(T::Boolean) }
    def saved_change_to_admin?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_beta_tester; end

    sig { returns(T::Boolean) }
    def saved_change_to_beta_tester?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_current_sign_in_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_current_sign_in_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_current_sign_in_ip; end

    sig { returns(T::Boolean) }
    def saved_change_to_current_sign_in_ip?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_email?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_last_sign_in_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_sign_in_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_last_sign_in_ip; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_sign_in_ip?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_notification_token_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_notification_token_count?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_phone; end

    sig { returns(T::Boolean) }
    def saved_change_to_phone?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_phone_verification_otp_secret; end

    sig { returns(T::Boolean) }
    def saved_change_to_phone_verification_otp_secret?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_provider; end

    sig { returns(T::Boolean) }
    def saved_change_to_provider?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_referral_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_referral_code?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_referral_completed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_referral_completed_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_referred_by_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_referred_by_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_remember_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_remember_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_remember_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_remember_token?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sign_in_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_sign_in_count?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_uid; end

    sig { returns(T::Boolean) }
    def saved_change_to_uid?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(::Integer) }
    def sign_in_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sign_in_count=(value); end

    sig { returns(T::Boolean) }
    def sign_in_count?; end

    sig { returns(T.nilable(::Integer)) }
    def sign_in_count_before_last_save; end

    sig { returns(T.untyped) }
    def sign_in_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def sign_in_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sign_in_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sign_in_count_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def sign_in_count_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def sign_in_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sign_in_count_previous_change; end

    sig { returns(T::Boolean) }
    def sign_in_count_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def sign_in_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sign_in_count_was; end

    sig { void }
    def sign_in_count_will_change!; end

    sig { returns(T.nilable(::String)) }
    def uid; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def uid=(value); end

    sig { returns(T::Boolean) }
    def uid?; end

    sig { returns(T.nilable(::String)) }
    def uid_before_last_save; end

    sig { returns(T.untyped) }
    def uid_before_type_cast; end

    sig { returns(T::Boolean) }
    def uid_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def uid_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def uid_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def uid_changed?; end

    sig { returns(T.nilable(::String)) }
    def uid_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def uid_previous_change; end

    sig { returns(T::Boolean) }
    def uid_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def uid_previously_was; end

    sig { returns(T.nilable(::String)) }
    def uid_was; end

    sig { void }
    def uid_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_admin?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_beta_tester?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_current_sign_in_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_current_sign_in_ip?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_sign_in_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_sign_in_ip?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_notification_token_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_phone?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_phone_verification_otp_secret?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_provider?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_referral_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_referral_completed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_referred_by_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_remember_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_remember_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sign_in_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_uid?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(num: T.nilable(Integer)).returns(ActiveRecord::Relation) }
    def page(num = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def subscribed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::User } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::User, Integer, String, T::Enumerable[T.any(::User, Integer, String, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::User, Integer, String, T::Enumerable[T.any(::User, Integer, String, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def destroy(*records); end

    sig { returns(T::Array[::User]) }
    def load_target; end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::User]) }
    def target; end

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::User } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
