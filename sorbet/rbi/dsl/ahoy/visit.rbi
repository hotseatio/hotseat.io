# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Ahoy::Visit`.
# Please instead update this file by running `bin/tapioca dsl Ahoy::Visit`.

class Ahoy::Visit
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Ahoy::Visit).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Ahoy::Visit).void)
      ).returns(::Ahoy::Visit)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Ahoy::Visit).void)
      ).returns(::Ahoy::Visit)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Ahoy::Visit).void)
      ).returns(::Ahoy::Visit)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Ahoy::Visit).void)
      ).returns(::Ahoy::Visit)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Ahoy::Visit).void)
      ).returns(::Ahoy::Visit)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Ahoy::Visit]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Ahoy::Visit)) }
    def fifth; end

    sig { returns(::Ahoy::Visit) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Ahoy::Visit)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Ahoy::Visit) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Ahoy::Visit).void)
      ).returns(T.nilable(T::Enumerator[::Ahoy::Visit]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Ahoy::Visit]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Ahoy::Visit]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Ahoy::Visit).void)
      ).returns(::Ahoy::Visit)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Ahoy::Visit).void)
      ).returns(::Ahoy::Visit)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Ahoy::Visit).void)
      ).returns(::Ahoy::Visit)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Ahoy::Visit)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Ahoy::Visit) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Ahoy::Visit) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Ahoy::Visit) }
    def first!; end

    sig { returns(T.nilable(::Ahoy::Visit)) }
    def forty_two; end

    sig { returns(::Ahoy::Visit) }
    def forty_two!; end

    sig { returns(T.nilable(::Ahoy::Visit)) }
    def fourth; end

    sig { returns(::Ahoy::Visit) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Ahoy::Visit) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Ahoy::Visit).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Ahoy::Visit).void)
      ).returns(::Ahoy::Visit)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Ahoy::Visit).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Ahoy::Visit).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Ahoy::Visit)) }
    def second; end

    sig { returns(::Ahoy::Visit) }
    def second!; end

    sig { returns(T.nilable(::Ahoy::Visit)) }
    def second_to_last; end

    sig { returns(::Ahoy::Visit) }
    def second_to_last!; end

    sig { returns(::Ahoy::Visit) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Ahoy::Visit) }
    def take!; end

    sig { returns(T.nilable(::Ahoy::Visit)) }
    def third; end

    sig { returns(::Ahoy::Visit) }
    def third!; end

    sig { returns(T.nilable(::Ahoy::Visit)) }
    def third_to_last; end

    sig { returns(::Ahoy::Visit) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def event_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def event_ids=(ids); end

    # This method is created by ActiveRecord on the `Ahoy::Visit` class because it declared `has_many :events`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Ahoy::Event::PrivateCollectionProxy) }
    def events; end

    sig { params(value: T::Enumerable[::Ahoy::Event]).void }
    def events=(value); end

    sig { returns(T.nilable(::User)) }
    def reload_user; end

    sig { returns(T.nilable(::User)) }
    def user; end

    sig { params(value: T.nilable(::User)).void }
    def user=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def app_version; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def app_version=(value); end

    sig { returns(T::Boolean) }
    def app_version?; end

    sig { returns(T.nilable(::String)) }
    def app_version_before_last_save; end

    sig { returns(T.untyped) }
    def app_version_before_type_cast; end

    sig { returns(T::Boolean) }
    def app_version_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def app_version_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def app_version_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def app_version_changed?; end

    sig { returns(T.nilable(::String)) }
    def app_version_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def app_version_previous_change; end

    sig { returns(T::Boolean) }
    def app_version_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def app_version_previously_was; end

    sig { returns(T.nilable(::String)) }
    def app_version_was; end

    sig { void }
    def app_version_will_change!; end

    sig { returns(T.nilable(::String)) }
    def browser; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def browser=(value); end

    sig { returns(T::Boolean) }
    def browser?; end

    sig { returns(T.nilable(::String)) }
    def browser_before_last_save; end

    sig { returns(T.untyped) }
    def browser_before_type_cast; end

    sig { returns(T::Boolean) }
    def browser_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def browser_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def browser_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def browser_changed?; end

    sig { returns(T.nilable(::String)) }
    def browser_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def browser_previous_change; end

    sig { returns(T::Boolean) }
    def browser_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def browser_previously_was; end

    sig { returns(T.nilable(::String)) }
    def browser_was; end

    sig { void }
    def browser_will_change!; end

    sig { returns(T.nilable(::String)) }
    def city; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def city=(value); end

    sig { returns(T::Boolean) }
    def city?; end

    sig { returns(T.nilable(::String)) }
    def city_before_last_save; end

    sig { returns(T.untyped) }
    def city_before_type_cast; end

    sig { returns(T::Boolean) }
    def city_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def city_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def city_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def city_changed?; end

    sig { returns(T.nilable(::String)) }
    def city_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def city_previous_change; end

    sig { returns(T::Boolean) }
    def city_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def city_previously_was; end

    sig { returns(T.nilable(::String)) }
    def city_was; end

    sig { void }
    def city_will_change!; end

    sig { returns(T.nilable(::String)) }
    def country; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def country=(value); end

    sig { returns(T::Boolean) }
    def country?; end

    sig { returns(T.nilable(::String)) }
    def country_before_last_save; end

    sig { returns(T.untyped) }
    def country_before_type_cast; end

    sig { returns(T::Boolean) }
    def country_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def country_changed?; end

    sig { returns(T.nilable(::String)) }
    def country_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_previous_change; end

    sig { returns(T::Boolean) }
    def country_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def country_previously_was; end

    sig { returns(T.nilable(::String)) }
    def country_was; end

    sig { void }
    def country_will_change!; end

    sig { returns(T.nilable(::String)) }
    def device_type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def device_type=(value); end

    sig { returns(T::Boolean) }
    def device_type?; end

    sig { returns(T.nilable(::String)) }
    def device_type_before_last_save; end

    sig { returns(T.untyped) }
    def device_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def device_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def device_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def device_type_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def device_type_changed?; end

    sig { returns(T.nilable(::String)) }
    def device_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def device_type_previous_change; end

    sig { returns(T::Boolean) }
    def device_type_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def device_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def device_type_was; end

    sig { void }
    def device_type_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def ip; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def ip=(value); end

    sig { returns(T::Boolean) }
    def ip?; end

    sig { returns(T.nilable(::String)) }
    def ip_before_last_save; end

    sig { returns(T.untyped) }
    def ip_before_type_cast; end

    sig { returns(T::Boolean) }
    def ip_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ip_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ip_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def ip_changed?; end

    sig { returns(T.nilable(::String)) }
    def ip_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ip_previous_change; end

    sig { returns(T::Boolean) }
    def ip_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def ip_previously_was; end

    sig { returns(T.nilable(::String)) }
    def ip_was; end

    sig { void }
    def ip_will_change!; end

    sig { returns(T.nilable(::String)) }
    def landing_page; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def landing_page=(value); end

    sig { returns(T::Boolean) }
    def landing_page?; end

    sig { returns(T.nilable(::String)) }
    def landing_page_before_last_save; end

    sig { returns(T.untyped) }
    def landing_page_before_type_cast; end

    sig { returns(T::Boolean) }
    def landing_page_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def landing_page_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def landing_page_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def landing_page_changed?; end

    sig { returns(T.nilable(::String)) }
    def landing_page_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def landing_page_previous_change; end

    sig { returns(T::Boolean) }
    def landing_page_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def landing_page_previously_was; end

    sig { returns(T.nilable(::String)) }
    def landing_page_was; end

    sig { void }
    def landing_page_will_change!; end

    sig { returns(T.nilable(::Float)) }
    def latitude; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def latitude=(value); end

    sig { returns(T::Boolean) }
    def latitude?; end

    sig { returns(T.nilable(::Float)) }
    def latitude_before_last_save; end

    sig { returns(T.untyped) }
    def latitude_before_type_cast; end

    sig { returns(T::Boolean) }
    def latitude_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def latitude_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def latitude_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def latitude_changed?; end

    sig { returns(T.nilable(::Float)) }
    def latitude_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def latitude_previous_change; end

    sig { returns(T::Boolean) }
    def latitude_previously_changed?; end

    sig { returns(T.nilable(::Float)) }
    def latitude_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def latitude_was; end

    sig { void }
    def latitude_will_change!; end

    sig { returns(T.nilable(::Float)) }
    def longitude; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def longitude=(value); end

    sig { returns(T::Boolean) }
    def longitude?; end

    sig { returns(T.nilable(::Float)) }
    def longitude_before_last_save; end

    sig { returns(T.untyped) }
    def longitude_before_type_cast; end

    sig { returns(T::Boolean) }
    def longitude_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def longitude_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def longitude_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def longitude_changed?; end

    sig { returns(T.nilable(::Float)) }
    def longitude_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def longitude_previous_change; end

    sig { returns(T::Boolean) }
    def longitude_previously_changed?; end

    sig { returns(T.nilable(::Float)) }
    def longitude_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def longitude_was; end

    sig { void }
    def longitude_will_change!; end

    sig { returns(T.nilable(::String)) }
    def os; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def os=(value); end

    sig { returns(T::Boolean) }
    def os?; end

    sig { returns(T.nilable(::String)) }
    def os_before_last_save; end

    sig { returns(T.untyped) }
    def os_before_type_cast; end

    sig { returns(T::Boolean) }
    def os_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def os_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def os_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def os_changed?; end

    sig { returns(T.nilable(::String)) }
    def os_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def os_previous_change; end

    sig { returns(T::Boolean) }
    def os_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def os_previously_was; end

    sig { returns(T.nilable(::String)) }
    def os_version; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def os_version=(value); end

    sig { returns(T::Boolean) }
    def os_version?; end

    sig { returns(T.nilable(::String)) }
    def os_version_before_last_save; end

    sig { returns(T.untyped) }
    def os_version_before_type_cast; end

    sig { returns(T::Boolean) }
    def os_version_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def os_version_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def os_version_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def os_version_changed?; end

    sig { returns(T.nilable(::String)) }
    def os_version_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def os_version_previous_change; end

    sig { returns(T::Boolean) }
    def os_version_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def os_version_previously_was; end

    sig { returns(T.nilable(::String)) }
    def os_version_was; end

    sig { void }
    def os_version_will_change!; end

    sig { returns(T.nilable(::String)) }
    def os_was; end

    sig { void }
    def os_will_change!; end

    sig { returns(T.nilable(::String)) }
    def platform; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def platform=(value); end

    sig { returns(T::Boolean) }
    def platform?; end

    sig { returns(T.nilable(::String)) }
    def platform_before_last_save; end

    sig { returns(T.untyped) }
    def platform_before_type_cast; end

    sig { returns(T::Boolean) }
    def platform_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def platform_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def platform_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def platform_changed?; end

    sig { returns(T.nilable(::String)) }
    def platform_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def platform_previous_change; end

    sig { returns(T::Boolean) }
    def platform_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def platform_previously_was; end

    sig { returns(T.nilable(::String)) }
    def platform_was; end

    sig { void }
    def platform_will_change!; end

    sig { returns(T.nilable(::String)) }
    def referrer; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def referrer=(value); end

    sig { returns(T::Boolean) }
    def referrer?; end

    sig { returns(T.nilable(::String)) }
    def referrer_before_last_save; end

    sig { returns(T.untyped) }
    def referrer_before_type_cast; end

    sig { returns(T::Boolean) }
    def referrer_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def referrer_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def referrer_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def referrer_changed?; end

    sig { returns(T.nilable(::String)) }
    def referrer_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def referrer_previous_change; end

    sig { returns(T::Boolean) }
    def referrer_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def referrer_previously_was; end

    sig { returns(T.nilable(::String)) }
    def referrer_was; end

    sig { void }
    def referrer_will_change!; end

    sig { returns(T.nilable(::String)) }
    def referring_domain; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def referring_domain=(value); end

    sig { returns(T::Boolean) }
    def referring_domain?; end

    sig { returns(T.nilable(::String)) }
    def referring_domain_before_last_save; end

    sig { returns(T.untyped) }
    def referring_domain_before_type_cast; end

    sig { returns(T::Boolean) }
    def referring_domain_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def referring_domain_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def referring_domain_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def referring_domain_changed?; end

    sig { returns(T.nilable(::String)) }
    def referring_domain_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def referring_domain_previous_change; end

    sig { returns(T::Boolean) }
    def referring_domain_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def referring_domain_previously_was; end

    sig { returns(T.nilable(::String)) }
    def referring_domain_was; end

    sig { void }
    def referring_domain_will_change!; end

    sig { returns(T.nilable(::String)) }
    def region; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def region=(value); end

    sig { returns(T::Boolean) }
    def region?; end

    sig { returns(T.nilable(::String)) }
    def region_before_last_save; end

    sig { returns(T.untyped) }
    def region_before_type_cast; end

    sig { returns(T::Boolean) }
    def region_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def region_changed?; end

    sig { returns(T.nilable(::String)) }
    def region_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region_previous_change; end

    sig { returns(T::Boolean) }
    def region_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def region_previously_was; end

    sig { returns(T.nilable(::String)) }
    def region_was; end

    sig { void }
    def region_will_change!; end

    sig { void }
    def restore_app_version!; end

    sig { void }
    def restore_browser!; end

    sig { void }
    def restore_city!; end

    sig { void }
    def restore_country!; end

    sig { void }
    def restore_device_type!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_ip!; end

    sig { void }
    def restore_landing_page!; end

    sig { void }
    def restore_latitude!; end

    sig { void }
    def restore_longitude!; end

    sig { void }
    def restore_os!; end

    sig { void }
    def restore_os_version!; end

    sig { void }
    def restore_platform!; end

    sig { void }
    def restore_referrer!; end

    sig { void }
    def restore_referring_domain!; end

    sig { void }
    def restore_region!; end

    sig { void }
    def restore_started_at!; end

    sig { void }
    def restore_user_agent!; end

    sig { void }
    def restore_user_id!; end

    sig { void }
    def restore_utm_campaign!; end

    sig { void }
    def restore_utm_content!; end

    sig { void }
    def restore_utm_medium!; end

    sig { void }
    def restore_utm_source!; end

    sig { void }
    def restore_utm_term!; end

    sig { void }
    def restore_visit_token!; end

    sig { void }
    def restore_visitor_token!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_app_version; end

    sig { returns(T::Boolean) }
    def saved_change_to_app_version?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_browser; end

    sig { returns(T::Boolean) }
    def saved_change_to_browser?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_city; end

    sig { returns(T::Boolean) }
    def saved_change_to_city?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_country; end

    sig { returns(T::Boolean) }
    def saved_change_to_country?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_device_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_device_type?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_ip; end

    sig { returns(T::Boolean) }
    def saved_change_to_ip?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_landing_page; end

    sig { returns(T::Boolean) }
    def saved_change_to_landing_page?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_latitude; end

    sig { returns(T::Boolean) }
    def saved_change_to_latitude?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_longitude; end

    sig { returns(T::Boolean) }
    def saved_change_to_longitude?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_os; end

    sig { returns(T::Boolean) }
    def saved_change_to_os?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_os_version; end

    sig { returns(T::Boolean) }
    def saved_change_to_os_version?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_platform; end

    sig { returns(T::Boolean) }
    def saved_change_to_platform?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_referrer; end

    sig { returns(T::Boolean) }
    def saved_change_to_referrer?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_referring_domain; end

    sig { returns(T::Boolean) }
    def saved_change_to_referring_domain?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_region; end

    sig { returns(T::Boolean) }
    def saved_change_to_region?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_started_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_started_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_user_agent; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_agent?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_utm_campaign; end

    sig { returns(T::Boolean) }
    def saved_change_to_utm_campaign?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_utm_content; end

    sig { returns(T::Boolean) }
    def saved_change_to_utm_content?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_utm_medium; end

    sig { returns(T::Boolean) }
    def saved_change_to_utm_medium?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_utm_source; end

    sig { returns(T::Boolean) }
    def saved_change_to_utm_source?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_utm_term; end

    sig { returns(T::Boolean) }
    def saved_change_to_utm_term?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_visit_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_visit_token?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_visitor_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_visitor_token?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def started_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def started_at=(value); end

    sig { returns(T::Boolean) }
    def started_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def started_at_before_last_save; end

    sig { returns(T.untyped) }
    def started_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def started_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def started_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def started_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def started_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def started_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def started_at_previous_change; end

    sig { returns(T::Boolean) }
    def started_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def started_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def started_at_was; end

    sig { void }
    def started_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def user_agent; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def user_agent=(value); end

    sig { returns(T::Boolean) }
    def user_agent?; end

    sig { returns(T.nilable(::String)) }
    def user_agent_before_last_save; end

    sig { returns(T.untyped) }
    def user_agent_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_agent_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def user_agent_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def user_agent_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def user_agent_changed?; end

    sig { returns(T.nilable(::String)) }
    def user_agent_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def user_agent_previous_change; end

    sig { returns(T::Boolean) }
    def user_agent_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def user_agent_previously_was; end

    sig { returns(T.nilable(::String)) }
    def user_agent_was; end

    sig { void }
    def user_agent_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def user_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def user_id=(value); end

    sig { returns(T::Boolean) }
    def user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def user_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_previous_change; end

    sig { returns(T::Boolean) }
    def user_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_was; end

    sig { void }
    def user_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def utm_campaign; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def utm_campaign=(value); end

    sig { returns(T::Boolean) }
    def utm_campaign?; end

    sig { returns(T.nilable(::String)) }
    def utm_campaign_before_last_save; end

    sig { returns(T.untyped) }
    def utm_campaign_before_type_cast; end

    sig { returns(T::Boolean) }
    def utm_campaign_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_campaign_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_campaign_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def utm_campaign_changed?; end

    sig { returns(T.nilable(::String)) }
    def utm_campaign_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_campaign_previous_change; end

    sig { returns(T::Boolean) }
    def utm_campaign_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def utm_campaign_previously_was; end

    sig { returns(T.nilable(::String)) }
    def utm_campaign_was; end

    sig { void }
    def utm_campaign_will_change!; end

    sig { returns(T.nilable(::String)) }
    def utm_content; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def utm_content=(value); end

    sig { returns(T::Boolean) }
    def utm_content?; end

    sig { returns(T.nilable(::String)) }
    def utm_content_before_last_save; end

    sig { returns(T.untyped) }
    def utm_content_before_type_cast; end

    sig { returns(T::Boolean) }
    def utm_content_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_content_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_content_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def utm_content_changed?; end

    sig { returns(T.nilable(::String)) }
    def utm_content_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_content_previous_change; end

    sig { returns(T::Boolean) }
    def utm_content_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def utm_content_previously_was; end

    sig { returns(T.nilable(::String)) }
    def utm_content_was; end

    sig { void }
    def utm_content_will_change!; end

    sig { returns(T.nilable(::String)) }
    def utm_medium; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def utm_medium=(value); end

    sig { returns(T::Boolean) }
    def utm_medium?; end

    sig { returns(T.nilable(::String)) }
    def utm_medium_before_last_save; end

    sig { returns(T.untyped) }
    def utm_medium_before_type_cast; end

    sig { returns(T::Boolean) }
    def utm_medium_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_medium_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_medium_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def utm_medium_changed?; end

    sig { returns(T.nilable(::String)) }
    def utm_medium_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_medium_previous_change; end

    sig { returns(T::Boolean) }
    def utm_medium_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def utm_medium_previously_was; end

    sig { returns(T.nilable(::String)) }
    def utm_medium_was; end

    sig { void }
    def utm_medium_will_change!; end

    sig { returns(T.nilable(::String)) }
    def utm_source; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def utm_source=(value); end

    sig { returns(T::Boolean) }
    def utm_source?; end

    sig { returns(T.nilable(::String)) }
    def utm_source_before_last_save; end

    sig { returns(T.untyped) }
    def utm_source_before_type_cast; end

    sig { returns(T::Boolean) }
    def utm_source_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_source_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_source_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def utm_source_changed?; end

    sig { returns(T.nilable(::String)) }
    def utm_source_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_source_previous_change; end

    sig { returns(T::Boolean) }
    def utm_source_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def utm_source_previously_was; end

    sig { returns(T.nilable(::String)) }
    def utm_source_was; end

    sig { void }
    def utm_source_will_change!; end

    sig { returns(T.nilable(::String)) }
    def utm_term; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def utm_term=(value); end

    sig { returns(T::Boolean) }
    def utm_term?; end

    sig { returns(T.nilable(::String)) }
    def utm_term_before_last_save; end

    sig { returns(T.untyped) }
    def utm_term_before_type_cast; end

    sig { returns(T::Boolean) }
    def utm_term_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_term_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_term_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def utm_term_changed?; end

    sig { returns(T.nilable(::String)) }
    def utm_term_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def utm_term_previous_change; end

    sig { returns(T::Boolean) }
    def utm_term_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def utm_term_previously_was; end

    sig { returns(T.nilable(::String)) }
    def utm_term_was; end

    sig { void }
    def utm_term_will_change!; end

    sig { returns(T.nilable(::String)) }
    def visit_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def visit_token=(value); end

    sig { returns(T::Boolean) }
    def visit_token?; end

    sig { returns(T.nilable(::String)) }
    def visit_token_before_last_save; end

    sig { returns(T.untyped) }
    def visit_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def visit_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def visit_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def visit_token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def visit_token_changed?; end

    sig { returns(T.nilable(::String)) }
    def visit_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def visit_token_previous_change; end

    sig { returns(T::Boolean) }
    def visit_token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def visit_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def visit_token_was; end

    sig { void }
    def visit_token_will_change!; end

    sig { returns(T.nilable(::String)) }
    def visitor_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def visitor_token=(value); end

    sig { returns(T::Boolean) }
    def visitor_token?; end

    sig { returns(T.nilable(::String)) }
    def visitor_token_before_last_save; end

    sig { returns(T.untyped) }
    def visitor_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def visitor_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def visitor_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def visitor_token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def visitor_token_changed?; end

    sig { returns(T.nilable(::String)) }
    def visitor_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def visitor_token_previous_change; end

    sig { returns(T::Boolean) }
    def visitor_token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def visitor_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def visitor_token_was; end

    sig { void }
    def visitor_token_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_app_version?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_browser?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_city?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_country?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_device_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ip?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_landing_page?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_latitude?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_longitude?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_os?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_os_version?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_platform?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_referrer?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_referring_domain?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_region?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_started_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_agent?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_utm_campaign?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_utm_content?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_utm_medium?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_utm_source?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_utm_term?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_visit_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_visitor_token?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(num: T.nilable(Integer)).returns(ActiveRecord::Relation) }
    def page(num = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Ahoy::Visit } }

    sig { returns(T::Array[::Ahoy::Visit]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Ahoy::Visit } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Ahoy::Visit } }

    sig do
      params(
        records: T.any(::Ahoy::Visit, T::Enumerable[T.any(::Ahoy::Visit, T::Enumerable[::Ahoy::Visit])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Ahoy::Visit, T::Enumerable[T.any(::Ahoy::Visit, T::Enumerable[::Ahoy::Visit])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Ahoy::Visit, T::Enumerable[T.any(::Ahoy::Visit, T::Enumerable[::Ahoy::Visit])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Ahoy::Visit, Integer, String, T::Enumerable[T.any(::Ahoy::Visit, Integer, String, T::Enumerable[::Ahoy::Visit])])
      ).returns(T::Array[::Ahoy::Visit])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Ahoy::Visit, Integer, String, T::Enumerable[T.any(::Ahoy::Visit, Integer, String, T::Enumerable[::Ahoy::Visit])])
      ).returns(T::Array[::Ahoy::Visit])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Ahoy::Visit]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Ahoy::Visit, T::Enumerable[T.any(::Ahoy::Visit, T::Enumerable[::Ahoy::Visit])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Ahoy::Visit, T::Enumerable[T.any(::Ahoy::Visit, T::Enumerable[::Ahoy::Visit])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Ahoy::Visit, T::Enumerable[T.any(::Ahoy::Visit, T::Enumerable[::Ahoy::Visit])])
      ).returns(T::Array[::Ahoy::Visit])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Ahoy::Visit]) }
    def target; end

    sig { returns(T::Array[::Ahoy::Visit]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Ahoy::Visit } }

    sig { returns(T::Array[::Ahoy::Visit]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Ahoy::Visit } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
