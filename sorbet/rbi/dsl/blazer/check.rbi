# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Blazer::Check`.
# Please instead update this file by running `bin/tapioca dsl Blazer::Check`.

class Blazer::Check
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Blazer::Check).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Blazer::Check).void)
      ).returns(::Blazer::Check)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Blazer::Check).void)
      ).returns(::Blazer::Check)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Blazer::Check).void)
      ).returns(::Blazer::Check)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Blazer::Check).void)
      ).returns(::Blazer::Check)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Blazer::Check).void)
      ).returns(::Blazer::Check)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Blazer::Check]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Blazer::Check)) }
    def fifth; end

    sig { returns(::Blazer::Check) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Blazer::Check)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Blazer::Check) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Blazer::Check).void)
      ).returns(T.nilable(T::Enumerator[::Blazer::Check]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Blazer::Check]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Blazer::Check]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Blazer::Check).void)
      ).returns(::Blazer::Check)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Blazer::Check).void)
      ).returns(::Blazer::Check)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Blazer::Check).void)
      ).returns(::Blazer::Check)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Blazer::Check)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Blazer::Check) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Blazer::Check) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Blazer::Check) }
    def first!; end

    sig { returns(T.nilable(::Blazer::Check)) }
    def forty_two; end

    sig { returns(::Blazer::Check) }
    def forty_two!; end

    sig { returns(T.nilable(::Blazer::Check)) }
    def fourth; end

    sig { returns(::Blazer::Check) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Blazer::Check) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Blazer::Check).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Blazer::Check).void)
      ).returns(::Blazer::Check)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Blazer::Check).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Blazer::Check).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Blazer::Check)) }
    def second; end

    sig { returns(::Blazer::Check) }
    def second!; end

    sig { returns(T.nilable(::Blazer::Check)) }
    def second_to_last; end

    sig { returns(::Blazer::Check) }
    def second_to_last!; end

    sig { returns(::Blazer::Check) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Blazer::Check) }
    def take!; end

    sig { returns(T.nilable(::Blazer::Check)) }
    def third; end

    sig { returns(::Blazer::Check) }
    def third!; end

    sig { returns(T.nilable(::Blazer::Check)) }
    def third_to_last; end

    sig { returns(::Blazer::Check) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_creator(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Blazer::Query) }
    def build_query(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_creator(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_creator!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Blazer::Query) }
    def create_query(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Blazer::Query) }
    def create_query!(*args, &blk); end

    sig { returns(T.nilable(::User)) }
    def creator; end

    sig { params(value: T.nilable(::User)).void }
    def creator=(value); end

    sig { returns(T.nilable(::Blazer::Query)) }
    def query; end

    sig { params(value: T.nilable(::Blazer::Query)).void }
    def query=(value); end

    sig { returns(T.nilable(::User)) }
    def reload_creator; end

    sig { returns(T.nilable(::Blazer::Query)) }
    def reload_query; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def check_type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def check_type=(value); end

    sig { returns(T::Boolean) }
    def check_type?; end

    sig { returns(T.nilable(::String)) }
    def check_type_before_last_save; end

    sig { returns(T.untyped) }
    def check_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def check_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def check_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def check_type_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def check_type_changed?; end

    sig { returns(T.nilable(::String)) }
    def check_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def check_type_previous_change; end

    sig { returns(T::Boolean) }
    def check_type_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def check_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def check_type_was; end

    sig { void }
    def check_type_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def creator_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def creator_id=(value); end

    sig { returns(T::Boolean) }
    def creator_id?; end

    sig { returns(T.nilable(::Integer)) }
    def creator_id_before_last_save; end

    sig { returns(T.untyped) }
    def creator_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def creator_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def creator_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def creator_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def creator_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def creator_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def creator_id_previous_change; end

    sig { returns(T::Boolean) }
    def creator_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def creator_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def creator_id_was; end

    sig { void }
    def creator_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def emails; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def emails=(value); end

    sig { returns(T::Boolean) }
    def emails?; end

    sig { returns(T.nilable(::String)) }
    def emails_before_last_save; end

    sig { returns(T.untyped) }
    def emails_before_type_cast; end

    sig { returns(T::Boolean) }
    def emails_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def emails_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def emails_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def emails_changed?; end

    sig { returns(T.nilable(::String)) }
    def emails_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def emails_previous_change; end

    sig { returns(T::Boolean) }
    def emails_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def emails_previously_was; end

    sig { returns(T.nilable(::String)) }
    def emails_was; end

    sig { void }
    def emails_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_run_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_run_at=(value); end

    sig { returns(T::Boolean) }
    def last_run_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_run_at_before_last_save; end

    sig { returns(T.untyped) }
    def last_run_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_run_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_run_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_run_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def last_run_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_run_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_run_at_previous_change; end

    sig { returns(T::Boolean) }
    def last_run_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_run_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_run_at_was; end

    sig { void }
    def last_run_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def message; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def message=(value); end

    sig { returns(T::Boolean) }
    def message?; end

    sig { returns(T.nilable(::String)) }
    def message_before_last_save; end

    sig { returns(T.untyped) }
    def message_before_type_cast; end

    sig { returns(T::Boolean) }
    def message_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def message_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def message_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def message_changed?; end

    sig { returns(T.nilable(::String)) }
    def message_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def message_previous_change; end

    sig { returns(T::Boolean) }
    def message_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def message_previously_was; end

    sig { returns(T.nilable(::String)) }
    def message_was; end

    sig { void }
    def message_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def query_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def query_id=(value); end

    sig { returns(T::Boolean) }
    def query_id?; end

    sig { returns(T.nilable(::Integer)) }
    def query_id_before_last_save; end

    sig { returns(T.untyped) }
    def query_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def query_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def query_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def query_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def query_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def query_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def query_id_previous_change; end

    sig { returns(T::Boolean) }
    def query_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def query_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def query_id_was; end

    sig { void }
    def query_id_will_change!; end

    sig { void }
    def restore_check_type!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_creator_id!; end

    sig { void }
    def restore_emails!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_last_run_at!; end

    sig { void }
    def restore_message!; end

    sig { void }
    def restore_query_id!; end

    sig { void }
    def restore_schedule!; end

    sig { void }
    def restore_slack_channels!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_check_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_check_type?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_creator_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_creator_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_emails; end

    sig { returns(T::Boolean) }
    def saved_change_to_emails?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_last_run_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_run_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_message; end

    sig { returns(T::Boolean) }
    def saved_change_to_message?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_query_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_query_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_schedule; end

    sig { returns(T::Boolean) }
    def saved_change_to_schedule?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_slack_channels; end

    sig { returns(T::Boolean) }
    def saved_change_to_slack_channels?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::String)) }
    def schedule; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def schedule=(value); end

    sig { returns(T::Boolean) }
    def schedule?; end

    sig { returns(T.nilable(::String)) }
    def schedule_before_last_save; end

    sig { returns(T.untyped) }
    def schedule_before_type_cast; end

    sig { returns(T::Boolean) }
    def schedule_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def schedule_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def schedule_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def schedule_changed?; end

    sig { returns(T.nilable(::String)) }
    def schedule_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def schedule_previous_change; end

    sig { returns(T::Boolean) }
    def schedule_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def schedule_previously_was; end

    sig { returns(T.nilable(::String)) }
    def schedule_was; end

    sig { void }
    def schedule_will_change!; end

    sig { returns(T.nilable(::String)) }
    def slack_channels; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def slack_channels=(value); end

    sig { returns(T::Boolean) }
    def slack_channels?; end

    sig { returns(T.nilable(::String)) }
    def slack_channels_before_last_save; end

    sig { returns(T.untyped) }
    def slack_channels_before_type_cast; end

    sig { returns(T::Boolean) }
    def slack_channels_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def slack_channels_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def slack_channels_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def slack_channels_changed?; end

    sig { returns(T.nilable(::String)) }
    def slack_channels_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def slack_channels_previous_change; end

    sig { returns(T::Boolean) }
    def slack_channels_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def slack_channels_previously_was; end

    sig { returns(T.nilable(::String)) }
    def slack_channels_was; end

    sig { void }
    def slack_channels_will_change!; end

    sig { returns(T.nilable(::String)) }
    def state; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::String)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def state_changed?; end

    sig { returns(T.nilable(::String)) }
    def state_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_previous_change; end

    sig { returns(T::Boolean) }
    def state_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_check_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_creator_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_emails?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_run_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_message?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_query_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_schedule?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_slack_channels?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(num: T.nilable(Integer)).returns(ActiveRecord::Relation) }
    def page(num = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Blazer::Check } }

    sig { returns(T::Array[::Blazer::Check]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Blazer::Check } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Blazer::Check } }

    sig do
      params(
        records: T.any(::Blazer::Check, T::Enumerable[T.any(::Blazer::Check, T::Enumerable[::Blazer::Check])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Blazer::Check, T::Enumerable[T.any(::Blazer::Check, T::Enumerable[::Blazer::Check])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Blazer::Check, T::Enumerable[T.any(::Blazer::Check, T::Enumerable[::Blazer::Check])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Blazer::Check, Integer, String, T::Enumerable[T.any(::Blazer::Check, Integer, String, T::Enumerable[::Blazer::Check])])
      ).returns(T::Array[::Blazer::Check])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Blazer::Check, Integer, String, T::Enumerable[T.any(::Blazer::Check, Integer, String, T::Enumerable[::Blazer::Check])])
      ).returns(T::Array[::Blazer::Check])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Blazer::Check]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Blazer::Check, T::Enumerable[T.any(::Blazer::Check, T::Enumerable[::Blazer::Check])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Blazer::Check, T::Enumerable[T.any(::Blazer::Check, T::Enumerable[::Blazer::Check])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Blazer::Check, T::Enumerable[T.any(::Blazer::Check, T::Enumerable[::Blazer::Check])])
      ).returns(T::Array[::Blazer::Check])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Blazer::Check]) }
    def target; end

    sig { returns(T::Array[::Blazer::Check]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Blazer::Check } }

    sig { returns(T::Array[::Blazer::Check]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Blazer::Check } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
