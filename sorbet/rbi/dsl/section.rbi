# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Section`.
# Please instead update this file by running `bin/tapioca dsl Section`.

class Section
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Section).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Section).void)).returns(::Section) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Section).void)).returns(::Section) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Section).void)).returns(::Section) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Section).void)).returns(::Section) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Section).void)).returns(::Section) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Section]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Section)) }
    def fifth; end

    sig { returns(::Section) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Section)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Section) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Section).void)
      ).returns(T.nilable(T::Enumerator[::Section]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Section]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Section]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Section).void)).returns(::Section) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Section).void)).returns(::Section) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Section).void)).returns(::Section) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Section)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Section) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Section) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Section) }
    def first!; end

    sig { returns(T.nilable(::Section)) }
    def forty_two; end

    sig { returns(::Section) }
    def forty_two!; end

    sig { returns(T.nilable(::Section)) }
    def fourth; end

    sig { returns(::Section) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Section) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Section).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Section).void)).returns(::Section) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Section).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Section).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Section)) }
    def second; end

    sig { returns(::Section) }
    def second!; end

    sig { returns(T.nilable(::Section)) }
    def second_to_last; end

    sig { returns(::Section) }
    def second_to_last!; end

    sig { returns(::Section) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Section) }
    def take!; end

    sig { returns(T.nilable(::Section)) }
    def third; end

    sig { returns(::Section) }
    def third!; end

    sig { returns(T.nilable(::Section)) }
    def third_to_last; end

    sig { returns(::Section) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Course) }
    def build_course(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::GradeDistribution) }
    def build_grade_distribution(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Instructor) }
    def build_instructor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Term) }
    def build_term(*args, &blk); end

    sig { returns(T.nilable(::Course)) }
    def course; end

    sig { params(value: T.nilable(::Course)).void }
    def course=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Course) }
    def create_course(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Course) }
    def create_course!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::GradeDistribution) }
    def create_grade_distribution(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::GradeDistribution) }
    def create_grade_distribution!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Instructor) }
    def create_instructor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Instructor) }
    def create_instructor!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Term) }
    def create_term(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Term) }
    def create_term!(*args, &blk); end

    # This method is created by ActiveRecord on the `Section` class because it declared `has_many :enrollment_data`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::EnrollmentDatum::PrivateCollectionProxy) }
    def enrollment_data; end

    sig { params(value: T::Enumerable[::EnrollmentDatum]).void }
    def enrollment_data=(value); end

    sig { returns(T::Array[T.untyped]) }
    def enrollment_datum_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def enrollment_datum_ids=(ids); end

    sig { returns(T.nilable(::GradeDistribution)) }
    def grade_distribution; end

    sig { params(value: T.nilable(::GradeDistribution)).void }
    def grade_distribution=(value); end

    sig { returns(T.nilable(::Instructor)) }
    def instructor; end

    sig { params(value: T.nilable(::Instructor)).void }
    def instructor=(value); end

    sig { returns(T::Array[T.untyped]) }
    def relationship_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def relationship_ids=(ids); end

    # This method is created by ActiveRecord on the `Section` class because it declared `has_many :relationships`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Relationship::PrivateCollectionProxy) }
    def relationships; end

    sig { params(value: T::Enumerable[::Relationship]).void }
    def relationships=(value); end

    sig { returns(T.nilable(::Course)) }
    def reload_course; end

    sig { returns(T.nilable(::GradeDistribution)) }
    def reload_grade_distribution; end

    sig { returns(T.nilable(::Instructor)) }
    def reload_instructor; end

    sig { returns(T.nilable(::Term)) }
    def reload_term; end

    sig { returns(T::Array[T.untyped]) }
    def review_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def review_ids=(ids); end

    # This method is created by ActiveRecord on the `Section` class because it declared `has_many :reviews, through: :relationships`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Review::PrivateCollectionProxy) }
    def reviews; end

    sig { params(value: T::Enumerable[::Review]).void }
    def reviews=(value); end

    sig { returns(T.nilable(::Term)) }
    def term; end

    sig { params(value: T.nilable(::Term)).void }
    def term=(value); end

    sig { returns(T::Array[T.untyped]) }
    def textbook_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def textbook_ids=(ids); end

    # This method is created by ActiveRecord on the `Section` class because it declared `has_and_belongs_to_many :textbooks`.
    # ðŸ”— [Rails guide for `has_and_belongs_to_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-and-belongs-to-many-association)
    sig { returns(::Textbook::PrivateCollectionProxy) }
    def textbooks; end

    sig { params(value: T::Enumerable[::Textbook]).void }
    def textbooks=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order_by_course(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order_by_index(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def asucla_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def asucla_id=(value); end

    sig { returns(T::Boolean) }
    def asucla_id?; end

    sig { returns(T.nilable(::String)) }
    def asucla_id_before_last_save; end

    sig { returns(T.untyped) }
    def asucla_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def asucla_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def asucla_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def asucla_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def asucla_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def asucla_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def asucla_id_previous_change; end

    sig { returns(T::Boolean) }
    def asucla_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def asucla_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def asucla_id_was; end

    sig { void }
    def asucla_id_will_change!; end

    sig { returns(::Integer) }
    def course_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def course_id=(value); end

    sig { returns(T::Boolean) }
    def course_id?; end

    sig { returns(T.nilable(::Integer)) }
    def course_id_before_last_save; end

    sig { returns(T.untyped) }
    def course_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def course_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def course_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def course_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def course_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def course_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def course_id_previous_change; end

    sig { returns(T::Boolean) }
    def course_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def course_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def course_id_was; end

    sig { void }
    def course_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T::Array[::String]) }
    def days; end

    sig { params(value: T::Array[::String]).returns(T::Array[::String]) }
    def days=(value); end

    sig { returns(T::Boolean) }
    def days?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def days_before_last_save; end

    sig { returns(T.untyped) }
    def days_before_type_cast; end

    sig { returns(T::Boolean) }
    def days_came_from_user?; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def days_change; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def days_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def days_changed?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def days_in_database; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def days_previous_change; end

    sig { returns(T::Boolean) }
    def days_previously_changed?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def days_previously_was; end

    sig { returns(T.nilable(T::Array[::String])) }
    def days_was; end

    sig { void }
    def days_will_change!; end

    sig { returns(::Integer) }
    def enrollment_capacity; end

    sig { params(value: ::Integer).returns(::Integer) }
    def enrollment_capacity=(value); end

    sig { returns(T::Boolean) }
    def enrollment_capacity?; end

    sig { returns(T.nilable(::Integer)) }
    def enrollment_capacity_before_last_save; end

    sig { returns(T.untyped) }
    def enrollment_capacity_before_type_cast; end

    sig { returns(T::Boolean) }
    def enrollment_capacity_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def enrollment_capacity_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def enrollment_capacity_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def enrollment_capacity_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def enrollment_capacity_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def enrollment_capacity_previous_change; end

    sig { returns(T::Boolean) }
    def enrollment_capacity_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def enrollment_capacity_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def enrollment_capacity_was; end

    sig { void }
    def enrollment_capacity_will_change!; end

    sig { returns(::Integer) }
    def enrollment_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def enrollment_count=(value); end

    sig { returns(T::Boolean) }
    def enrollment_count?; end

    sig { returns(T.nilable(::Integer)) }
    def enrollment_count_before_last_save; end

    sig { returns(T.untyped) }
    def enrollment_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def enrollment_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def enrollment_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def enrollment_count_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def enrollment_count_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def enrollment_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def enrollment_count_previous_change; end

    sig { returns(T::Boolean) }
    def enrollment_count_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def enrollment_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def enrollment_count_was; end

    sig { void }
    def enrollment_count_will_change!; end

    sig { returns(::String) }
    def enrollment_status; end

    sig { params(value: ::String).returns(::String) }
    def enrollment_status=(value); end

    sig { returns(T::Boolean) }
    def enrollment_status?; end

    sig { returns(T.nilable(::String)) }
    def enrollment_status_before_last_save; end

    sig { returns(T.untyped) }
    def enrollment_status_before_type_cast; end

    sig { returns(T::Boolean) }
    def enrollment_status_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def enrollment_status_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def enrollment_status_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def enrollment_status_changed?; end

    sig { returns(T.nilable(::String)) }
    def enrollment_status_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def enrollment_status_previous_change; end

    sig { returns(T::Boolean) }
    def enrollment_status_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def enrollment_status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def enrollment_status_was; end

    sig { void }
    def enrollment_status_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def final_end; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def final_end=(value); end

    sig { returns(T::Boolean) }
    def final_end?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def final_end_before_last_save; end

    sig { returns(T.untyped) }
    def final_end_before_type_cast; end

    sig { returns(T::Boolean) }
    def final_end_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def final_end_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def final_end_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def final_end_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def final_end_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def final_end_previous_change; end

    sig { returns(T::Boolean) }
    def final_end_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def final_end_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def final_end_was; end

    sig { void }
    def final_end_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def final_start; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def final_start=(value); end

    sig { returns(T::Boolean) }
    def final_start?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def final_start_before_last_save; end

    sig { returns(T.untyped) }
    def final_start_before_type_cast; end

    sig { returns(T::Boolean) }
    def final_start_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def final_start_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def final_start_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def final_start_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def final_start_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def final_start_previous_change; end

    sig { returns(T::Boolean) }
    def final_start_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def final_start_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def final_start_was; end

    sig { void }
    def final_start_will_change!; end

    sig { returns(T.untyped) }
    def format; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def format=(value); end

    sig { returns(T::Boolean) }
    def format?; end

    sig { returns(T.untyped) }
    def format_before_last_save; end

    sig { returns(T.untyped) }
    def format_before_type_cast; end

    sig { returns(T::Boolean) }
    def format_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def format_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def format_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def format_changed?; end

    sig { returns(T.untyped) }
    def format_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def format_previous_change; end

    sig { returns(T::Boolean) }
    def format_previously_changed?; end

    sig { returns(T.untyped) }
    def format_previously_was; end

    sig { returns(T.untyped) }
    def format_was; end

    sig { void }
    def format_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def index; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def index=(value); end

    sig { returns(T::Boolean) }
    def index?; end

    sig { returns(T.nilable(::Integer)) }
    def index_before_last_save; end

    sig { returns(T.untyped) }
    def index_before_type_cast; end

    sig { returns(T::Boolean) }
    def index_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def index_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def index_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def index_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def index_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def index_previous_change; end

    sig { returns(T::Boolean) }
    def index_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def index_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def index_was; end

    sig { void }
    def index_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def instructor_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def instructor_id=(value); end

    sig { returns(T::Boolean) }
    def instructor_id?; end

    sig { returns(T.nilable(::Integer)) }
    def instructor_id_before_last_save; end

    sig { returns(T.untyped) }
    def instructor_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def instructor_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def instructor_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def instructor_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def instructor_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def instructor_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def instructor_id_previous_change; end

    sig { returns(T::Boolean) }
    def instructor_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def instructor_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def instructor_id_was; end

    sig { void }
    def instructor_id_will_change!; end

    sig { returns(T::Array[::String]) }
    def locations; end

    sig { params(value: T::Array[::String]).returns(T::Array[::String]) }
    def locations=(value); end

    sig { returns(T::Boolean) }
    def locations?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def locations_before_last_save; end

    sig { returns(T.untyped) }
    def locations_before_type_cast; end

    sig { returns(T::Boolean) }
    def locations_came_from_user?; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def locations_change; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def locations_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def locations_changed?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def locations_in_database; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def locations_previous_change; end

    sig { returns(T::Boolean) }
    def locations_previously_changed?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def locations_previously_was; end

    sig { returns(T.nilable(T::Array[::String])) }
    def locations_was; end

    sig { void }
    def locations_will_change!; end

    sig { returns(::String) }
    def registrar_id; end

    sig { params(value: ::String).returns(::String) }
    def registrar_id=(value); end

    sig { returns(T::Boolean) }
    def registrar_id?; end

    sig { returns(T.nilable(::String)) }
    def registrar_id_before_last_save; end

    sig { returns(T.untyped) }
    def registrar_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def registrar_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def registrar_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def registrar_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def registrar_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def registrar_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def registrar_id_previous_change; end

    sig { returns(T::Boolean) }
    def registrar_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def registrar_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def registrar_id_was; end

    sig { void }
    def registrar_id_will_change!; end

    sig { returns(T::Array[::String]) }
    def registrar_instructors; end

    sig { params(value: T::Array[::String]).returns(T::Array[::String]) }
    def registrar_instructors=(value); end

    sig { returns(T::Boolean) }
    def registrar_instructors?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def registrar_instructors_before_last_save; end

    sig { returns(T.untyped) }
    def registrar_instructors_before_type_cast; end

    sig { returns(T::Boolean) }
    def registrar_instructors_came_from_user?; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def registrar_instructors_change; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def registrar_instructors_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def registrar_instructors_changed?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def registrar_instructors_in_database; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def registrar_instructors_previous_change; end

    sig { returns(T::Boolean) }
    def registrar_instructors_previously_changed?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def registrar_instructors_previously_was; end

    sig { returns(T.nilable(T::Array[::String])) }
    def registrar_instructors_was; end

    sig { void }
    def registrar_instructors_will_change!; end

    sig { void }
    def restore_asucla_id!; end

    sig { void }
    def restore_course_id!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_days!; end

    sig { void }
    def restore_enrollment_capacity!; end

    sig { void }
    def restore_enrollment_count!; end

    sig { void }
    def restore_enrollment_status!; end

    sig { void }
    def restore_final_end!; end

    sig { void }
    def restore_final_start!; end

    sig { void }
    def restore_format!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_index!; end

    sig { void }
    def restore_instructor_id!; end

    sig { void }
    def restore_locations!; end

    sig { void }
    def restore_registrar_id!; end

    sig { void }
    def restore_registrar_instructors!; end

    sig { void }
    def restore_should_update_instructor!; end

    sig { void }
    def restore_summer_duration_weeks!; end

    sig { void }
    def restore_summer_session!; end

    sig { void }
    def restore_term_id!; end

    sig { void }
    def restore_times!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_waitlist_capacity!; end

    sig { void }
    def restore_waitlist_count!; end

    sig { void }
    def restore_waitlist_status!; end

    sig { void }
    def restore_website!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_asucla_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_asucla_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_course_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_course_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def saved_change_to_days; end

    sig { returns(T::Boolean) }
    def saved_change_to_days?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_enrollment_capacity; end

    sig { returns(T::Boolean) }
    def saved_change_to_enrollment_capacity?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_enrollment_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_enrollment_count?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_enrollment_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_enrollment_status?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_final_end; end

    sig { returns(T::Boolean) }
    def saved_change_to_final_end?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_final_start; end

    sig { returns(T::Boolean) }
    def saved_change_to_final_start?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_format; end

    sig { returns(T::Boolean) }
    def saved_change_to_format?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_index; end

    sig { returns(T::Boolean) }
    def saved_change_to_index?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_instructor_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_instructor_id?; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def saved_change_to_locations; end

    sig { returns(T::Boolean) }
    def saved_change_to_locations?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_registrar_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_registrar_id?; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def saved_change_to_registrar_instructors; end

    sig { returns(T::Boolean) }
    def saved_change_to_registrar_instructors?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_should_update_instructor; end

    sig { returns(T::Boolean) }
    def saved_change_to_should_update_instructor?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_summer_duration_weeks; end

    sig { returns(T::Boolean) }
    def saved_change_to_summer_duration_weeks?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_summer_session; end

    sig { returns(T::Boolean) }
    def saved_change_to_summer_session?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_term_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_term_id?; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def saved_change_to_times; end

    sig { returns(T::Boolean) }
    def saved_change_to_times?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_waitlist_capacity; end

    sig { returns(T::Boolean) }
    def saved_change_to_waitlist_capacity?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_waitlist_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_waitlist_count?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_waitlist_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_waitlist_status?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_website; end

    sig { returns(T::Boolean) }
    def saved_change_to_website?; end

    sig { returns(T::Boolean) }
    def should_update_instructor; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def should_update_instructor=(value); end

    sig { returns(T::Boolean) }
    def should_update_instructor?; end

    sig { returns(T.nilable(T::Boolean)) }
    def should_update_instructor_before_last_save; end

    sig { returns(T.untyped) }
    def should_update_instructor_before_type_cast; end

    sig { returns(T::Boolean) }
    def should_update_instructor_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def should_update_instructor_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def should_update_instructor_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def should_update_instructor_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def should_update_instructor_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def should_update_instructor_previous_change; end

    sig { returns(T::Boolean) }
    def should_update_instructor_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def should_update_instructor_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def should_update_instructor_was; end

    sig { void }
    def should_update_instructor_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def summer_duration_weeks; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def summer_duration_weeks=(value); end

    sig { returns(T::Boolean) }
    def summer_duration_weeks?; end

    sig { returns(T.nilable(::Integer)) }
    def summer_duration_weeks_before_last_save; end

    sig { returns(T.untyped) }
    def summer_duration_weeks_before_type_cast; end

    sig { returns(T::Boolean) }
    def summer_duration_weeks_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def summer_duration_weeks_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def summer_duration_weeks_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def summer_duration_weeks_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def summer_duration_weeks_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def summer_duration_weeks_previous_change; end

    sig { returns(T::Boolean) }
    def summer_duration_weeks_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def summer_duration_weeks_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def summer_duration_weeks_was; end

    sig { void }
    def summer_duration_weeks_will_change!; end

    sig { returns(T.untyped) }
    def summer_session; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def summer_session=(value); end

    sig { returns(T::Boolean) }
    def summer_session?; end

    sig { returns(T.untyped) }
    def summer_session_before_last_save; end

    sig { returns(T.untyped) }
    def summer_session_before_type_cast; end

    sig { returns(T::Boolean) }
    def summer_session_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def summer_session_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def summer_session_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def summer_session_changed?; end

    sig { returns(T.untyped) }
    def summer_session_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def summer_session_previous_change; end

    sig { returns(T::Boolean) }
    def summer_session_previously_changed?; end

    sig { returns(T.untyped) }
    def summer_session_previously_was; end

    sig { returns(T.untyped) }
    def summer_session_was; end

    sig { void }
    def summer_session_will_change!; end

    sig { returns(::Integer) }
    def term_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def term_id=(value); end

    sig { returns(T::Boolean) }
    def term_id?; end

    sig { returns(T.nilable(::Integer)) }
    def term_id_before_last_save; end

    sig { returns(T.untyped) }
    def term_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def term_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def term_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def term_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def term_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def term_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def term_id_previous_change; end

    sig { returns(T::Boolean) }
    def term_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def term_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def term_id_was; end

    sig { void }
    def term_id_will_change!; end

    sig { returns(T::Array[::String]) }
    def times; end

    sig { params(value: T::Array[::String]).returns(T::Array[::String]) }
    def times=(value); end

    sig { returns(T::Boolean) }
    def times?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def times_before_last_save; end

    sig { returns(T.untyped) }
    def times_before_type_cast; end

    sig { returns(T::Boolean) }
    def times_came_from_user?; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def times_change; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def times_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def times_changed?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def times_in_database; end

    sig { returns(T.nilable([T::Array[::String], T::Array[::String]])) }
    def times_previous_change; end

    sig { returns(T::Boolean) }
    def times_previously_changed?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def times_previously_was; end

    sig { returns(T.nilable(T::Array[::String])) }
    def times_was; end

    sig { void }
    def times_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::Integer) }
    def waitlist_capacity; end

    sig { params(value: ::Integer).returns(::Integer) }
    def waitlist_capacity=(value); end

    sig { returns(T::Boolean) }
    def waitlist_capacity?; end

    sig { returns(T.nilable(::Integer)) }
    def waitlist_capacity_before_last_save; end

    sig { returns(T.untyped) }
    def waitlist_capacity_before_type_cast; end

    sig { returns(T::Boolean) }
    def waitlist_capacity_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def waitlist_capacity_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def waitlist_capacity_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def waitlist_capacity_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def waitlist_capacity_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def waitlist_capacity_previous_change; end

    sig { returns(T::Boolean) }
    def waitlist_capacity_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def waitlist_capacity_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def waitlist_capacity_was; end

    sig { void }
    def waitlist_capacity_will_change!; end

    sig { returns(::Integer) }
    def waitlist_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def waitlist_count=(value); end

    sig { returns(T::Boolean) }
    def waitlist_count?; end

    sig { returns(T.nilable(::Integer)) }
    def waitlist_count_before_last_save; end

    sig { returns(T.untyped) }
    def waitlist_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def waitlist_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def waitlist_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def waitlist_count_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def waitlist_count_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def waitlist_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def waitlist_count_previous_change; end

    sig { returns(T::Boolean) }
    def waitlist_count_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def waitlist_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def waitlist_count_was; end

    sig { void }
    def waitlist_count_will_change!; end

    sig { returns(::String) }
    def waitlist_status; end

    sig { params(value: ::String).returns(::String) }
    def waitlist_status=(value); end

    sig { returns(T::Boolean) }
    def waitlist_status?; end

    sig { returns(T.nilable(::String)) }
    def waitlist_status_before_last_save; end

    sig { returns(T.untyped) }
    def waitlist_status_before_type_cast; end

    sig { returns(T::Boolean) }
    def waitlist_status_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def waitlist_status_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def waitlist_status_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def waitlist_status_changed?; end

    sig { returns(T.nilable(::String)) }
    def waitlist_status_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def waitlist_status_previous_change; end

    sig { returns(T::Boolean) }
    def waitlist_status_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def waitlist_status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def waitlist_status_was; end

    sig { void }
    def waitlist_status_will_change!; end

    sig { returns(T.nilable(::String)) }
    def website; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def website=(value); end

    sig { returns(T::Boolean) }
    def website?; end

    sig { returns(T.nilable(::String)) }
    def website_before_last_save; end

    sig { returns(T.untyped) }
    def website_before_type_cast; end

    sig { returns(T::Boolean) }
    def website_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def website_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def website_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def website_changed?; end

    sig { returns(T.nilable(::String)) }
    def website_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def website_previous_change; end

    sig { returns(T::Boolean) }
    def website_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def website_previously_was; end

    sig { returns(T.nilable(::String)) }
    def website_was; end

    sig { void }
    def website_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_asucla_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_course_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_days?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_enrollment_capacity?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_enrollment_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_enrollment_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_final_end?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_final_start?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_format?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_index?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_instructor_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_locations?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_registrar_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_registrar_instructors?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_should_update_instructor?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_summer_duration_weeks?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_summer_session?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_term_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_times?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_waitlist_capacity?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_waitlist_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_waitlist_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_website?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order_by_course(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order_by_index(*args, &blk); end

    sig { params(num: T.nilable(Integer)).returns(ActiveRecord::Relation) }
    def page(num = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Section } }

    sig { returns(T::Array[::Section]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Section } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Section } }

    sig do
      params(
        records: T.any(::Section, T::Enumerable[T.any(::Section, T::Enumerable[::Section])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Section, T::Enumerable[T.any(::Section, T::Enumerable[::Section])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Section, T::Enumerable[T.any(::Section, T::Enumerable[::Section])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Section, Integer, String, T::Enumerable[T.any(::Section, Integer, String, T::Enumerable[::Section])])
      ).returns(T::Array[::Section])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Section, Integer, String, T::Enumerable[T.any(::Section, Integer, String, T::Enumerable[::Section])])
      ).returns(T::Array[::Section])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Section]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Section, T::Enumerable[T.any(::Section, T::Enumerable[::Section])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Section, T::Enumerable[T.any(::Section, T::Enumerable[::Section])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Section, T::Enumerable[T.any(::Section, T::Enumerable[::Section])])
      ).returns(T::Array[::Section])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Section]) }
    def target; end

    sig { returns(T::Array[::Section]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Section } }

    sig { returns(T::Array[::Section]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Section } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
