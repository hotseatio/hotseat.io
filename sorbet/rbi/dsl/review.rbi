# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Review`.
# Please instead update this file by running `bin/tapioca dsl Review`.

class Review
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), String]) }
    def finals; end

    sig { returns(T::Hash[T.any(String, Symbol), String]) }
    def grades; end

    sig { returns(T::Hash[T.any(String, Symbol), String]) }
    def statuses; end

    sig { returns(T::Hash[T.any(String, Symbol), String]) }
    def weekly_times; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Review).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Review).void)).returns(::Review) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Review).void)).returns(::Review) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Review).void)).returns(::Review) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Review).void)).returns(::Review) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Review).void)).returns(::Review) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Review]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Review)) }
    def fifth; end

    sig { returns(::Review) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Review)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Review) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Review).void)
      ).returns(T.nilable(T::Enumerator[::Review]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Review]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Review]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Review).void)).returns(::Review) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Review).void)).returns(::Review) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Review).void)).returns(::Review) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Review)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Review) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Review) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Review) }
    def first!; end

    sig { returns(T.nilable(::Review)) }
    def forty_two; end

    sig { returns(::Review) }
    def forty_two!; end

    sig { returns(T.nilable(::Review)) }
    def fourth; end

    sig { returns(::Review) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Review) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Review).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Review).void)).returns(::Review) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Review).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Review).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Review)) }
    def second; end

    sig { returns(::Review) }
    def second!; end

    sig { returns(T.nilable(::Review)) }
    def second_to_last; end

    sig { returns(::Review) }
    def second_to_last!; end

    sig { returns(::Review) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Review) }
    def take!; end

    sig { returns(T.nilable(::Review)) }
    def third; end

    sig { returns(::Review) }
    def third!; end

    sig { returns(T.nilable(::Review)) }
    def third_to_last; end

    sig { returns(::Review) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def a!; end

    sig { returns(T::Boolean) }
    def a?; end

    sig { void }
    def a_minus!; end

    sig { returns(T::Boolean) }
    def a_minus?; end

    sig { void }
    def a_plus!; end

    sig { returns(T::Boolean) }
    def a_plus?; end

    sig { void }
    def approved!; end

    sig { returns(T::Boolean) }
    def approved?; end

    sig { void }
    def b!; end

    sig { returns(T::Boolean) }
    def b?; end

    sig { void }
    def b_minus!; end

    sig { returns(T::Boolean) }
    def b_minus?; end

    sig { void }
    def b_plus!; end

    sig { returns(T::Boolean) }
    def b_plus?; end

    sig { void }
    def c!; end

    sig { returns(T::Boolean) }
    def c?; end

    sig { void }
    def c_minus!; end

    sig { returns(T::Boolean) }
    def c_minus?; end

    sig { void }
    def c_plus!; end

    sig { returns(T::Boolean) }
    def c_plus?; end

    sig { void }
    def d!; end

    sig { returns(T::Boolean) }
    def d?; end

    sig { void }
    def d_minus!; end

    sig { returns(T::Boolean) }
    def d_minus?; end

    sig { void }
    def d_plus!; end

    sig { returns(T::Boolean) }
    def d_plus?; end

    sig { void }
    def f!; end

    sig { returns(T::Boolean) }
    def f?; end

    sig { void }
    def fifteen_to_twenty_hours!; end

    sig { returns(T::Boolean) }
    def fifteen_to_twenty_hours?; end

    sig { void }
    def finals_week!; end

    sig { returns(T::Boolean) }
    def finals_week?; end

    sig { void }
    def five_to_ten_hours!; end

    sig { returns(T::Boolean) }
    def five_to_ten_hours?; end

    sig { void }
    def no_final!; end

    sig { returns(T::Boolean) }
    def no_final?; end

    sig { void }
    def no_pass!; end

    sig { returns(T::Boolean) }
    def no_pass?; end

    sig { void }
    def pass!; end

    sig { returns(T::Boolean) }
    def pass?; end

    sig { void }
    def pending!; end

    sig { returns(T::Boolean) }
    def pending?; end

    sig { void }
    def rejected!; end

    sig { returns(T::Boolean) }
    def rejected?; end

    sig { void }
    def ten_to_fifteen_hours!; end

    sig { returns(T::Boolean) }
    def ten_to_fifteen_hours?; end

    sig { void }
    def tenth_week!; end

    sig { returns(T::Boolean) }
    def tenth_week?; end

    sig { void }
    def twenty_plus_hours!; end

    sig { returns(T::Boolean) }
    def twenty_plus_hours?; end

    sig { void }
    def zero_to_five_hours!; end

    sig { returns(T::Boolean) }
    def zero_to_five_hours?; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Course) }
    def build_course(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Instructor) }
    def build_instructor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Relationship) }
    def build_relationship(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Section) }
    def build_section(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Term) }
    def build_term(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user(*args, &blk); end

    sig { returns(T.nilable(::Course)) }
    def course; end

    sig { params(value: T.nilable(::Course)).void }
    def course=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Course) }
    def create_course(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Course) }
    def create_course!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Instructor) }
    def create_instructor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Instructor) }
    def create_instructor!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Relationship) }
    def create_relationship(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Relationship) }
    def create_relationship!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Section) }
    def create_section(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Section) }
    def create_section!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Term) }
    def create_term(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Term) }
    def create_term!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user!(*args, &blk); end

    sig { returns(T.nilable(::Instructor)) }
    def instructor; end

    sig { params(value: T.nilable(::Instructor)).void }
    def instructor=(value); end

    sig { returns(T.nilable(::Relationship)) }
    def relationship; end

    sig { params(value: T.nilable(::Relationship)).void }
    def relationship=(value); end

    sig { returns(T.nilable(::Course)) }
    def reload_course; end

    sig { returns(T.nilable(::Instructor)) }
    def reload_instructor; end

    sig { returns(T.nilable(::Relationship)) }
    def reload_relationship; end

    sig { returns(T.nilable(::Section)) }
    def reload_section; end

    sig { returns(T.nilable(::Term)) }
    def reload_term; end

    sig { returns(T.nilable(::User)) }
    def reload_user; end

    sig { returns(T.nilable(::Section)) }
    def section; end

    sig { params(value: T.nilable(::Section)).void }
    def section=(value); end

    sig { returns(T.nilable(::Term)) }
    def term; end

    sig { params(value: T.nilable(::Term)).void }
    def term=(value); end

    sig { returns(T.nilable(::User)) }
    def user; end

    sig { params(value: T.nilable(::User)).void }
    def user=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def a(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def a_minus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def a_plus(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def approved(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def b(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def b_minus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def b_plus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def c(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def c_minus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def c_plus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def d(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def d_minus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def d_plus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def f(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def fifteen_to_twenty_hours(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def finals_week(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def five_to_ten_hours(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def has_comment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def no_final(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def no_pass(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_a(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_a_minus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_a_plus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_approved(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_b(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_b_minus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_b_plus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_c(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_c_minus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_c_plus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_d(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_d_minus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_d_plus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_f(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_fifteen_to_twenty_hours(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_finals_week(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_five_to_ten_hours(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_no_final(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_no_pass(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_pass(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_rejected(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_ten_to_fifteen_hours(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_tenth_week(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_twenty_plus_hours(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_zero_to_five_hours(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pass(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rejected(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ten_to_fifteen_hours(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def tenth_week(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def twenty_plus_hours(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def viewable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def zero_to_five_hours(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Integer)) }
    def clarity; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def clarity=(value); end

    sig { returns(T::Boolean) }
    def clarity?; end

    sig { returns(T.nilable(::Integer)) }
    def clarity_before_last_save; end

    sig { returns(T.untyped) }
    def clarity_before_type_cast; end

    sig { returns(T::Boolean) }
    def clarity_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def clarity_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def clarity_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def clarity_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def clarity_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def clarity_previous_change; end

    sig { returns(T::Boolean) }
    def clarity_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def clarity_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def clarity_was; end

    sig { void }
    def clarity_will_change!; end

    sig { returns(T.nilable(::String)) }
    def comments; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def comments=(value); end

    sig { returns(T::Boolean) }
    def comments?; end

    sig { returns(T.nilable(::String)) }
    def comments_before_last_save; end

    sig { returns(T.untyped) }
    def comments_before_type_cast; end

    sig { returns(T::Boolean) }
    def comments_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def comments_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def comments_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def comments_changed?; end

    sig { returns(T.nilable(::String)) }
    def comments_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def comments_previous_change; end

    sig { returns(T::Boolean) }
    def comments_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def comments_previously_was; end

    sig { returns(T.nilable(::String)) }
    def comments_was; end

    sig { void }
    def comments_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def final; end

    sig { params(value: T.nilable(T.any(::String, ::Symbol))).returns(T.nilable(T.any(::String, ::Symbol))) }
    def final=(value); end

    sig { returns(T::Boolean) }
    def final?; end

    sig { returns(T.nilable(::String)) }
    def final_before_last_save; end

    sig { returns(T.untyped) }
    def final_before_type_cast; end

    sig { returns(T::Boolean) }
    def final_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def final_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def final_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def final_changed?; end

    sig { returns(T.nilable(::String)) }
    def final_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def final_previous_change; end

    sig { returns(T::Boolean) }
    def final_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def final_previously_was; end

    sig { returns(T.nilable(::String)) }
    def final_was; end

    sig { void }
    def final_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def first_approved_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def first_approved_at=(value); end

    sig { returns(T::Boolean) }
    def first_approved_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def first_approved_at_before_last_save; end

    sig { returns(T.untyped) }
    def first_approved_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def first_approved_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def first_approved_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def first_approved_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def first_approved_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def first_approved_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def first_approved_at_previous_change; end

    sig { returns(T::Boolean) }
    def first_approved_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def first_approved_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def first_approved_at_was; end

    sig { void }
    def first_approved_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def grade; end

    sig { params(value: T.nilable(T.any(::String, ::Symbol))).returns(T.nilable(T.any(::String, ::Symbol))) }
    def grade=(value); end

    sig { returns(T::Boolean) }
    def grade?; end

    sig { returns(T.nilable(::String)) }
    def grade_before_last_save; end

    sig { returns(T.untyped) }
    def grade_before_type_cast; end

    sig { returns(T::Boolean) }
    def grade_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def grade_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def grade_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def grade_changed?; end

    sig { returns(T.nilable(::String)) }
    def grade_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def grade_previous_change; end

    sig { returns(T::Boolean) }
    def grade_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def grade_previously_was; end

    sig { returns(T.nilable(::String)) }
    def grade_was; end

    sig { void }
    def grade_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_group_project; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def has_group_project=(value); end

    sig { returns(T::Boolean) }
    def has_group_project?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_group_project_before_last_save; end

    sig { returns(T.untyped) }
    def has_group_project_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_group_project_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_group_project_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_group_project_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def has_group_project_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_group_project_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_group_project_previous_change; end

    sig { returns(T::Boolean) }
    def has_group_project_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_group_project_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_group_project_was; end

    sig { void }
    def has_group_project_will_change!; end

    sig { returns(T::Boolean) }
    def hidden; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def hidden=(value); end

    sig { returns(T::Boolean) }
    def hidden?; end

    sig { returns(T.nilable(T::Boolean)) }
    def hidden_before_last_save; end

    sig { returns(T.untyped) }
    def hidden_before_type_cast; end

    sig { returns(T::Boolean) }
    def hidden_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def hidden_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def hidden_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def hidden_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def hidden_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def hidden_previous_change; end

    sig { returns(T::Boolean) }
    def hidden_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def hidden_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def hidden_was; end

    sig { void }
    def hidden_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def midterm_count; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def midterm_count=(value); end

    sig { returns(T::Boolean) }
    def midterm_count?; end

    sig { returns(T.nilable(::Integer)) }
    def midterm_count_before_last_save; end

    sig { returns(T.untyped) }
    def midterm_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def midterm_count_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def midterm_count_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def midterm_count_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def midterm_count_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def midterm_count_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def midterm_count_previous_change; end

    sig { returns(T::Boolean) }
    def midterm_count_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def midterm_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def midterm_count_was; end

    sig { void }
    def midterm_count_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def offers_extra_credit; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def offers_extra_credit=(value); end

    sig { returns(T::Boolean) }
    def offers_extra_credit?; end

    sig { returns(T.nilable(T::Boolean)) }
    def offers_extra_credit_before_last_save; end

    sig { returns(T.untyped) }
    def offers_extra_credit_before_type_cast; end

    sig { returns(T::Boolean) }
    def offers_extra_credit_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def offers_extra_credit_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def offers_extra_credit_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def offers_extra_credit_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def offers_extra_credit_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def offers_extra_credit_previous_change; end

    sig { returns(T::Boolean) }
    def offers_extra_credit_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def offers_extra_credit_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def offers_extra_credit_was; end

    sig { void }
    def offers_extra_credit_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def organization; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def organization=(value); end

    sig { returns(T::Boolean) }
    def organization?; end

    sig { returns(T.nilable(::Integer)) }
    def organization_before_last_save; end

    sig { returns(T.untyped) }
    def organization_before_type_cast; end

    sig { returns(T::Boolean) }
    def organization_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def organization_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def organization_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def organization_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def organization_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def organization_previous_change; end

    sig { returns(T::Boolean) }
    def organization_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def organization_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def organization_was; end

    sig { void }
    def organization_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def overall; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def overall=(value); end

    sig { returns(T::Boolean) }
    def overall?; end

    sig { returns(T.nilable(::Integer)) }
    def overall_before_last_save; end

    sig { returns(T.untyped) }
    def overall_before_type_cast; end

    sig { returns(T::Boolean) }
    def overall_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def overall_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def overall_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def overall_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def overall_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def overall_previous_change; end

    sig { returns(T::Boolean) }
    def overall_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def overall_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def overall_was; end

    sig { void }
    def overall_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def reccomend_textbook; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def reccomend_textbook=(value); end

    sig { returns(T::Boolean) }
    def reccomend_textbook?; end

    sig { returns(T.nilable(T::Boolean)) }
    def reccomend_textbook_before_last_save; end

    sig { returns(T.untyped) }
    def reccomend_textbook_before_type_cast; end

    sig { returns(T::Boolean) }
    def reccomend_textbook_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def reccomend_textbook_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def reccomend_textbook_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def reccomend_textbook_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def reccomend_textbook_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def reccomend_textbook_previous_change; end

    sig { returns(T::Boolean) }
    def reccomend_textbook_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def reccomend_textbook_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def reccomend_textbook_was; end

    sig { void }
    def reccomend_textbook_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def relationship_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def relationship_id=(value); end

    sig { returns(T::Boolean) }
    def relationship_id?; end

    sig { returns(T.nilable(::Integer)) }
    def relationship_id_before_last_save; end

    sig { returns(T.untyped) }
    def relationship_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def relationship_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def relationship_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def relationship_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def relationship_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def relationship_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def relationship_id_previous_change; end

    sig { returns(T::Boolean) }
    def relationship_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def relationship_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def relationship_id_was; end

    sig { void }
    def relationship_id_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def requires_attendance; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def requires_attendance=(value); end

    sig { returns(T::Boolean) }
    def requires_attendance?; end

    sig { returns(T.nilable(T::Boolean)) }
    def requires_attendance_before_last_save; end

    sig { returns(T.untyped) }
    def requires_attendance_before_type_cast; end

    sig { returns(T::Boolean) }
    def requires_attendance_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def requires_attendance_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def requires_attendance_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def requires_attendance_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def requires_attendance_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def requires_attendance_previous_change; end

    sig { returns(T::Boolean) }
    def requires_attendance_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def requires_attendance_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def requires_attendance_was; end

    sig { void }
    def requires_attendance_will_change!; end

    sig { void }
    def restore_clarity!; end

    sig { void }
    def restore_comments!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_final!; end

    sig { void }
    def restore_first_approved_at!; end

    sig { void }
    def restore_grade!; end

    sig { void }
    def restore_has_group_project!; end

    sig { void }
    def restore_hidden!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_midterm_count!; end

    sig { void }
    def restore_offers_extra_credit!; end

    sig { void }
    def restore_organization!; end

    sig { void }
    def restore_overall!; end

    sig { void }
    def restore_reccomend_textbook!; end

    sig { void }
    def restore_relationship_id!; end

    sig { void }
    def restore_requires_attendance!; end

    sig { void }
    def restore_status!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_weekly_time!; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_clarity; end

    sig { returns(T::Boolean) }
    def saved_change_to_clarity?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_comments; end

    sig { returns(T::Boolean) }
    def saved_change_to_comments?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_final; end

    sig { returns(T::Boolean) }
    def saved_change_to_final?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_first_approved_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_first_approved_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_grade; end

    sig { returns(T::Boolean) }
    def saved_change_to_grade?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_has_group_project; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_group_project?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_hidden; end

    sig { returns(T::Boolean) }
    def saved_change_to_hidden?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_midterm_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_midterm_count?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_offers_extra_credit; end

    sig { returns(T::Boolean) }
    def saved_change_to_offers_extra_credit?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_organization; end

    sig { returns(T::Boolean) }
    def saved_change_to_organization?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_overall; end

    sig { returns(T::Boolean) }
    def saved_change_to_overall?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_reccomend_textbook; end

    sig { returns(T::Boolean) }
    def saved_change_to_reccomend_textbook?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_relationship_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_relationship_id?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_requires_attendance; end

    sig { returns(T::Boolean) }
    def saved_change_to_requires_attendance?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_status?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_weekly_time; end

    sig { returns(T::Boolean) }
    def saved_change_to_weekly_time?; end

    sig { returns(::String) }
    def status; end

    sig { params(value: T.any(::String, ::Symbol)).returns(T.any(::String, ::Symbol)) }
    def status=(value); end

    sig { returns(T::Boolean) }
    def status?; end

    sig { returns(T.nilable(::String)) }
    def status_before_last_save; end

    sig { returns(T.untyped) }
    def status_before_type_cast; end

    sig { returns(T::Boolean) }
    def status_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def status_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def status_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def status_changed?; end

    sig { returns(T.nilable(::String)) }
    def status_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def status_previous_change; end

    sig { returns(T::Boolean) }
    def status_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def status_was; end

    sig { void }
    def status_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def weekly_time; end

    sig { params(value: T.nilable(T.any(::String, ::Symbol))).returns(T.nilable(T.any(::String, ::Symbol))) }
    def weekly_time=(value); end

    sig { returns(T::Boolean) }
    def weekly_time?; end

    sig { returns(T.nilable(::String)) }
    def weekly_time_before_last_save; end

    sig { returns(T.untyped) }
    def weekly_time_before_type_cast; end

    sig { returns(T::Boolean) }
    def weekly_time_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def weekly_time_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def weekly_time_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def weekly_time_changed?; end

    sig { returns(T.nilable(::String)) }
    def weekly_time_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def weekly_time_previous_change; end

    sig { returns(T::Boolean) }
    def weekly_time_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def weekly_time_previously_was; end

    sig { returns(T.nilable(::String)) }
    def weekly_time_was; end

    sig { void }
    def weekly_time_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_clarity?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_comments?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_final?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_first_approved_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_grade?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_group_project?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_hidden?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_midterm_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_offers_extra_credit?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_organization?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_overall?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reccomend_textbook?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_relationship_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_requires_attendance?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_weekly_time?; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def a(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def a_minus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def a_plus(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def approved(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def b(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def b_minus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def b_plus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def c(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def c_minus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def c_plus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def d(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def d_minus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def d_plus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def f(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def fifteen_to_twenty_hours(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def finals_week(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def five_to_ten_hours(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def has_comment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def no_final(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def no_pass(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_a(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_a_minus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_a_plus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_approved(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_b(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_b_minus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_b_plus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_c(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_c_minus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_c_plus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_d(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_d_minus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_d_plus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_f(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_fifteen_to_twenty_hours(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_finals_week(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_five_to_ten_hours(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_no_final(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_no_pass(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_pass(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_rejected(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_ten_to_fifteen_hours(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_tenth_week(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_twenty_plus_hours(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_zero_to_five_hours(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(num: T.nilable(Integer)).returns(ActiveRecord::Relation) }
    def page(num = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pass(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rejected(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ten_to_fifteen_hours(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def tenth_week(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def twenty_plus_hours(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def viewable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def zero_to_five_hours(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Review } }

    sig { returns(T::Array[::Review]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Review } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Review } }

    sig do
      params(
        records: T.any(::Review, T::Enumerable[T.any(::Review, T::Enumerable[::Review])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Review, T::Enumerable[T.any(::Review, T::Enumerable[::Review])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Review, T::Enumerable[T.any(::Review, T::Enumerable[::Review])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Review, Integer, String, T::Enumerable[T.any(::Review, Integer, String, T::Enumerable[::Review])])
      ).returns(T::Array[::Review])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Review, Integer, String, T::Enumerable[T.any(::Review, Integer, String, T::Enumerable[::Review])])
      ).returns(T::Array[::Review])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Review]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Review, T::Enumerable[T.any(::Review, T::Enumerable[::Review])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Review, T::Enumerable[T.any(::Review, T::Enumerable[::Review])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Review, T::Enumerable[T.any(::Review, T::Enumerable[::Review])])
      ).returns(T::Array[::Review])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Review]) }
    def target; end

    sig { returns(T::Array[::Review]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Review } }

    sig { returns(T::Array[::Review]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Review } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
