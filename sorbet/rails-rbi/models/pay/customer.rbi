# This is an autogenerated file for dynamic methods in Pay::Customer
# Please rerun bundle exec rake rails_rbi:models[Pay::Customer] to regenerate.

# typed: strong
module Pay::Customer::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Pay::Customer::GeneratedAttributeMethods
  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(T.any(T::Array[T.untyped], T::Boolean, Float, T::Hash[T.untyped, T.untyped], Integer, String))) }
  def data; end

  sig { params(value: T.nilable(T.any(T::Array[T.untyped], T::Boolean, Float, T::Hash[T.untyped, T.untyped], Integer, String))).void }
  def data=(value); end

  sig { returns(T::Boolean) }
  def data?; end

  sig { returns(T.nilable(T::Boolean)) }
  def default; end

  sig { params(value: T.nilable(T::Boolean)).void }
  def default=(value); end

  sig { returns(T::Boolean) }
  def default?; end

  sig { returns(T.nilable(ActiveSupport::TimeWithZone)) }
  def deleted_at; end

  sig { params(value: T.nilable(T.any(Date, Time, ActiveSupport::TimeWithZone))).void }
  def deleted_at=(value); end

  sig { returns(T::Boolean) }
  def deleted_at?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(Integer)) }
  def owner_id; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def owner_id=(value); end

  sig { returns(T::Boolean) }
  def owner_id?; end

  sig { returns(T.nilable(String)) }
  def owner_type; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def owner_type=(value); end

  sig { returns(T::Boolean) }
  def owner_type?; end

  sig { returns(String) }
  def processor; end

  sig { params(value: T.any(String, Symbol)).void }
  def processor=(value); end

  sig { returns(T::Boolean) }
  def processor?; end

  sig { returns(T.nilable(String)) }
  def processor_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def processor_id=(value); end

  sig { returns(T::Boolean) }
  def processor_id?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def updated_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end
end

module Pay::Customer::GeneratedAssociationMethods
  sig { returns(::Pay::Charge::ActiveRecord_Associations_CollectionProxy) }
  def charges; end

  sig { returns(T::Array[Integer]) }
  def charge_ids; end

  sig { params(value: T::Enumerable[::Pay::Charge]).void }
  def charges=(value); end

  sig { returns(T.nilable(::Pay::PaymentMethod)) }
  def default_payment_method; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Pay::PaymentMethod).void)).returns(::Pay::PaymentMethod) }
  def build_default_payment_method(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Pay::PaymentMethod).void)).returns(::Pay::PaymentMethod) }
  def create_default_payment_method(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Pay::PaymentMethod).void)).returns(::Pay::PaymentMethod) }
  def create_default_payment_method!(*args, &block); end

  sig { params(value: T.nilable(::Pay::PaymentMethod)).void }
  def default_payment_method=(value); end

  sig { returns(T.nilable(::Pay::PaymentMethod)) }
  def reload_default_payment_method; end

  sig { returns(T.untyped) }
  def owner; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: T.untyped).void)).returns(T.untyped) }
  def build_owner(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: T.untyped).void)).returns(T.untyped) }
  def create_owner(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: T.untyped).void)).returns(T.untyped) }
  def create_owner!(*args, &block); end

  sig { params(value: T.untyped).void }
  def owner=(value); end

  sig { returns(T.untyped) }
  def reload_owner; end

  sig { returns(::Pay::PaymentMethod::ActiveRecord_Associations_CollectionProxy) }
  def payment_methods; end

  sig { returns(T::Array[Integer]) }
  def payment_method_ids; end

  sig { params(value: T::Enumerable[::Pay::PaymentMethod]).void }
  def payment_methods=(value); end

  sig { returns(::Pay::Subscription::ActiveRecord_Associations_CollectionProxy) }
  def subscriptions; end

  sig { returns(T::Array[Integer]) }
  def subscription_ids; end

  sig { params(value: T::Enumerable[::Pay::Subscription]).void }
  def subscriptions=(value); end
end

module Pay::Customer::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Pay::Customer]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Pay::Customer]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Pay::Customer]) }
  def find_n(*args); end

  sig { params(id: T.nilable(Integer)).returns(T.nilable(Pay::Customer)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Pay::Customer) }
  def find_by_id!(id); end
end

class Pay::Customer < Pay::ApplicationRecord
  include Pay::Customer::GeneratedAttributeMethods
  include Pay::Customer::GeneratedAssociationMethods
  extend Pay::Customer::CustomFinderMethods
  extend Pay::Customer::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Pay::Customer::ActiveRecord_Relation, Pay::Customer::ActiveRecord_Associations_CollectionProxy, Pay::Customer::ActiveRecord_AssociationRelation) }

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def self.active(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def self.braintree(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def self.deleted(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def self.fake_processor(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def self.paddle(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def self.stripe(*args); end

  sig { params(num: T.nilable(Integer)).returns(Pay::Customer::ActiveRecord_Relation) }
  def self.page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(Pay::Customer::ActiveRecord_Relation) }
  def self.per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(Pay::Customer::ActiveRecord_Relation) }
  def self.padding(num); end

  sig { returns(Integer) }
  def self.default_per_page; end
end

class Pay::Customer::ActiveRecord_Relation < ActiveRecord::Relation
  include Pay::Customer::ActiveRelation_WhereNot
  include Pay::Customer::CustomFinderMethods
  include Pay::Customer::QueryMethodsReturningRelation
  Elem = type_member {{fixed: Pay::Customer}}

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def active(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def braintree(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def deleted(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def fake_processor(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def paddle(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def stripe(*args); end

  sig { params(num: T.nilable(Integer)).returns(Pay::Customer::ActiveRecord_Relation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(Pay::Customer::ActiveRecord_Relation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(Pay::Customer::ActiveRecord_Relation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end

class Pay::Customer::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Pay::Customer::ActiveRelation_WhereNot
  include Pay::Customer::CustomFinderMethods
  include Pay::Customer::QueryMethodsReturningAssociationRelation
  Elem = type_member {{fixed: Pay::Customer}}

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def active(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def braintree(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def deleted(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def fake_processor(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def paddle(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def stripe(*args); end

  sig { params(num: T.nilable(Integer)).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end

class Pay::Customer::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Pay::Customer::CustomFinderMethods
  include Pay::Customer::QueryMethodsReturningAssociationRelation
  Elem = type_member {{fixed: Pay::Customer}}

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def active(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def braintree(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def deleted(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def fake_processor(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def paddle(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def stripe(*args); end

  sig { params(records: T.any(Pay::Customer, T::Array[Pay::Customer])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Pay::Customer, T::Array[Pay::Customer])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Pay::Customer, T::Array[Pay::Customer])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Pay::Customer, T::Array[Pay::Customer])).returns(T.self_type) }
  def concat(*records); end

  sig { params(num: T.nilable(Integer)).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end

module Pay::Customer::QueryMethodsReturningRelation
  sig { returns(Pay::Customer::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Pay::Customer::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Pay::Customer).returns(T::Boolean)).returns(T::Array[Pay::Customer]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Pay::Customer::ActiveRecord_Relation) }
  def select_columns(*args); end

  sig { params(args: Symbol).returns(Pay::Customer::ActiveRecord_Relation) }
  def where_missing(*args); end

  sig { params(column: Symbol, values: T::Array[T.untyped]).returns(Pay::Customer::ActiveRecord_Relation) }
  def in_order_of(column, values); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Pay::Customer::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Pay::Customer::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module Pay::Customer::QueryMethodsReturningAssociationRelation
  sig { returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Pay::Customer::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Pay::Customer).returns(T::Boolean)).returns(T::Array[Pay::Customer]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def select_columns(*args); end

  sig { params(args: Symbol).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def where_missing(*args); end

  sig { params(column: Symbol, values: T::Array[T.untyped]).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def in_order_of(column, values); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Pay::Customer::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Pay::Customer::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end
