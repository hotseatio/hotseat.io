# This is an autogenerated file for dynamic methods in EnrollmentAppointment
# Please rerun bundle exec rake rails_rbi:models[EnrollmentAppointment] to regenerate.

# typed: strong
module EnrollmentAppointment::EnumInstanceMethods
  sig { returns(T::Boolean) }
  def graduate_pass?; end

  sig { void }
  def graduate_pass!; end

  sig { returns(T::Boolean) }
  def priority_pass?; end

  sig { void }
  def priority_pass!; end

  sig { returns(T::Boolean) }
  def first_pass?; end

  sig { void }
  def first_pass!; end

  sig { returns(T::Boolean) }
  def second_pass?; end

  sig { void }
  def second_pass!; end

  sig { returns(T::Boolean) }
  def graduating_senior?; end

  sig { void }
  def graduating_senior!; end

  sig { returns(T::Boolean) }
  def almost_graduating_senior?; end

  sig { void }
  def almost_graduating_senior!; end

  sig { returns(T::Boolean) }
  def new_student?; end

  sig { void }
  def new_student!; end

  sig { returns(T::Boolean) }
  def readmitted?; end

  sig { void }
  def readmitted!; end

  sig { returns(T::Boolean) }
  def visiting?; end

  sig { void }
  def visiting!; end

  sig { returns(T::Boolean) }
  def senior?; end

  sig { void }
  def senior!; end

  sig { returns(T::Boolean) }
  def junior?; end

  sig { void }
  def junior!; end

  sig { returns(T::Boolean) }
  def sophomore?; end

  sig { void }
  def sophomore!; end

  sig { returns(T::Boolean) }
  def freshman?; end

  sig { void }
  def freshman!; end

  sig { returns(T::Boolean) }
  def joint_graduate?; end

  sig { void }
  def joint_graduate!; end

  sig { returns(T::Boolean) }
  def graduate?; end

  sig { void }
  def graduate!; end
end

module EnrollmentAppointment::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module EnrollmentAppointment::GeneratedAttributeMethods
  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def first; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def first=(value); end

  sig { returns(T::Boolean) }
  def first?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def last; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def last=(value); end

  sig { returns(T::Boolean) }
  def last?; end

  sig { returns(String) }
  def pass; end

  sig { params(value: T.any(Integer, String, Symbol)).void }
  def pass=(value); end

  sig { returns(T::Boolean) }
  def pass?; end

  sig { returns(T.nilable(String)) }
  def standing; end

  sig { params(value: T.nilable(T.any(Integer, String, Symbol))).void }
  def standing=(value); end

  sig { returns(T::Boolean) }
  def standing?; end

  sig { returns(Integer) }
  def term_id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def term_id=(value); end

  sig { returns(T::Boolean) }
  def term_id?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def updated_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end
end

module EnrollmentAppointment::GeneratedAssociationMethods
  sig { returns(::Term) }
  def term; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Term).void)).returns(::Term) }
  def build_term(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Term).void)).returns(::Term) }
  def create_term(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Term).void)).returns(::Term) }
  def create_term!(*args, &block); end

  sig { params(value: ::Term).void }
  def term=(value); end

  sig { returns(::Term) }
  def reload_term; end
end

module EnrollmentAppointment::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[EnrollmentAppointment]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[EnrollmentAppointment]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[EnrollmentAppointment]) }
  def find_n(*args); end

  sig { params(id: T.nilable(Integer)).returns(T.nilable(EnrollmentAppointment)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(EnrollmentAppointment) }
  def find_by_id!(id); end
end

class EnrollmentAppointment < ApplicationRecord
  include EnrollmentAppointment::EnumInstanceMethods
  include EnrollmentAppointment::GeneratedAttributeMethods
  include EnrollmentAppointment::GeneratedAssociationMethods
  extend EnrollmentAppointment::CustomFinderMethods
  extend EnrollmentAppointment::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(EnrollmentAppointment::ActiveRecord_Relation, EnrollmentAppointment::ActiveRecord_Associations_CollectionProxy, EnrollmentAppointment::ActiveRecord_AssociationRelation) }

  sig { returns(T::Hash[T.any(String, Symbol), String]) }
  def self.passes; end

  sig { returns(T::Hash[T.any(String, Symbol), String]) }
  def self.standings; end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.almost_graduating_senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.first_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.freshman(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.graduate(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.graduate_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.graduating_senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.joint_graduate(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.junior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.new_student(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.not_almost_graduating_senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.not_first_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.not_freshman(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.not_graduate(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.not_graduate_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.not_graduating_senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.not_joint_graduate(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.not_junior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.not_new_student(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.not_priority_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.not_readmitted(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.not_second_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.not_senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.not_sophomore(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.not_visiting(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.priority_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.readmitted(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.second_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.sophomore(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.visiting(*args); end

  sig { returns(EnrollmentAppointment::Pass) }
  def typed_pass; end

  sig { params(value: EnrollmentAppointment::Pass).void }
  def typed_pass=(value); end

  sig { returns(T.nilable(EnrollmentAppointment::Standing)) }
  def typed_standing; end

  sig { params(value: T.nilable(EnrollmentAppointment::Standing)).void }
  def typed_standing=(value); end

  class Pass < T::Enum
    enums do
      GraduatePass = new(%q{graduate_pass})
      PriorityPass = new(%q{priority_pass})
      FirstPass = new(%q{first_pass})
      SecondPass = new(%q{second_pass})
    end

  end

  class Standing < T::Enum
    enums do
      GraduatingSenior = new(%q{graduating_senior})
      AlmostGraduatingSenior = new(%q{almost_graduating_senior})
      NewStudent = new(%q{new_student})
      Readmitted = new(%q{readmitted})
      Visiting = new(%q{visiting})
      Senior = new(%q{senior})
      Junior = new(%q{junior})
      Sophomore = new(%q{sophomore})
      Freshman = new(%q{freshman})
      JointGraduate = new(%q{joint_graduate})
      Graduate = new(%q{graduate})
    end

  end

  sig { params(num: T.nilable(Integer)).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def self.padding(num); end

  sig { returns(Integer) }
  def self.default_per_page; end
end

class EnrollmentAppointment::ActiveRecord_Relation < ActiveRecord::Relation
  include EnrollmentAppointment::ActiveRelation_WhereNot
  include EnrollmentAppointment::CustomFinderMethods
  include EnrollmentAppointment::QueryMethodsReturningRelation
  Elem = type_member {{fixed: EnrollmentAppointment}}

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def almost_graduating_senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def first_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def freshman(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def graduate(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def graduate_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def graduating_senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def joint_graduate(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def junior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def new_student(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def not_almost_graduating_senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def not_first_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def not_freshman(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def not_graduate(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def not_graduate_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def not_graduating_senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def not_joint_graduate(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def not_junior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def not_new_student(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def not_priority_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def not_readmitted(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def not_second_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def not_senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def not_sophomore(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def not_visiting(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def priority_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def readmitted(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def second_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def sophomore(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def visiting(*args); end

  sig { params(num: T.nilable(Integer)).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end

class EnrollmentAppointment::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include EnrollmentAppointment::ActiveRelation_WhereNot
  include EnrollmentAppointment::CustomFinderMethods
  include EnrollmentAppointment::QueryMethodsReturningAssociationRelation
  Elem = type_member {{fixed: EnrollmentAppointment}}

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def almost_graduating_senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def first_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def freshman(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def graduate(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def graduate_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def graduating_senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def joint_graduate(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def junior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def new_student(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_almost_graduating_senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_first_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_freshman(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_graduate(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_graduate_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_graduating_senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_joint_graduate(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_junior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_new_student(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_priority_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_readmitted(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_second_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_sophomore(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_visiting(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def priority_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def readmitted(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def second_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def sophomore(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def visiting(*args); end

  sig { params(num: T.nilable(Integer)).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end

class EnrollmentAppointment::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include EnrollmentAppointment::CustomFinderMethods
  include EnrollmentAppointment::QueryMethodsReturningAssociationRelation
  Elem = type_member {{fixed: EnrollmentAppointment}}

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def almost_graduating_senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def first_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def freshman(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def graduate(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def graduate_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def graduating_senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def joint_graduate(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def junior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def new_student(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_almost_graduating_senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_first_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_freshman(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_graduate(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_graduate_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_graduating_senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_joint_graduate(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_junior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_new_student(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_priority_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_readmitted(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_second_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_sophomore(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def not_visiting(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def priority_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def readmitted(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def second_pass(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def senior(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def sophomore(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def visiting(*args); end

  sig { params(records: T.any(EnrollmentAppointment, T::Array[EnrollmentAppointment])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(EnrollmentAppointment, T::Array[EnrollmentAppointment])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(EnrollmentAppointment, T::Array[EnrollmentAppointment])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(EnrollmentAppointment, T::Array[EnrollmentAppointment])).returns(T.self_type) }
  def concat(*records); end

  sig { params(num: T.nilable(Integer)).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end

module EnrollmentAppointment::QueryMethodsReturningRelation
  sig { returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: EnrollmentAppointment).returns(T::Boolean)).returns(T::Array[EnrollmentAppointment]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def select_columns(*args); end

  sig { params(args: Symbol).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def where_missing(*args); end

  sig { params(column: Symbol, values: T::Array[T.untyped]).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def in_order_of(column, values); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: EnrollmentAppointment::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module EnrollmentAppointment::QueryMethodsReturningAssociationRelation
  sig { returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(EnrollmentAppointment::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: EnrollmentAppointment).returns(T::Boolean)).returns(T::Array[EnrollmentAppointment]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def select_columns(*args); end

  sig { params(args: Symbol).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def where_missing(*args); end

  sig { params(column: Symbol, values: T::Array[T.untyped]).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def in_order_of(column, values); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(EnrollmentAppointment::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: EnrollmentAppointment::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end
