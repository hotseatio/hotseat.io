# This is an autogenerated file for dynamic methods in Ahoy::Visit
# Please rerun bundle exec rake rails_rbi:models[Ahoy::Visit] to regenerate.

# typed: strong
module Ahoy::Visit::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Ahoy::Visit::GeneratedAttributeMethods
  sig { returns(T.nilable(String)) }
  def app_version; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def app_version=(value); end

  sig { returns(T::Boolean) }
  def app_version?; end

  sig { returns(T.nilable(String)) }
  def browser; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def browser=(value); end

  sig { returns(T::Boolean) }
  def browser?; end

  sig { returns(T.nilable(String)) }
  def city; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def city=(value); end

  sig { returns(T::Boolean) }
  def city?; end

  sig { returns(T.nilable(String)) }
  def country; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def country=(value); end

  sig { returns(T::Boolean) }
  def country?; end

  sig { returns(T.nilable(String)) }
  def device_type; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def device_type=(value); end

  sig { returns(T::Boolean) }
  def device_type?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(String)) }
  def ip; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def ip=(value); end

  sig { returns(T::Boolean) }
  def ip?; end

  sig { returns(T.nilable(String)) }
  def landing_page; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def landing_page=(value); end

  sig { returns(T::Boolean) }
  def landing_page?; end

  sig { returns(T.nilable(Float)) }
  def latitude; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def latitude=(value); end

  sig { returns(T::Boolean) }
  def latitude?; end

  sig { returns(T.nilable(Float)) }
  def longitude; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def longitude=(value); end

  sig { returns(T::Boolean) }
  def longitude?; end

  sig { returns(T.nilable(String)) }
  def os; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def os=(value); end

  sig { returns(T::Boolean) }
  def os?; end

  sig { returns(T.nilable(String)) }
  def os_version; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def os_version=(value); end

  sig { returns(T::Boolean) }
  def os_version?; end

  sig { returns(T.nilable(String)) }
  def platform; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def platform=(value); end

  sig { returns(T::Boolean) }
  def platform?; end

  sig { returns(T.nilable(String)) }
  def referrer; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def referrer=(value); end

  sig { returns(T::Boolean) }
  def referrer?; end

  sig { returns(T.nilable(String)) }
  def referring_domain; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def referring_domain=(value); end

  sig { returns(T::Boolean) }
  def referring_domain?; end

  sig { returns(T.nilable(String)) }
  def region; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def region=(value); end

  sig { returns(T::Boolean) }
  def region?; end

  sig { returns(T.nilable(ActiveSupport::TimeWithZone)) }
  def started_at; end

  sig { params(value: T.nilable(T.any(Date, Time, ActiveSupport::TimeWithZone))).void }
  def started_at=(value); end

  sig { returns(T::Boolean) }
  def started_at?; end

  sig { returns(T.nilable(String)) }
  def user_agent; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def user_agent=(value); end

  sig { returns(T::Boolean) }
  def user_agent?; end

  sig { returns(T.nilable(Integer)) }
  def user_id; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def user_id=(value); end

  sig { returns(T::Boolean) }
  def user_id?; end

  sig { returns(T.nilable(String)) }
  def utm_campaign; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def utm_campaign=(value); end

  sig { returns(T::Boolean) }
  def utm_campaign?; end

  sig { returns(T.nilable(String)) }
  def utm_content; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def utm_content=(value); end

  sig { returns(T::Boolean) }
  def utm_content?; end

  sig { returns(T.nilable(String)) }
  def utm_medium; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def utm_medium=(value); end

  sig { returns(T::Boolean) }
  def utm_medium?; end

  sig { returns(T.nilable(String)) }
  def utm_source; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def utm_source=(value); end

  sig { returns(T::Boolean) }
  def utm_source?; end

  sig { returns(T.nilable(String)) }
  def utm_term; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def utm_term=(value); end

  sig { returns(T::Boolean) }
  def utm_term?; end

  sig { returns(T.nilable(String)) }
  def visit_token; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def visit_token=(value); end

  sig { returns(T::Boolean) }
  def visit_token?; end

  sig { returns(T.nilable(String)) }
  def visitor_token; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def visitor_token=(value); end

  sig { returns(T::Boolean) }
  def visitor_token?; end
end

module Ahoy::Visit::GeneratedAssociationMethods
  sig { returns(::Ahoy::Event::ActiveRecord_Associations_CollectionProxy) }
  def events; end

  sig { returns(T::Array[Integer]) }
  def event_ids; end

  sig { params(value: T::Enumerable[::Ahoy::Event]).void }
  def events=(value); end

  sig { returns(T.nilable(::User)) }
  def user; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
  def build_user(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
  def create_user(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
  def create_user!(*args, &block); end

  sig { params(value: T.nilable(::User)).void }
  def user=(value); end

  sig { returns(T.nilable(::User)) }
  def reload_user; end
end

module Ahoy::Visit::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Ahoy::Visit]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Ahoy::Visit]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Ahoy::Visit]) }
  def find_n(*args); end

  sig { params(id: T.nilable(Integer)).returns(T.nilable(Ahoy::Visit)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Ahoy::Visit) }
  def find_by_id!(id); end
end

class Ahoy::Visit < ApplicationRecord
  include Ahoy::Visit::GeneratedAttributeMethods
  include Ahoy::Visit::GeneratedAssociationMethods
  extend Ahoy::Visit::CustomFinderMethods
  extend Ahoy::Visit::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Ahoy::Visit::ActiveRecord_Relation, Ahoy::Visit::ActiveRecord_Associations_CollectionProxy, Ahoy::Visit::ActiveRecord_AssociationRelation) }

  sig { params(num: T.nilable(Integer)).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def self.page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def self.per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def self.padding(num); end

  sig { returns(Integer) }
  def self.default_per_page; end
end

module Ahoy::Visit::QueryMethodsReturningRelation
  sig { returns(Ahoy::Visit::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Ahoy::Visit).returns(T::Boolean)).returns(T::Array[Ahoy::Visit]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def select_columns(*args); end

  sig { params(args: Symbol).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def where_missing(*args); end

  sig { params(column: Symbol, values: T::Array[T.untyped]).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def in_order_of(column, values); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Ahoy::Visit::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module Ahoy::Visit::QueryMethodsReturningAssociationRelation
  sig { returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Ahoy::Visit).returns(T::Boolean)).returns(T::Array[Ahoy::Visit]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def select_columns(*args); end

  sig { params(args: Symbol).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def where_missing(*args); end

  sig { params(column: Symbol, values: T::Array[T.untyped]).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def in_order_of(column, values); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Ahoy::Visit::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

class Ahoy::Visit::ActiveRecord_Relation < ActiveRecord::Relation
  include Ahoy::Visit::ActiveRelation_WhereNot
  include Ahoy::Visit::CustomFinderMethods
  include Ahoy::Visit::QueryMethodsReturningRelation
  Elem = type_member {{fixed: Ahoy::Visit}}

  sig { params(num: T.nilable(Integer)).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(Ahoy::Visit::ActiveRecord_Relation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end

class Ahoy::Visit::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Ahoy::Visit::ActiveRelation_WhereNot
  include Ahoy::Visit::CustomFinderMethods
  include Ahoy::Visit::QueryMethodsReturningAssociationRelation
  Elem = type_member {{fixed: Ahoy::Visit}}

  sig { params(num: T.nilable(Integer)).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end

class Ahoy::Visit::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Ahoy::Visit::CustomFinderMethods
  include Ahoy::Visit::QueryMethodsReturningAssociationRelation
  Elem = type_member {{fixed: Ahoy::Visit}}

  sig { params(records: T.any(Ahoy::Visit, T::Array[Ahoy::Visit])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Ahoy::Visit, T::Array[Ahoy::Visit])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Ahoy::Visit, T::Array[Ahoy::Visit])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Ahoy::Visit, T::Array[Ahoy::Visit])).returns(T.self_type) }
  def concat(*records); end

  sig { params(num: T.nilable(Integer)).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(Ahoy::Visit::ActiveRecord_AssociationRelation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end
