# This is an autogenerated file for dynamic methods in Course
# Please rerun bundle exec rake rails_rbi:models[Course] to regenerate.

# typed: strong
module Course::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Course::GeneratedAttributeMethods
  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(String)) }
  def description; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def description=(value); end

  sig { returns(T::Boolean) }
  def description?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(String) }
  def number; end

  sig { params(value: T.any(String, Symbol)).void }
  def number=(value); end

  sig { returns(T::Boolean) }
  def number?; end

  sig { returns(Integer) }
  def subject_area_id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def subject_area_id=(value); end

  sig { returns(T::Boolean) }
  def subject_area_id?; end

  sig { returns(T.nilable(Integer)) }
  def superseding_course_id; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def superseding_course_id=(value); end

  sig { returns(T::Boolean) }
  def superseding_course_id?; end

  sig { returns(String) }
  def title; end

  sig { params(value: T.any(String, Symbol)).void }
  def title=(value); end

  sig { returns(T::Boolean) }
  def title?; end

  sig { returns(T.nilable(String)) }
  def units; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def units=(value); end

  sig { returns(T::Boolean) }
  def units?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def updated_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end
end

module Course::GeneratedAssociationMethods
  sig { returns(::Instructor::ActiveRecord_Associations_CollectionProxy) }
  def instructors; end

  sig { returns(T::Array[Integer]) }
  def instructor_ids; end

  sig { params(value: T::Enumerable[::Instructor]).void }
  def instructors=(value); end

  sig { returns(T.nilable(::Course)) }
  def preceding_course; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Course).void)).returns(::Course) }
  def build_preceding_course(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Course).void)).returns(::Course) }
  def create_preceding_course(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Course).void)).returns(::Course) }
  def create_preceding_course!(*args, &block); end

  sig { params(value: T.nilable(::Course)).void }
  def preceding_course=(value); end

  sig { returns(T.nilable(::Course)) }
  def reload_preceding_course; end

  sig { returns(::Section::ActiveRecord_Associations_CollectionProxy) }
  def sections; end

  sig { returns(T::Array[Integer]) }
  def section_ids; end

  sig { params(value: T::Enumerable[::Section]).void }
  def sections=(value); end

  sig { returns(::SubjectArea) }
  def subject_area; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::SubjectArea).void)).returns(::SubjectArea) }
  def build_subject_area(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::SubjectArea).void)).returns(::SubjectArea) }
  def create_subject_area(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::SubjectArea).void)).returns(::SubjectArea) }
  def create_subject_area!(*args, &block); end

  sig { params(value: ::SubjectArea).void }
  def subject_area=(value); end

  sig { returns(::SubjectArea) }
  def reload_subject_area; end

  sig { returns(T.nilable(::Course)) }
  def superseding_course; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Course).void)).returns(::Course) }
  def build_superseding_course(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Course).void)).returns(::Course) }
  def create_superseding_course(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Course).void)).returns(::Course) }
  def create_superseding_course!(*args, &block); end

  sig { params(value: T.nilable(::Course)).void }
  def superseding_course=(value); end

  sig { returns(T.nilable(::Course)) }
  def reload_superseding_course; end

  sig { returns(::Term::ActiveRecord_Associations_CollectionProxy) }
  def terms; end

  sig { returns(T::Array[Integer]) }
  def term_ids; end

  sig { params(value: T::Enumerable[::Term]).void }
  def terms=(value); end
end

module Course::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Course]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Course]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Course]) }
  def find_n(*args); end

  sig { params(id: T.nilable(Integer)).returns(T.nilable(Course)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Course) }
  def find_by_id!(id); end
end

class Course < ApplicationRecord
  include Course::GeneratedAttributeMethods
  include Course::GeneratedAssociationMethods
  extend Course::CustomFinderMethods
  extend Course::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Course::ActiveRecord_Relation, Course::ActiveRecord_Associations_CollectionProxy, Course::ActiveRecord_AssociationRelation) }

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def self.active(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def self.order_by_number(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def self.search_import(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def self.with_only_offered_section_counts(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def self.with_section_counts(*args); end

  sig { params(num: T.nilable(Integer)).returns(Course::ActiveRecord_Relation) }
  def self.page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(Course::ActiveRecord_Relation) }
  def self.per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(Course::ActiveRecord_Relation) }
  def self.padding(num); end

  sig { returns(Integer) }
  def self.default_per_page; end
end

class Course::ActiveRecord_Relation < ActiveRecord::Relation
  include Course::ActiveRelation_WhereNot
  include Course::CustomFinderMethods
  include Course::QueryMethodsReturningRelation
  Elem = type_member {{fixed: Course}}

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def active(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def order_by_number(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def search_import(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def with_only_offered_section_counts(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def with_section_counts(*args); end

  sig { params(num: T.nilable(Integer)).returns(Course::ActiveRecord_Relation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(Course::ActiveRecord_Relation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(Course::ActiveRecord_Relation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end

class Course::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Course::ActiveRelation_WhereNot
  include Course::CustomFinderMethods
  include Course::QueryMethodsReturningAssociationRelation
  Elem = type_member {{fixed: Course}}

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def active(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def order_by_number(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def search_import(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def with_only_offered_section_counts(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def with_section_counts(*args); end

  sig { params(num: T.nilable(Integer)).returns(Course::ActiveRecord_AssociationRelation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(Course::ActiveRecord_AssociationRelation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(Course::ActiveRecord_AssociationRelation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end

class Course::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Course::CustomFinderMethods
  include Course::QueryMethodsReturningAssociationRelation
  Elem = type_member {{fixed: Course}}

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def active(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def order_by_number(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def search_import(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def with_only_offered_section_counts(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def with_section_counts(*args); end

  sig { params(records: T.any(Course, T::Array[Course])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Course, T::Array[Course])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Course, T::Array[Course])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Course, T::Array[Course])).returns(T.self_type) }
  def concat(*records); end

  sig { params(num: T.nilable(Integer)).returns(Course::ActiveRecord_AssociationRelation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(Course::ActiveRecord_AssociationRelation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(Course::ActiveRecord_AssociationRelation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end

module Course::QueryMethodsReturningRelation
  sig { returns(Course::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Course::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Course).returns(T::Boolean)).returns(T::Array[Course]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Course::ActiveRecord_Relation) }
  def select_columns(*args); end

  sig { params(args: Symbol).returns(Course::ActiveRecord_Relation) }
  def where_missing(*args); end

  sig { params(column: Symbol, values: T::Array[T.untyped]).returns(Course::ActiveRecord_Relation) }
  def in_order_of(column, values); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Course::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Course::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module Course::QueryMethodsReturningAssociationRelation
  sig { returns(Course::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Course::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Course::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Course).returns(T::Boolean)).returns(T::Array[Course]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Course::ActiveRecord_AssociationRelation) }
  def select_columns(*args); end

  sig { params(args: Symbol).returns(Course::ActiveRecord_AssociationRelation) }
  def where_missing(*args); end

  sig { params(column: Symbol, values: T::Array[T.untyped]).returns(Course::ActiveRecord_AssociationRelation) }
  def in_order_of(column, values); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Course::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Course::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end
